

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Nov 08 10:24:57 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42   000000                     
    43                           ; Version 2.35
    44                           ; Generated 05/05/2021 GMT
    45                           ; 
    46                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F67K40 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78   000000                     
    79                           	psect	idataCOMRAM
    80   001552                     __pidataCOMRAM:
    81                           	callstack 0
    82                           
    83                           ;initializer for _minutes
    84   001552  0001               	dw	1
    85                           
    86                           ;initializer for _hours
    87   001554  0001               	dw	1
    88                           
    89                           ;initializer for _seconds
    90   001556  0001               	dw	1
    91                           
    92                           	psect	idataBANK0
    93   0014D2                     __pidataBANK0:
    94                           	callstack 0
    95                           
    96                           ;initializer for increment_day@F14265
    97   0014D2  001F               	dw	31
    98   0014D4  001C               	dw	28
    99   0014D6  001F               	dw	31
   100   0014D8  001E               	dw	30
   101   0014DA  001F               	dw	31
   102   0014DC  001E               	dw	30
   103   0014DE  001F               	dw	31
   104   0014E0  001F               	dw	31
   105   0014E2  001E               	dw	30
   106   0014E4  001F               	dw	31
   107   0014E6  001E               	dw	30
   108   0014E8  001F               	dw	31
   109                           
   110                           ;initializer for _year
   111   0014EA  07E4               	dw	2020
   112                           
   113                           ;initializer for _month
   114   0014EC  0001               	dw	1
   115                           
   116                           ;initializer for _day
   117   0014EE  0001               	dw	1
   118                           
   119                           ;initializer for _day_of_the_week
   120   0014F0  0001               	dw	1
   121   000000                     _TRISEbits	set	3973
   122   000000                     _TRISCbits	set	3971
   123   000000                     _LATEbits	set	3965
   124   000000                     _LATCbits	set	3963
   125   000000                     _T0CON0bits	set	4053
   126   000000                     _T0CON1bits	set	4054
   127   000000                     _CM1CON1bits	set	3793
   128   000000                     _LATDbits	set	3964
   129   000000                     _TRISDbits	set	3972
   130   000000                     _TRISHbits	set	3976
   131   000000                     _LATHbits	set	3968
   132   000000                     _LATBbits	set	3962
   133   000000                     _LATFbits	set	3966
   134   000000                     _PORTAbits	set	3977
   135   000000                     _PORTGbits	set	3983
   136   000000                     _TRISBbits	set	3970
   137   000000                     _TRISFbits	set	3974
   138                           
   139                           	psect	nvCOMRAM
   140   000036                     __pnvCOMRAM:
   141                           	callstack 0
   142   000036                     _test_mode:
   143                           	callstack 0
   144   000036                     	ds	2
   145   000000                     _IPR2bits	set	3617
   146   000000                     _PIE2bits	set	3627
   147   000000                     _DAC1CON0bits	set	3782
   148   000000                     _LATAbits	set	3961
   149   000000                     _LATGbits	set	3967
   150   000000                     _TRISAbits	set	3969
   151   000000                     _TRISGbits	set	3975
   152   000000                     _TMR0L	set	4051
   153   000000                     _TMR0H	set	4052
   154   000000                     _INTCONbits	set	4082
   155   000000                     _PORTBbits	set	3978
   156   000000                     _PORTFbits	set	3982
   157   000000                     _CM1CON0bits	set	3792
   158   000000                     _CM1NCHbits	set	3794
   159   000000                     _DAC1CON1bits	set	3783
   160   000000                     _ADREFbits	set	3928
   161   000000                     _CM1PCHbits	set	3795
   162   000000                     _PIR0bits	set	3635
   163   000000                     _PIR2bits	set	3637
   164   000000                     _PIE0bits	set	3625
   165   000000                     _ANSELAbits	set	3730
   166   000000                     _ADPCH	set	3935
   167   000000                     _ADRESH	set	3940
   168   000000                     _ADCON0bits	set	3936
   169                           
   170                           	psect	smallconst
   171   000E00                     __psmallconst:
   172                           	callstack 0
   173   000E00  00                 	db	0
   174   000E01  25                 	db	37
   175   000E02  64                 	db	100	;'d'
   176   000E03  00                 	db	0
   177   000E04  00                 	db	0	; dummy byte at the end
   178   000000                     
   179                           ; #config settings
   180                           
   181                           	psect	cinit
   182   0012AE                     __pcinit:
   183                           	callstack 0
   184   0012AE                     start_initialization:
   185                           	callstack 0
   186   0012AE                     __initialization:
   187                           	callstack 0
   188                           
   189                           ; Initialize objects allocated to BANK0 (32 bytes)
   190                           ; load TBLPTR registers with __pidataBANK0
   191   0012AE  0ED2               	movlw	low __pidataBANK0
   192   0012B0  6EF6               	movwf	tblptrl,c
   193   0012B2  0E14               	movlw	high __pidataBANK0
   194   0012B4  6EF7               	movwf	tblptrh,c
   195   0012B6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   196   0012B8  6EF8               	movwf	tblptru,c
   197   0012BA  EE00  F086         	lfsr	0,__pdataBANK0
   198   0012BE  EE10 F020          	lfsr	1,32
   199   0012C2                     copy_data0:
   200   0012C2  0009               	tblrd		*+
   201   0012C4  CFF5 FFEE          	movff	tablat,postinc0
   202   0012C8  50E5               	movf	postdec1,w,c
   203   0012CA  50E1               	movf	fsr1l,w,c
   204   0012CC  E1FA               	bnz	copy_data0
   205                           
   206                           ; Initialize objects allocated to COMRAM (6 bytes)
   207                           ; load TBLPTR registers with __pidataCOMRAM
   208   0012CE  0E52               	movlw	low __pidataCOMRAM
   209   0012D0  6EF6               	movwf	tblptrl,c
   210   0012D2  0E15               	movlw	high __pidataCOMRAM
   211   0012D4  6EF7               	movwf	tblptrh,c
   212   0012D6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   213   0012D8  6EF8               	movwf	tblptru,c
   214   0012DA  EE00  F030         	lfsr	0,__pdataCOMRAM
   215   0012DE  EE10 F006          	lfsr	1,6
   216   0012E2                     copy_data1:
   217   0012E2  0009               	tblrd		*+
   218   0012E4  CFF5 FFEE          	movff	tablat,postinc0
   219   0012E8  50E5               	movf	postdec1,w,c
   220   0012EA  50E1               	movf	fsr1l,w,c
   221   0012EC  E1FA               	bnz	copy_data1
   222                           
   223                           ; Clear objects allocated to COMRAM (2 bytes)
   224   0012EE  6A39               	clrf	(__pbssCOMRAM+1)& (0+255),c
   225   0012F0  6A38               	clrf	__pbssCOMRAM& (0+255),c
   226   0012F2                     end_of_initialization:
   227                           	callstack 0
   228   0012F2                     __end_of__initialization:
   229                           	callstack 0
   230   0012F2  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   231   0012F4  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   232   0012F6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   233   0012F8  6EF8               	movwf	tblptru,c
   234   0012FA  0E0E               	movlw	high __Lsmallconst
   235   0012FC  6EF7               	movwf	tblptrh,c
   236   0012FE  0100               	movlb	0
   237   001300  EF52  F008         	goto	_main	;jump to C main() function
   238                           
   239                           	psect	bssCOMRAM
   240   000038                     __pbssCOMRAM:
   241                           	callstack 0
   242   000038                     _time_corrector:
   243                           	callstack 0
   244   000038                     	ds	2
   245                           
   246                           	psect	dataCOMRAM
   247   000030                     __pdataCOMRAM:
   248                           	callstack 0
   249   000030                     _minutes:
   250                           	callstack 0
   251   000030                     	ds	2
   252   000032                     _hours:
   253                           	callstack 0
   254   000032                     	ds	2
   255   000034                     _seconds:
   256                           	callstack 0
   257   000034                     	ds	2
   258                           
   259                           	psect	dataBANK0
   260   000086                     __pdataBANK0:
   261                           	callstack 0
   262   000086                     increment_day@F14265:
   263                           	callstack 0
   264   000086                     	ds	24
   265   00009E                     _year:
   266                           	callstack 0
   267   00009E                     	ds	2
   268   0000A0                     _month:
   269                           	callstack 0
   270   0000A0                     	ds	2
   271   0000A2                     _day:
   272                           	callstack 0
   273   0000A2                     	ds	2
   274   0000A4                     _day_of_the_week:
   275                           	callstack 0
   276   0000A4                     	ds	2
   277                           
   278                           	psect	cstackBANK0
   279   000060                     __pcstackBANK0:
   280                           	callstack 0
   281   000060                     ?_get_day:
   282                           	callstack 0
   283   000060                     ?_get_month:
   284                           	callstack 0
   285   000060                     LCD_sendnibble@number:
   286                           	callstack 0
   287   000060                     Timer0_init@init_test_mode:
   288                           	callstack 0
   289   000060                     increment_month@increment:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0x0
   293   000060                     	ds	1
   294   000061                     LCD_sendbyte@type:
   295                           	callstack 0
   296                           
   297                           ; 1 bytes @ 0x1
   298   000061                     	ds	1
   299   000062                     LCD_sendbyte@Byte:
   300                           	callstack 0
   301   000062                     increment_day@increment:
   302                           	callstack 0
   303   000062                     Timer0_init@current_minute:
   304                           	callstack 0
   305                           
   306                           ; 4 bytes @ 0x2
   307   000062                     	ds	1
   308   000063                     ??_LCD_Init:
   309                           
   310                           ; 1 bytes @ 0x3
   311   000063                     	ds	1
   312   000064                     ??_increment_day:
   313                           
   314                           ; 1 bytes @ 0x4
   315   000064                     	ds	2
   316   000066                     Timer0_init@current_hour:
   317                           	callstack 0
   318                           
   319                           ; 4 bytes @ 0x6
   320   000066                     	ds	2
   321   000068                     increment_day@day_in_month:
   322                           	callstack 0
   323                           
   324                           ; 24 bytes @ 0x8
   325   000068                     	ds	2
   326   00006A                     Timer0_init@current_day:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0xA
   330   00006A                     	ds	2
   331   00006C                     Timer0_init@current_day_of_the_week:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0xC
   335   00006C                     	ds	2
   336   00006E                     Timer0_init@current_month:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0xE
   340   00006E                     	ds	2
   341   000070                     Timer0_init@current_year:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x10
   345   000070                     	ds	2
   346   000072                     
   347                           ; 1 bytes @ 0x12
   348   000072                     	ds	14
   349   000080                     increment_day@curr_day_in_month:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x20
   353   000080                     	ds	2
   354   000082                     main@month:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0x22
   358   000082                     	ds	2
   359   000084                     main@day:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x24
   363   000084                     	ds	2
   364                           
   365                           	psect	cstackCOMRAM
   366   000001                     __pcstackCOMRAM:
   367                           	callstack 0
   368   000001                     ?___wmul:
   369                           	callstack 0
   370   000001                     ___wmul@multiplier:
   371                           	callstack 0
   372   000001                     i2increment_month@increment:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0x0
   376   000001                     	ds	2
   377   000003                     ___wmul@multiplicand:
   378                           	callstack 0
   379   000003                     i2increment_day@increment:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x2
   383   000003                     	ds	2
   384   000005                     ??i2_increment_day:
   385   000005                     ___wmul@product:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x4
   389   000005                     	ds	4
   390   000009                     i2increment_day@day_in_month:
   391                           	callstack 0
   392                           
   393                           ; 24 bytes @ 0x8
   394   000009                     	ds	24
   395   000021                     i2increment_day@curr_day_in_month:
   396                           	callstack 0
   397                           
   398                           ; 2 bytes @ 0x20
   399   000021                     	ds	2
   400   000023                     increment_hours@increment:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x22
   404   000023                     	ds	2
   405   000025                     increment_minutes@increment:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0x24
   409   000025                     	ds	2
   410   000027                     increment_seconds@increment:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x26
   414   000027                     	ds	2
   415   000029                     ??_HighISR:
   416                           
   417                           ; 1 bytes @ 0x28
   418   000029                     	ds	7
   419                           
   420 ;;
   421 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   422 ;;
   423 ;; *************** function _main *****************
   424 ;; Defined at:
   425 ;;		line 26 in file "main.c"
   426 ;; Parameters:    Size  Location     Type
   427 ;;		None
   428 ;; Auto vars:     Size  Location     Type
   429 ;;  day             2   36[BANK0 ] unsigned int 
   430 ;;  month           2   34[BANK0 ] unsigned int 
   431 ;;  buf2            3    0        PTR unsigned char 
   432 ;;  buf1            3    0        PTR unsigned char 
   433 ;;  buf             3    0        PTR unsigned char 
   434 ;;  curr_month      2    0        unsigned int 
   435 ;;  curr_day        2    0        unsigned int 
   436 ;; Return value:  Size  Location     Type
   437 ;;                  1    wreg      void 
   438 ;; Registers used:
   439 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : 0/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   446 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   448 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   449 ;;Total ram usage:        4 bytes
   450 ;; Hardware stack levels required when called: 10
   451 ;; This function calls:
   452 ;;		_ADC_init
   453 ;;		_Comp1_init
   454 ;;		_Interrupts_init
   455 ;;		_LCD_Init
   456 ;;		_LEDarray_init
   457 ;;		_Timer0_init
   458 ;;		_get_day
   459 ;;		_get_month
   460 ;;		_increment_day
   461 ;; This function is called by:
   462 ;;		Startup code after reset
   463 ;; This function uses a non-reentrant model
   464 ;;
   465                           
   466                           	psect	text0
   467   0010A4                     __ptext0:
   468                           	callstack 0
   469   0010A4                     _main:
   470                           	callstack 21
   471   0010A4                     
   472                           ;main.c: 28:     LATHbits.LATH3=0;
   473   0010A4  9680               	bcf	128,3,c	;volatile
   474                           
   475                           ;main.c: 29:     TRISHbits.TRISH3=0;
   476   0010A6  9688               	bcf	136,3,c	;volatile
   477                           
   478                           ;main.c: 31:     TRISDbits.TRISD7=0;
   479   0010A8  9E84               	bcf	132,7,c	;volatile
   480                           
   481                           ;main.c: 32:     LATDbits.LATD7=1;
   482   0010AA  8E7C               	bsf	124,7,c	;volatile
   483                           
   484                           ;main.c: 34:     TRISAbits.TRISA3=1;
   485   0010AC  8681               	bsf	129,3,c	;volatile
   486                           
   487                           ;main.c: 36:     LATHbits.LATH3 = 1;
   488   0010AE  8680               	bsf	128,3,c	;volatile
   489   0010B0                     
   490                           ;main.c: 37:     Comp1_init();
   491   0010B0  EC57  F00A         	call	_Comp1_init	;wreg free
   492   0010B4                     
   493                           ;main.c: 38:     Interrupts_init();
   494   0010B4  EC90  F00A         	call	_Interrupts_init	;wreg free
   495   0010B8                     
   496                           ;main.c: 39:     Timer0_init(1,57,17,06,1,11,2022);
   497   0010B8  0E00               	movlw	0
   498   0010BA  0100               	movlb	0	; () banked
   499   0010BC  6F61               	movwf	(Timer0_init@init_test_mode+1)& (0+255),b
   500   0010BE  0E01               	movlw	1
   501   0010C0  6F60               	movwf	Timer0_init@init_test_mode& (0+255),b
   502   0010C2  0E39               	movlw	57
   503   0010C4  6F62               	movwf	Timer0_init@current_minute& (0+255),b
   504   0010C6  0E00               	movlw	0
   505   0010C8  6F63               	movwf	(Timer0_init@current_minute+1)& (0+255),b
   506   0010CA  0E00               	movlw	0
   507   0010CC  6F64               	movwf	(Timer0_init@current_minute+2)& (0+255),b
   508   0010CE  0E00               	movlw	0
   509   0010D0  6F65               	movwf	(Timer0_init@current_minute+3)& (0+255),b
   510   0010D2  0E11               	movlw	17
   511   0010D4  6F66               	movwf	Timer0_init@current_hour& (0+255),b
   512   0010D6  0E00               	movlw	0
   513   0010D8  6F67               	movwf	(Timer0_init@current_hour+1)& (0+255),b
   514   0010DA  0E00               	movlw	0
   515   0010DC  6F68               	movwf	(Timer0_init@current_hour+2)& (0+255),b
   516   0010DE  0E00               	movlw	0
   517   0010E0  6F69               	movwf	(Timer0_init@current_hour+3)& (0+255),b
   518   0010E2  0E00               	movlw	0
   519   0010E4  6F6B               	movwf	(Timer0_init@current_day+1)& (0+255),b
   520   0010E6  0E06               	movlw	6
   521   0010E8  6F6A               	movwf	Timer0_init@current_day& (0+255),b
   522   0010EA  0E00               	movlw	0
   523   0010EC  6F6D               	movwf	(Timer0_init@current_day_of_the_week+1)& (0+255),b
   524   0010EE  0E01               	movlw	1
   525   0010F0  6F6C               	movwf	Timer0_init@current_day_of_the_week& (0+255),b
   526   0010F2  0E00               	movlw	0
   527   0010F4  6F6F               	movwf	(Timer0_init@current_month+1)& (0+255),b
   528   0010F6  0E0B               	movlw	11
   529   0010F8  6F6E               	movwf	Timer0_init@current_month& (0+255),b
   530   0010FA  0E07               	movlw	7
   531   0010FC  6F71               	movwf	(Timer0_init@current_year+1)& (0+255),b
   532   0010FE  0EE6               	movlw	230
   533   001100  6F70               	movwf	Timer0_init@current_year& (0+255),b
   534   001102  ECA8  F008         	call	_Timer0_init	;wreg free
   535   001106                     
   536                           ;main.c: 40:     LEDarray_init();
   537   001106  EC12  F00A         	call	_LEDarray_init	;wreg free
   538   00110A                     
   539                           ;main.c: 41:     ADC_init();
   540   00110A  EC79  F00A         	call	_ADC_init	;wreg free
   541                           
   542                           ;main.c: 42:     LCD_Init();
   543   00110E  ECF5  F007         	call	_LCD_Init	;wreg free
   544   001112                     l2091:
   545                           
   546                           ;main.c: 51:         unsigned int day = get_day();
   547   001112  ECA4  F00A         	call	_get_day	;wreg free
   548   001116  C060  F084         	movff	?_get_day,main@day
   549   00111A  C061  F085         	movff	?_get_day+1,main@day+1
   550   00111E                     
   551                           ;main.c: 52:         unsigned int month = get_month();
   552   00111E  EC9F  F00A         	call	_get_month	;wreg free
   553   001122  C060  F082         	movff	?_get_month,main@month
   554   001126  C061  F083         	movff	?_get_month+1,main@month+1
   555   00112A                     
   556                           ;main.c: 54:         increment_day(1);
   557   00112A  0E00               	movlw	0
   558   00112C  0100               	movlb	0	; () banked
   559   00112E  6F63               	movwf	(increment_day@increment+1)& (0+255),b
   560   001130  0E01               	movlw	1
   561   001132  6F62               	movwf	increment_day@increment& (0+255),b
   562   001134  EC03  F007         	call	_increment_day	;wreg free
   563   001138                     
   564                           ;main.c: 56:         day += 1;
   565   001138  0100               	movlb	0	; () banked
   566   00113A  4B84               	infsnz	main@day& (0+255),f,b
   567   00113C  2B85               	incf	(main@day+1)& (0+255),f,b
   568   00113E                     
   569                           ; BSR set to: 0
   570                           ;main.c: 57:         day -= 1;
   571   00113E  0784               	decf	main@day& (0+255),f,b
   572   001140  A0D8               	btfss	status,0,c
   573   001142  0785               	decf	(main@day+1)& (0+255),f,b
   574   001144                     
   575                           ; BSR set to: 0
   576                           ;main.c: 58:         month += 1;
   577   001144  4B82               	infsnz	main@month& (0+255),f,b
   578   001146  2B83               	incf	(main@month+1)& (0+255),f,b
   579   001148  EF89  F008         	goto	l2091
   580   00114C  EF5C  F000         	goto	start
   581   001150                     __end_of_main:
   582                           	callstack 0
   583                           
   584 ;; *************** function _increment_day *****************
   585 ;; Defined at:
   586 ;;		line 117 in file "timers.c"
   587 ;; Parameters:    Size  Location     Type
   588 ;;  increment       2    2[BANK0 ] unsigned int 
   589 ;; Auto vars:     Size  Location     Type
   590 ;;  day_in_month   24    8[BANK0 ] unsigned int [12]
   591 ;;  curr_day_in_    2   32[BANK0 ] unsigned int 
   592 ;; Return value:  Size  Location     Type
   593 ;;                  1    wreg      void 
   594 ;; Registers used:
   595 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   596 ;; Tracked objects:
   597 ;;		On entry : 0/0
   598 ;;		On exit  : 0/0
   599 ;;		Unchanged: 0/0
   600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   601 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   602 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   603 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   604 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   605 ;;Total ram usage:       32 bytes
   606 ;; Hardware stack levels used: 1
   607 ;; Hardware stack levels required when called: 7
   608 ;; This function calls:
   609 ;;		_increment_month
   610 ;; This function is called by:
   611 ;;		_main
   612 ;; This function uses a non-reentrant model
   613 ;;
   614                           
   615                           	psect	text1
   616   000E06                     __ptext1:
   617                           	callstack 0
   618   000E06                     _increment_day:
   619                           	callstack 23
   620   000E06                     
   621                           ;timers.c: 118:     while(increment > 0){
   622   000E06  EF71  F007         	goto	l2045
   623   000E0A                     l2019:
   624                           
   625                           ; BSR set to: 0
   626                           ;timers.c: 120:         unsigned int day_in_month[] = {31,28,31,30,31,30,31,31,30,31,30,
      +                          31};
   627   000E0A  EE20  F086         	lfsr	2,increment_day@F14265
   628   000E0E  EE10  F068         	lfsr	1,increment_day@day_in_month
   629   000E12  0E17               	movlw	23
   630   000E14                     u1241:
   631   000E14  CFDB FFE3          	movff	plusw2,plusw1
   632   000E18  06E8               	decf	wreg,f,c
   633   000E1A  E2FC               	bc	u1241
   634   000E1C                     
   635                           ; BSR set to: 0
   636                           ;timers.c: 121:         unsigned int curr_day_in_month = day_in_month[month - 1];
   637   000E1C  C0A0  F064         	movff	_month,??_increment_day
   638   000E20  C0A1  F065         	movff	_month+1,??_increment_day+1
   639   000E24  90D8               	bcf	status,0,c
   640   000E26  3764               	rlcf	??_increment_day& (0+255),f,b
   641   000E28  3765               	rlcf	(??_increment_day+1)& (0+255),f,b
   642   000E2A  0EFE               	movlw	254
   643   000E2C  2564               	addwf	??_increment_day& (0+255),w,b
   644   000E2E  6F66               	movwf	(??_increment_day+2)& (0+255),b
   645   000E30  0EFF               	movlw	255
   646   000E32  2165               	addwfc	(??_increment_day+1)& (0+255),w,b
   647   000E34  6F67               	movwf	(??_increment_day+3)& (0+255),b
   648   000E36  0E68               	movlw	low increment_day@day_in_month
   649   000E38  2566               	addwf	(??_increment_day+2)& (0+255),w,b
   650   000E3A  6ED9               	movwf	fsr2l,c
   651   000E3C  0E00               	movlw	high increment_day@day_in_month
   652   000E3E  2167               	addwfc	(??_increment_day+3)& (0+255),w,b
   653   000E40  6EDA               	movwf	fsr2h,c
   654   000E42  CFDE F080          	movff	postinc2,increment_day@curr_day_in_month
   655   000E46  CFDD F081          	movff	postdec2,increment_day@curr_day_in_month+1
   656   000E4A                     
   657                           ; BSR set to: 0
   658                           ;timers.c: 122:         if(month == 2 && (year - 2020)%4 == 0){
   659   000E4A  0E02               	movlw	2
   660   000E4C  19A0               	xorwf	_month& (0+255),w,b
   661   000E4E  11A1               	iorwf	(_month+1)& (0+255),w,b
   662   000E50  A4D8               	btfss	status,2,c
   663   000E52  EF2D  F007         	goto	u1251
   664   000E56  EF2F  F007         	goto	u1250
   665   000E5A                     u1251:
   666   000E5A  EF46  F007         	goto	l2029
   667   000E5E                     u1250:
   668   000E5E                     
   669                           ; BSR set to: 0
   670   000E5E  0E1C               	movlw	28
   671   000E60  259E               	addwf	_year& (0+255),w,b
   672   000E62  6F64               	movwf	??_increment_day& (0+255),b
   673   000E64  0EF8               	movlw	248
   674   000E66  219F               	addwfc	(_year+1)& (0+255),w,b
   675   000E68  6F65               	movwf	(??_increment_day+1)& (0+255),b
   676   000E6A  0E03               	movlw	3
   677   000E6C  1764               	andwf	??_increment_day& (0+255),f,b
   678   000E6E  0E00               	movlw	0
   679   000E70  1765               	andwf	(??_increment_day+1)& (0+255),f,b
   680   000E72  5164               	movf	??_increment_day& (0+255),w,b
   681   000E74  1165               	iorwf	(??_increment_day+1)& (0+255),w,b
   682   000E76  A4D8               	btfss	status,2,c
   683   000E78  EF40  F007         	goto	u1261
   684   000E7C  EF42  F007         	goto	u1260
   685   000E80                     u1261:
   686   000E80  EF46  F007         	goto	l2029
   687   000E84                     u1260:
   688   000E84                     
   689                           ; BSR set to: 0
   690                           ;timers.c: 123:             curr_day_in_month = 29;
   691   000E84  0E00               	movlw	0
   692   000E86  6F81               	movwf	(increment_day@curr_day_in_month+1)& (0+255),b
   693   000E88  0E1D               	movlw	29
   694   000E8A  6F80               	movwf	increment_day@curr_day_in_month& (0+255),b
   695   000E8C                     l2029:
   696                           
   697                           ; BSR set to: 0
   698                           ;timers.c: 126:         day += 1;
   699   000E8C  4BA2               	infsnz	_day& (0+255),f,b
   700   000E8E  2BA3               	incf	(_day+1)& (0+255),f,b
   701   000E90                     
   702                           ; BSR set to: 0
   703                           ;timers.c: 127:         day_of_the_week += 1;
   704   000E90  4BA4               	infsnz	_day_of_the_week& (0+255),f,b
   705   000E92  2BA5               	incf	(_day_of_the_week+1)& (0+255),f,b
   706   000E94                     
   707                           ; BSR set to: 0
   708                           ;timers.c: 129:         if(day_of_the_week == 8){
   709   000E94  0E08               	movlw	8
   710   000E96  19A4               	xorwf	_day_of_the_week& (0+255),w,b
   711   000E98  11A5               	iorwf	(_day_of_the_week+1)& (0+255),w,b
   712   000E9A  A4D8               	btfss	status,2,c
   713   000E9C  EF52  F007         	goto	u1271
   714   000EA0  EF54  F007         	goto	u1270
   715   000EA4                     u1271:
   716   000EA4  EF58  F007         	goto	l2037
   717   000EA8                     u1270:
   718   000EA8                     
   719                           ; BSR set to: 0
   720                           ;timers.c: 130:             day_of_the_week = 1;
   721   000EA8  0E00               	movlw	0
   722   000EAA  6FA5               	movwf	(_day_of_the_week+1)& (0+255),b
   723   000EAC  0E01               	movlw	1
   724   000EAE  6FA4               	movwf	_day_of_the_week& (0+255),b
   725   000EB0                     l2037:
   726                           
   727                           ; BSR set to: 0
   728                           ;timers.c: 133:         if(day > curr_day_in_month){
   729   000EB0  51A2               	movf	_day& (0+255),w,b
   730   000EB2  5D80               	subwf	increment_day@curr_day_in_month& (0+255),w,b
   731   000EB4  51A3               	movf	(_day+1)& (0+255),w,b
   732   000EB6  5981               	subwfb	(increment_day@curr_day_in_month+1)& (0+255),w,b
   733   000EB8  B0D8               	btfsc	status,0,c
   734   000EBA  EF61  F007         	goto	u1281
   735   000EBE  EF63  F007         	goto	u1280
   736   000EC2                     u1281:
   737   000EC2  EF6E  F007         	goto	l2043
   738   000EC6                     u1280:
   739   000EC6                     
   740                           ; BSR set to: 0
   741                           ;timers.c: 134:             increment_month(1);
   742   000EC6  0E00               	movlw	0
   743   000EC8  6F61               	movwf	(increment_month@increment+1)& (0+255),b
   744   000ECA  0E01               	movlw	1
   745   000ECC  6F60               	movwf	increment_month@increment& (0+255),b
   746   000ECE  ECCC  F009         	call	_increment_month	;wreg free
   747   000ED2                     
   748                           ;timers.c: 135:             day = 1;
   749   000ED2  0E00               	movlw	0
   750   000ED4  0100               	movlb	0	; () banked
   751   000ED6  6FA3               	movwf	(_day+1)& (0+255),b
   752   000ED8  0E01               	movlw	1
   753   000EDA  6FA2               	movwf	_day& (0+255),b
   754   000EDC                     l2043:
   755                           
   756                           ; BSR set to: 0
   757                           ;timers.c: 138:         increment -= 1;
   758   000EDC  0762               	decf	increment_day@increment& (0+255),f,b
   759   000EDE  A0D8               	btfss	status,0,c
   760   000EE0  0763               	decf	(increment_day@increment+1)& (0+255),f,b
   761   000EE2                     l2045:
   762                           
   763                           ;timers.c: 118:     while(increment > 0){
   764   000EE2  0100               	movlb	0	; () banked
   765   000EE4  5162               	movf	increment_day@increment& (0+255),w,b
   766   000EE6  1163               	iorwf	(increment_day@increment+1)& (0+255),w,b
   767   000EE8  A4D8               	btfss	status,2,c
   768   000EEA  EF79  F007         	goto	u1291
   769   000EEE  EF7B  F007         	goto	u1290
   770   000EF2                     u1291:
   771   000EF2  EF05  F007         	goto	l2019
   772   000EF6                     u1290:
   773   000EF6                     
   774                           ; BSR set to: 0
   775   000EF6  0012               	return		;funcret
   776   000EF8                     __end_of_increment_day:
   777                           	callstack 0
   778                           
   779 ;; *************** function _increment_month *****************
   780 ;; Defined at:
   781 ;;		line 155 in file "timers.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  increment       2    0[BANK0 ] unsigned int 
   784 ;; Auto vars:     Size  Location     Type
   785 ;;		None
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, status,2, status,0
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   795 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   798 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   799 ;;Total ram usage:        2 bytes
   800 ;; Hardware stack levels used: 1
   801 ;; Hardware stack levels required when called: 6
   802 ;; This function calls:
   803 ;;		Nothing
   804 ;; This function is called by:
   805 ;;		_increment_day
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text2
   810   001398                     __ptext2:
   811                           	callstack 0
   812   001398                     _increment_month:
   813                           	callstack 23
   814   001398                     
   815                           ;timers.c: 156:     while(increment > 0){
   816   001398  EFE4  F009         	goto	l1931
   817   00139C                     l1921:
   818                           
   819                           ; BSR set to: 0
   820                           ;timers.c: 158:         month += 1;
   821   00139C  4BA0               	infsnz	_month& (0+255),f,b
   822   00139E  2BA1               	incf	(_month+1)& (0+255),f,b
   823   0013A0                     
   824                           ; BSR set to: 0
   825                           ;timers.c: 159:         if(month > 12){
   826   0013A0  51A1               	movf	(_month+1)& (0+255),w,b
   827   0013A2  E109               	bnz	u1200
   828   0013A4  0E0D               	movlw	13
   829   0013A6  5DA0               	subwf	_month& (0+255),w,b
   830   0013A8  A0D8               	btfss	status,0,c
   831   0013AA  EFD9  F009         	goto	u1201
   832   0013AE  EFDB  F009         	goto	u1200
   833   0013B2                     u1201:
   834   0013B2  EFE1  F009         	goto	l1929
   835   0013B6                     u1200:
   836   0013B6                     
   837                           ; BSR set to: 0
   838                           ;timers.c: 160:             month = 1;
   839   0013B6  0E00               	movlw	0
   840   0013B8  6FA1               	movwf	(_month+1)& (0+255),b
   841   0013BA  0E01               	movlw	1
   842   0013BC  6FA0               	movwf	_month& (0+255),b
   843   0013BE                     
   844                           ; BSR set to: 0
   845                           ;timers.c: 161:             year += 1;
   846   0013BE  4B9E               	infsnz	_year& (0+255),f,b
   847   0013C0  2B9F               	incf	(_year+1)& (0+255),f,b
   848   0013C2                     l1929:
   849                           
   850                           ; BSR set to: 0
   851                           ;timers.c: 163:         increment -= 1;
   852   0013C2  0760               	decf	increment_month@increment& (0+255),f,b
   853   0013C4  A0D8               	btfss	status,0,c
   854   0013C6  0761               	decf	(increment_month@increment+1)& (0+255),f,b
   855   0013C8                     l1931:
   856                           
   857                           ;timers.c: 156:     while(increment > 0){
   858   0013C8  0100               	movlb	0	; () banked
   859   0013CA  5160               	movf	increment_month@increment& (0+255),w,b
   860   0013CC  1161               	iorwf	(increment_month@increment+1)& (0+255),w,b
   861   0013CE  A4D8               	btfss	status,2,c
   862   0013D0  EFEC  F009         	goto	u1211
   863   0013D4  EFEE  F009         	goto	u1210
   864   0013D8                     u1211:
   865   0013D8  EFCE  F009         	goto	l1921
   866   0013DC                     u1210:
   867   0013DC                     
   868                           ; BSR set to: 0
   869   0013DC  0012               	return		;funcret
   870   0013DE                     __end_of_increment_month:
   871                           	callstack 0
   872                           
   873 ;; *************** function _get_month *****************
   874 ;; Defined at:
   875 ;;		line 77 in file "timers.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;		None
   880 ;; Return value:  Size  Location     Type
   881 ;;                  2    0[BANK0 ] unsigned int 
   882 ;; Registers used:
   883 ;;		None
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   889 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   892 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   893 ;;Total ram usage:        2 bytes
   894 ;; Hardware stack levels used: 1
   895 ;; Hardware stack levels required when called: 6
   896 ;; This function calls:
   897 ;;		Nothing
   898 ;; This function is called by:
   899 ;;		_main
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text3
   904   00153E                     __ptext3:
   905                           	callstack 0
   906   00153E                     _get_month:
   907                           	callstack 24
   908   00153E                     
   909                           ;timers.c: 78:     return month;
   910   00153E  C0A0  F060         	movff	_month,?_get_month
   911   001542  C0A1  F061         	movff	_month+1,?_get_month+1
   912   001546  0012               	return		;funcret
   913   001548                     __end_of_get_month:
   914                           	callstack 0
   915                           
   916 ;; *************** function _get_day *****************
   917 ;; Defined at:
   918 ;;		line 74 in file "timers.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;		None
   921 ;; Auto vars:     Size  Location     Type
   922 ;;		None
   923 ;; Return value:  Size  Location     Type
   924 ;;                  2    0[BANK0 ] unsigned int 
   925 ;; Registers used:
   926 ;;		None
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   932 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;Total ram usage:        2 bytes
   937 ;; Hardware stack levels used: 1
   938 ;; Hardware stack levels required when called: 6
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_main
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text4
   947   001548                     __ptext4:
   948                           	callstack 0
   949   001548                     _get_day:
   950                           	callstack 24
   951   001548                     
   952                           ;timers.c: 75:     return day;
   953   001548  C0A2  F060         	movff	_day,?_get_day
   954   00154C  C0A3  F061         	movff	_day+1,?_get_day+1
   955   001550  0012               	return		;funcret
   956   001552                     __end_of_get_day:
   957                           	callstack 0
   958                           
   959 ;; *************** function _Timer0_init *****************
   960 ;; Defined at:
   961 ;;		line 19 in file "timers.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;  init_test_mo    2    0[BANK0 ] unsigned short 
   964 ;;  current_minu    4    2[BANK0 ] unsigned long 
   965 ;;  current_hour    4    6[BANK0 ] unsigned long 
   966 ;;  current_day     2   10[BANK0 ] unsigned int 
   967 ;;  current_day_    2   12[BANK0 ] unsigned int 
   968 ;;  current_mont    2   14[BANK0 ] unsigned int 
   969 ;;  current_year    2   16[BANK0 ] unsigned int 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;		None
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, status,2, status,0
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   981 ;;      Params:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   984 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   985 ;;Total ram usage:       18 bytes
   986 ;; Hardware stack levels used: 1
   987 ;; Hardware stack levels required when called: 6
   988 ;; This function calls:
   989 ;;		Nothing
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text5
   996   001150                     __ptext5:
   997                           	callstack 0
   998   001150                     _Timer0_init:
   999                           	callstack 24
  1000   001150                     
  1001                           ;timers.c: 19: void Timer0_init(unsigned short init_test_mode,unsigned long current_minu
      +                          te,unsigned long current_hour, unsigned int current_day,unsigned int current_day_of_the_
      +                          week,unsigned int current_month, unsigned int current_year);timers.c: 20: {;timers.c: 21
      +                          :     test_mode = init_test_mode;
  1002   001150  C060  F036         	movff	Timer0_init@init_test_mode,_test_mode
  1003   001154  C061  F037         	movff	Timer0_init@init_test_mode+1,_test_mode+1
  1004                           
  1005                           ;timers.c: 22:     minutes = current_minute;
  1006   001158  C062  F030         	movff	Timer0_init@current_minute,_minutes
  1007   00115C  C063  F031         	movff	Timer0_init@current_minute+1,_minutes+1
  1008                           
  1009                           ;timers.c: 23:     hours = current_hour;
  1010   001160  C066  F032         	movff	Timer0_init@current_hour,_hours
  1011   001164  C067  F033         	movff	Timer0_init@current_hour+1,_hours+1
  1012                           
  1013                           ;timers.c: 24:     day = current_day;
  1014   001168  C06A  F0A2         	movff	Timer0_init@current_day,_day
  1015   00116C  C06B  F0A3         	movff	Timer0_init@current_day+1,_day+1
  1016                           
  1017                           ;timers.c: 25:     day_of_the_week = current_day_of_the_week;
  1018   001170  C06C  F0A4         	movff	Timer0_init@current_day_of_the_week,_day_of_the_week
  1019   001174  C06D  F0A5         	movff	Timer0_init@current_day_of_the_week+1,_day_of_the_week+1
  1020                           
  1021                           ;timers.c: 26:     month = current_month;
  1022   001178  C06E  F0A0         	movff	Timer0_init@current_month,_month
  1023   00117C  C06F  F0A1         	movff	Timer0_init@current_month+1,_month+1
  1024                           
  1025                           ;timers.c: 27:     year = current_year;
  1026   001180  C070  F09E         	movff	Timer0_init@current_year,_year
  1027   001184  C071  F09F         	movff	Timer0_init@current_year+1,_year+1
  1028   001188                     
  1029                           ;timers.c: 29:     T0CON1bits.T0CS=0b010;
  1030   001188  50D6               	movf	214,w,c	;volatile
  1031   00118A  0B1F               	andlw	-225
  1032   00118C  0940               	iorlw	64
  1033   00118E  6ED6               	movwf	214,c	;volatile
  1034   001190                     
  1035                           ;timers.c: 30:     T0CON1bits.T0ASYNC=1;
  1036   001190  88D6               	bsf	214,4,c	;volatile
  1037   001192                     
  1038                           ;timers.c: 32:     T0CON0bits.T016BIT=1;
  1039   001192  88D5               	bsf	213,4,c	;volatile
  1040   001194                     
  1041                           ;timers.c: 34:     if(test_mode == 0){
  1042   001194  5036               	movf	_test_mode^0,w,c
  1043   001196  1037               	iorwf	(_test_mode+1)^0,w,c
  1044   001198  A4D8               	btfss	status,2,c
  1045   00119A  EFD1  F008         	goto	u1231
  1046   00119E  EFD3  F008         	goto	u1230
  1047   0011A2                     u1231:
  1048   0011A2  EFDD  F008         	goto	l1971
  1049   0011A6                     u1230:
  1050   0011A6                     
  1051                           ;timers.c: 36:         T0CON1bits.T0CKPS=8;
  1052   0011A6  50D6               	movf	214,w,c	;volatile
  1053   0011A8  0BF0               	andlw	-16
  1054   0011AA  0908               	iorlw	8
  1055   0011AC  6ED6               	movwf	214,c	;volatile
  1056                           
  1057                           ;timers.c: 38:         TMR0H = 0b1011;
  1058   0011AE  0E0B               	movlw	11
  1059   0011B0  6ED4               	movwf	212,c	;volatile
  1060                           
  1061                           ;timers.c: 39:         TMR0L = 0b11011011;
  1062   0011B2  0EDB               	movlw	219
  1063   0011B4  6ED3               	movwf	211,c	;volatile
  1064                           
  1065                           ;timers.c: 40:     }else{
  1066   0011B6  EFE3  F008         	goto	l1973
  1067   0011BA                     l1971:
  1068                           
  1069                           ;timers.c: 41:         T0CON1bits.T0CKPS=0;
  1070   0011BA  0EF0               	movlw	-16
  1071   0011BC  16D6               	andwf	214,f,c	;volatile
  1072                           
  1073                           ;timers.c: 43:         TMR0H = 0;
  1074   0011BE  0E00               	movlw	0
  1075   0011C0  6ED4               	movwf	212,c	;volatile
  1076                           
  1077                           ;timers.c: 44:         TMR0L = 0;
  1078   0011C2  0E00               	movlw	0
  1079   0011C4  6ED3               	movwf	211,c	;volatile
  1080   0011C6                     l1973:
  1081                           
  1082                           ;timers.c: 46:     T0CON0bits.T0EN=1;
  1083   0011C6  8ED5               	bsf	213,7,c	;volatile
  1084   0011C8  0012               	return		;funcret
  1085   0011CA                     __end_of_Timer0_init:
  1086                           	callstack 0
  1087                           
  1088 ;; *************** function _LEDarray_init *****************
  1089 ;; Defined at:
  1090 ;;		line 8 in file "LEDarray.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;		None
  1093 ;; Auto vars:     Size  Location     Type
  1094 ;;		None
  1095 ;; Return value:  Size  Location     Type
  1096 ;;                  1    wreg      void 
  1097 ;; Registers used:
  1098 ;;		None
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1108 ;;Total ram usage:        0 bytes
  1109 ;; Hardware stack levels used: 1
  1110 ;; Hardware stack levels required when called: 6
  1111 ;; This function calls:
  1112 ;;		Nothing
  1113 ;; This function is called by:
  1114 ;;		_main
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           	psect	text6
  1119   001424                     __ptext6:
  1120                           	callstack 0
  1121   001424                     _LEDarray_init:
  1122                           	callstack 24
  1123   001424                     
  1124                           ;LEDarray.c: 14:     TRISGbits.TRISG0 = 0;
  1125   001424  9087               	bcf	135,0,c	;volatile
  1126                           
  1127                           ;LEDarray.c: 15:     TRISGbits.TRISG1 = 0;
  1128   001426  9287               	bcf	135,1,c	;volatile
  1129                           
  1130                           ;LEDarray.c: 16:     TRISAbits.TRISA2 = 0;
  1131   001428  9481               	bcf	129,2,c	;volatile
  1132                           
  1133                           ;LEDarray.c: 17:     TRISFbits.TRISF6 = 0;
  1134   00142A  9C86               	bcf	134,6,c	;volatile
  1135                           
  1136                           ;LEDarray.c: 18:     TRISAbits.TRISA4 = 0;
  1137   00142C  9881               	bcf	129,4,c	;volatile
  1138                           
  1139                           ;LEDarray.c: 19:     TRISAbits.TRISA5 = 0;
  1140   00142E  9A81               	bcf	129,5,c	;volatile
  1141                           
  1142                           ;LEDarray.c: 20:     TRISFbits.TRISF0 = 0;
  1143   001430  9086               	bcf	134,0,c	;volatile
  1144                           
  1145                           ;LEDarray.c: 21:     TRISBbits.TRISB0 = 0;
  1146   001432  9082               	bcf	130,0,c	;volatile
  1147                           
  1148                           ;LEDarray.c: 22:     TRISBbits.TRISB1 = 0;
  1149   001434  9282               	bcf	130,1,c	;volatile
  1150                           
  1151                           ;LEDarray.c: 24:     PORTGbits.RG0 = 1;
  1152   001436  808F               	bsf	143,0,c	;volatile
  1153                           
  1154                           ;LEDarray.c: 25:     PORTGbits.RG1 = 1;
  1155   001438  828F               	bsf	143,1,c	;volatile
  1156                           
  1157                           ;LEDarray.c: 26:     PORTAbits.RA2 = 1;
  1158   00143A  8489               	bsf	137,2,c	;volatile
  1159                           
  1160                           ;LEDarray.c: 27:     PORTFbits.RF6 = 1;
  1161   00143C  8C8E               	bsf	142,6,c	;volatile
  1162                           
  1163                           ;LEDarray.c: 28:     PORTAbits.RA4 = 1;
  1164   00143E  8889               	bsf	137,4,c	;volatile
  1165                           
  1166                           ;LEDarray.c: 29:     PORTAbits.RA5 = 1;
  1167   001440  8A89               	bsf	137,5,c	;volatile
  1168                           
  1169                           ;LEDarray.c: 30:     PORTFbits.RF0 = 1;
  1170   001442  808E               	bsf	142,0,c	;volatile
  1171                           
  1172                           ;LEDarray.c: 31:     PORTBbits.RB0 = 1;
  1173   001444  808A               	bsf	138,0,c	;volatile
  1174                           
  1175                           ;LEDarray.c: 32:     PORTBbits.RB1 = 1;
  1176   001446  828A               	bsf	138,1,c	;volatile
  1177                           
  1178                           ;LEDarray.c: 34:     LATGbits.LATG0 = 0;
  1179   001448  907F               	bcf	127,0,c	;volatile
  1180                           
  1181                           ;LEDarray.c: 35:     LATGbits.LATG1 = 0;
  1182   00144A  927F               	bcf	127,1,c	;volatile
  1183                           
  1184                           ;LEDarray.c: 36:     LATAbits.LATA2 = 0;
  1185   00144C  9479               	bcf	121,2,c	;volatile
  1186                           
  1187                           ;LEDarray.c: 37:     LATFbits.LATF6 = 0;
  1188   00144E  9C7E               	bcf	126,6,c	;volatile
  1189                           
  1190                           ;LEDarray.c: 38:     LATAbits.LATA4 = 0;
  1191   001450  9879               	bcf	121,4,c	;volatile
  1192                           
  1193                           ;LEDarray.c: 39:     LATAbits.LATA5 = 0;
  1194   001452  9A79               	bcf	121,5,c	;volatile
  1195                           
  1196                           ;LEDarray.c: 40:     LATFbits.LATF0 = 0;
  1197   001454  907E               	bcf	126,0,c	;volatile
  1198                           
  1199                           ;LEDarray.c: 41:     LATBbits.LATB0 = 0;
  1200   001456  907A               	bcf	122,0,c	;volatile
  1201                           
  1202                           ;LEDarray.c: 42:     LATBbits.LATB1 = 0;
  1203   001458  927A               	bcf	122,1,c	;volatile
  1204   00145A  0012               	return		;funcret
  1205   00145C                     __end_of_LEDarray_init:
  1206                           	callstack 0
  1207                           
  1208 ;; *************** function _LCD_Init *****************
  1209 ;; Defined at:
  1210 ;;		line 52 in file "LCD.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;		None
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;		None
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      void 
  1217 ;; Registers used:
  1218 ;;		wreg, status,2, status,0, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1226 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1228 ;;Total ram usage:        2 bytes
  1229 ;; Hardware stack levels used: 1
  1230 ;; Hardware stack levels required when called: 9
  1231 ;; This function calls:
  1232 ;;		_LCD_sendbyte
  1233 ;;		_LCD_sendnibble
  1234 ;; This function is called by:
  1235 ;;		_main
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           	psect	text7
  1240   000FEA                     __ptext7:
  1241                           	callstack 0
  1242   000FEA                     _LCD_Init:
  1243                           	callstack 21
  1244   000FEA                     
  1245                           ;LCD.c: 57:     TRISCbits.TRISC2 = 0;
  1246   000FEA  9483               	bcf	131,2,c	;volatile
  1247                           
  1248                           ;LCD.c: 58:     TRISCbits.TRISC6 = 0;
  1249   000FEC  9C83               	bcf	131,6,c	;volatile
  1250                           
  1251                           ;LCD.c: 59:     TRISBbits.TRISB3 = 0;
  1252   000FEE  9682               	bcf	130,3,c	;volatile
  1253                           
  1254                           ;LCD.c: 60:     TRISBbits.TRISB2 = 0;
  1255   000FF0  9482               	bcf	130,2,c	;volatile
  1256                           
  1257                           ;LCD.c: 61:     TRISEbits.TRISE3 = 0;
  1258   000FF2  9685               	bcf	133,3,c	;volatile
  1259                           
  1260                           ;LCD.c: 62:     TRISEbits.TRISE1 = 0;
  1261   000FF4  9285               	bcf	133,1,c	;volatile
  1262                           
  1263                           ;LCD.c: 65:     LATCbits.LATC6 = 0;
  1264   000FF6  9C7B               	bcf	123,6,c	;volatile
  1265                           
  1266                           ;LCD.c: 66:     LATCbits.LATC2 = 0;
  1267   000FF8  947B               	bcf	123,2,c	;volatile
  1268                           
  1269                           ;LCD.c: 67:     LATBbits.LATB3 = 0;
  1270   000FFA  967A               	bcf	122,3,c	;volatile
  1271                           
  1272                           ;LCD.c: 68:     LATBbits.LATB2 = 0;
  1273   000FFC  947A               	bcf	122,2,c	;volatile
  1274                           
  1275                           ;LCD.c: 69:     LATEbits.LATE3 = 0;
  1276   000FFE  967D               	bcf	125,3,c	;volatile
  1277                           
  1278                           ;LCD.c: 70:     LATEbits.LATE1 = 0;
  1279   001000  927D               	bcf	125,1,c	;volatile
  1280   001002                     
  1281                           ;LCD.c: 72:     _delay((unsigned long)((60)*(64000000/4000.0)));
  1282   001002  0E05               	movlw	5
  1283   001004  0100               	movlb	0	; () banked
  1284   001006  6F64               	movwf	(??_LCD_Init+1)& (0+255),b
  1285   001008  0EDF               	movlw	223
  1286   00100A  6F63               	movwf	??_LCD_Init& (0+255),b
  1287   00100C  0EBB               	movlw	187
  1288   00100E                     u1437:
  1289   00100E  2EE8               	decfsz	wreg,f,c
  1290   001010  D7FE               	bra	u1437
  1291   001012  2F63               	decfsz	??_LCD_Init& (0+255),f,b
  1292   001014  D7FC               	bra	u1437
  1293   001016  2F64               	decfsz	(??_LCD_Init+1)& (0+255),f,b
  1294   001018  D7FA               	bra	u1437
  1295   00101A  D000               	nop2	
  1296   00101C                     
  1297                           ;LCD.c: 74:     LCD_sendnibble(0b0011);
  1298   00101C  0E03               	movlw	3
  1299   00101E  EC21  F009         	call	_LCD_sendnibble
  1300   001022                     
  1301                           ;LCD.c: 75:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  1302   001022  0ED5               	movlw	213
  1303   001024                     u1447:
  1304   001024  2EE8               	decfsz	wreg,f,c
  1305   001026  D7FE               	bra	u1447
  1306   001028  F000               	nop	
  1307                           
  1308                           ;LCD.c: 77:     LCD_sendnibble(0b0010);
  1309   00102A  0E02               	movlw	2
  1310   00102C  EC21  F009         	call	_LCD_sendnibble
  1311   001030                     
  1312                           ;LCD.c: 78:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  1313   001030  0ED5               	movlw	213
  1314   001032                     u1457:
  1315   001032  2EE8               	decfsz	wreg,f,c
  1316   001034  D7FE               	bra	u1457
  1317   001036  F000               	nop	
  1318   001038                     
  1319                           ;LCD.c: 80:     LCD_sendbyte(0b00101000,0);
  1320   001038  0E00               	movlw	0
  1321   00103A  0100               	movlb	0	; () banked
  1322   00103C  6F61               	movwf	LCD_sendbyte@type& (0+255),b
  1323   00103E  0E28               	movlw	40
  1324   001040  EC2E  F00A         	call	_LCD_sendbyte
  1325   001044                     
  1326                           ;LCD.c: 81:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  1327   001044  0ED5               	movlw	213
  1328   001046                     u1467:
  1329   001046  2EE8               	decfsz	wreg,f,c
  1330   001048  D7FE               	bra	u1467
  1331   00104A  F000               	nop	
  1332   00104C                     
  1333                           ;LCD.c: 83:     LCD_sendbyte(0b00101000,0);
  1334   00104C  0E00               	movlw	0
  1335   00104E  0100               	movlb	0	; () banked
  1336   001050  6F61               	movwf	LCD_sendbyte@type& (0+255),b
  1337   001052  0E28               	movlw	40
  1338   001054  EC2E  F00A         	call	_LCD_sendbyte
  1339   001058                     
  1340                           ;LCD.c: 84:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  1341   001058  0ED5               	movlw	213
  1342   00105A                     u1477:
  1343   00105A  2EE8               	decfsz	wreg,f,c
  1344   00105C  D7FE               	bra	u1477
  1345   00105E  F000               	nop	
  1346   001060                     
  1347                           ;LCD.c: 86:     LCD_sendbyte(0b00000001,0);
  1348   001060  0E00               	movlw	0
  1349   001062  0100               	movlb	0	; () banked
  1350   001064  6F61               	movwf	LCD_sendbyte@type& (0+255),b
  1351   001066  0E01               	movlw	1
  1352   001068  EC2E  F00A         	call	_LCD_sendbyte
  1353   00106C                     
  1354                           ;LCD.c: 87:     _delay((unsigned long)((2)*(64000000/4000.0)));
  1355   00106C  0E2A               	movlw	42
  1356   00106E  0100               	movlb	0	; () banked
  1357   001070  6F63               	movwf	??_LCD_Init& (0+255),b
  1358   001072  0E8D               	movlw	141
  1359   001074                     u1487:
  1360   001074  2EE8               	decfsz	wreg,f,c
  1361   001076  D7FE               	bra	u1487
  1362   001078  2F63               	decfsz	??_LCD_Init& (0+255),f,b
  1363   00107A  D7FC               	bra	u1487
  1364   00107C  D000               	nop2	
  1365   00107E                     
  1366                           ;LCD.c: 89:     LCD_sendbyte(0b00000110,0);
  1367   00107E  0E00               	movlw	0
  1368   001080  0100               	movlb	0	; () banked
  1369   001082  6F61               	movwf	LCD_sendbyte@type& (0+255),b
  1370   001084  0E06               	movlw	6
  1371   001086  EC2E  F00A         	call	_LCD_sendbyte
  1372   00108A                     
  1373                           ;LCD.c: 91:     LCD_sendbyte(0b00001110,0);
  1374   00108A  0E00               	movlw	0
  1375   00108C  0100               	movlb	0	; () banked
  1376   00108E  6F61               	movwf	LCD_sendbyte@type& (0+255),b
  1377   001090  0E0E               	movlw	14
  1378   001092  EC2E  F00A         	call	_LCD_sendbyte
  1379   001096                     
  1380                           ;LCD.c: 92:     LCD_sendbyte(0b00001100,0);
  1381   001096  0E00               	movlw	0
  1382   001098  0100               	movlb	0	; () banked
  1383   00109A  6F61               	movwf	LCD_sendbyte@type& (0+255),b
  1384   00109C  0E0C               	movlw	12
  1385   00109E  EC2E  F00A         	call	_LCD_sendbyte
  1386   0010A2  0012               	return		;funcret
  1387   0010A4                     __end_of_LCD_Init:
  1388                           	callstack 0
  1389                           
  1390 ;; *************** function _LCD_sendbyte *****************
  1391 ;; Defined at:
  1392 ;;		line 39 in file "LCD.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;  Byte            1    wreg     unsigned char 
  1395 ;;  type            1    1[BANK0 ] unsigned char 
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;  Byte            1    2[BANK0 ] unsigned char 
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, status,2, status,0, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : 0/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1407 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1410 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1411 ;;Total ram usage:        2 bytes
  1412 ;; Hardware stack levels used: 1
  1413 ;; Hardware stack levels required when called: 8
  1414 ;; This function calls:
  1415 ;;		_LCD_sendnibble
  1416 ;; This function is called by:
  1417 ;;		_LCD_Init
  1418 ;;		_LCD_clear
  1419 ;;		_LCD_setline
  1420 ;;		_LCD_sendstring
  1421 ;;		_LCD_scroll
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text8
  1426   00145C                     __ptext8:
  1427                           	callstack 0
  1428   00145C                     _LCD_sendbyte:
  1429                           	callstack 21
  1430                           
  1431                           ;incstack = 0
  1432                           ;LCD_sendbyte@Byte stored from wreg
  1433   00145C  0100               	movlb	0	; () banked
  1434   00145E  6F62               	movwf	LCD_sendbyte@Byte& (0+255),b
  1435   001460                     
  1436                           ;LCD.c: 39: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 40: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  1437   001460  0100               	movlb	0	; () banked
  1438   001462  B161               	btfsc	LCD_sendbyte@type& (0+255),0,b
  1439   001464  D002               	bra	u1225
  1440   001466  9C7B               	bcf	123,6,c	;volatile
  1441   001468  D001               	bra	u1226
  1442   00146A                     u1225:
  1443   00146A  8C7B               	bsf	123,6,c	;volatile
  1444   00146C                     u1226:
  1445   00146C                     
  1446                           ;LCD.c: 43:     LCD_sendnibble(Byte >> 4);
  1447   00146C  0100               	movlb	0	; () banked
  1448   00146E  3962               	swapf	LCD_sendbyte@Byte& (0+255),w,b
  1449   001470  0B0F               	andlw	15
  1450   001472  EC21  F009         	call	_LCD_sendnibble
  1451   001476                     
  1452                           ;LCD.c: 44:     LCD_sendnibble(Byte);
  1453   001476  0100               	movlb	0	; () banked
  1454   001478  5162               	movf	LCD_sendbyte@Byte& (0+255),w,b
  1455   00147A  EC21  F009         	call	_LCD_sendnibble
  1456   00147E                     
  1457                           ;LCD.c: 46:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  1458   00147E  0EA0               	movlw	160
  1459   001480                     u1497:
  1460   001480  D000               	nop2	
  1461   001482  2EE8               	decfsz	wreg,f,c
  1462   001484  D7FD               	bra	u1497
  1463   001486  0012               	return		;funcret
  1464   001488                     __end_of_LCD_sendbyte:
  1465                           	callstack 0
  1466                           
  1467 ;; *************** function _LCD_sendnibble *****************
  1468 ;; Defined at:
  1469 ;;		line 21 in file "LCD.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  number          1    wreg     unsigned char 
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;  number          1    0[BANK0 ] unsigned char 
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1486 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1487 ;;Total ram usage:        1 bytes
  1488 ;; Hardware stack levels used: 1
  1489 ;; Hardware stack levels required when called: 7
  1490 ;; This function calls:
  1491 ;;		_LCD_E_TOG
  1492 ;; This function is called by:
  1493 ;;		_LCD_sendbyte
  1494 ;;		_LCD_Init
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text9
  1499   001242                     __ptext9:
  1500                           	callstack 0
  1501   001242                     _LCD_sendnibble:
  1502                           	callstack 22
  1503                           
  1504                           ;incstack = 0
  1505                           ;LCD_sendnibble@number stored from wreg
  1506   001242  0100               	movlb	0	; () banked
  1507   001244  6F60               	movwf	LCD_sendnibble@number& (0+255),b
  1508   001246                     
  1509                           ;LCD.c: 21: void LCD_sendnibble(unsigned char number);LCD.c: 22: {;LCD.c: 25:     if(num
      +                          ber & 0b0001){ LATBbits.LATB3 = 1;}else{LATBbits.LATB3 = 0;}
  1510   001246  0100               	movlb	0	; () banked
  1511   001248  A160               	btfss	LCD_sendnibble@number& (0+255),0,b
  1512   00124A  EF29  F009         	goto	u1161
  1513   00124E  EF2B  F009         	goto	u1160
  1514   001252                     u1161:
  1515   001252  EF2E  F009         	goto	l300
  1516   001256                     u1160:
  1517   001256                     
  1518                           ; BSR set to: 0
  1519   001256  867A               	bsf	122,3,c	;volatile
  1520   001258  EF2F  F009         	goto	l1897
  1521   00125C                     l300:
  1522                           
  1523                           ; BSR set to: 0
  1524   00125C  967A               	bcf	122,3,c	;volatile
  1525   00125E                     l1897:
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;LCD.c: 26:     if(number & 0b0010){ LATBbits.LATB2 = 1;}else{LATBbits.LATB2 = 0;}
  1529   00125E  A360               	btfss	LCD_sendnibble@number& (0+255),1,b
  1530   001260  EF34  F009         	goto	u1171
  1531   001264  EF36  F009         	goto	u1170
  1532   001268                     u1171:
  1533   001268  EF39  F009         	goto	l302
  1534   00126C                     u1170:
  1535   00126C                     
  1536                           ; BSR set to: 0
  1537   00126C  847A               	bsf	122,2,c	;volatile
  1538   00126E  EF3A  F009         	goto	l1901
  1539   001272                     l302:
  1540                           
  1541                           ; BSR set to: 0
  1542   001272  947A               	bcf	122,2,c	;volatile
  1543   001274                     l1901:
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;LCD.c: 27:     if(number & 0b0100){ LATEbits.LATE3 = 1;}else{LATEbits.LATE3 = 0;}
  1547   001274  A560               	btfss	LCD_sendnibble@number& (0+255),2,b
  1548   001276  EF3F  F009         	goto	u1181
  1549   00127A  EF41  F009         	goto	u1180
  1550   00127E                     u1181:
  1551   00127E  EF44  F009         	goto	l304
  1552   001282                     u1180:
  1553   001282                     
  1554                           ; BSR set to: 0
  1555   001282  867D               	bsf	125,3,c	;volatile
  1556   001284  EF45  F009         	goto	l1905
  1557   001288                     l304:
  1558                           
  1559                           ; BSR set to: 0
  1560   001288  967D               	bcf	125,3,c	;volatile
  1561   00128A                     l1905:
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;LCD.c: 28:     if(number & 0b1000){ LATEbits.LATE1 = 1;}else{LATEbits.LATE1 = 0;}
  1565   00128A  A760               	btfss	LCD_sendnibble@number& (0+255),3,b
  1566   00128C  EF4A  F009         	goto	u1191
  1567   001290  EF4C  F009         	goto	u1190
  1568   001294                     u1191:
  1569   001294  EF4F  F009         	goto	l306
  1570   001298                     u1190:
  1571   001298                     
  1572                           ; BSR set to: 0
  1573   001298  827D               	bsf	125,1,c	;volatile
  1574   00129A  EF50  F009         	goto	l1909
  1575   00129E                     l306:
  1576                           
  1577                           ; BSR set to: 0
  1578   00129E  927D               	bcf	125,1,c	;volatile
  1579   0012A0                     l1909:
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;LCD.c: 30:     LCD_E_TOG();
  1583   0012A0  EC98  F00A         	call	_LCD_E_TOG	;wreg free
  1584   0012A4                     
  1585                           ;LCD.c: 31:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  1586   0012A4  0E1A               	movlw	26
  1587   0012A6                     u1507:
  1588   0012A6  2EE8               	decfsz	wreg,f,c
  1589   0012A8  D7FE               	bra	u1507
  1590   0012AA  D000               	nop2	
  1591   0012AC  0012               	return		;funcret
  1592   0012AE                     __end_of_LCD_sendnibble:
  1593                           	callstack 0
  1594                           
  1595 ;; *************** function _LCD_E_TOG *****************
  1596 ;; Defined at:
  1597 ;;		line 8 in file "LCD.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;		None
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;		None
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      void 
  1604 ;; Registers used:
  1605 ;;		wreg
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1615 ;;Total ram usage:        0 bytes
  1616 ;; Hardware stack levels used: 1
  1617 ;; Hardware stack levels required when called: 6
  1618 ;; This function calls:
  1619 ;;		Nothing
  1620 ;; This function is called by:
  1621 ;;		_LCD_sendnibble
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text10
  1626   001530                     __ptext10:
  1627                           	callstack 0
  1628   001530                     _LCD_E_TOG:
  1629                           	callstack 22
  1630   001530                     
  1631                           ;LCD.c: 11:     LATCbits.LATC2 = 1;
  1632   001530  847B               	bsf	123,2,c	;volatile
  1633   001532                     
  1634                           ;LCD.c: 12:     _delay((unsigned long)((2)*(64000000/4000000.0)));
  1635   001532  0E0A               	movlw	10
  1636   001534                     u1517:
  1637   001534  2EE8               	decfsz	wreg,f,c
  1638   001536  D7FE               	bra	u1517
  1639   001538  D000               	nop2	
  1640   00153A                     
  1641                           ;LCD.c: 14:     LATCbits.LATC2 = 0;
  1642   00153A  947B               	bcf	123,2,c	;volatile
  1643   00153C  0012               	return		;funcret
  1644   00153E                     __end_of_LCD_E_TOG:
  1645                           	callstack 0
  1646                           
  1647 ;; *************** function _Interrupts_init *****************
  1648 ;; Defined at:
  1649 ;;		line 9 in file "interrupts.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;		None
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		None
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1667 ;;Total ram usage:        0 bytes
  1668 ;; Hardware stack levels used: 1
  1669 ;; Hardware stack levels required when called: 6
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_main
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text11
  1678   001520                     __ptext11:
  1679                           	callstack 0
  1680   001520                     _Interrupts_init:
  1681                           	callstack 24
  1682   001520                     
  1683                           ;interrupts.c: 13:     PIE2bits.C1IE = 1;
  1684   001520  010E               	movlb	14	; () banked
  1685   001522  812B               	bsf	43,0,b	;volatile
  1686                           
  1687                           ;interrupts.c: 14:     INTCONbits.IPEN = 1;
  1688   001524  8AF2               	bsf	242,5,c	;volatile
  1689                           
  1690                           ;interrupts.c: 15:     INTCONbits.GIEL=1;
  1691   001526  8CF2               	bsf	242,6,c	;volatile
  1692                           
  1693                           ;interrupts.c: 16:     IPR2bits.C1IP=1;
  1694   001528  8121               	bsf	33,0,b	;volatile
  1695                           
  1696                           ;interrupts.c: 17:     PIE0bits.TMR0IE=1;
  1697   00152A  8B29               	bsf	41,5,b	;volatile
  1698                           
  1699                           ;interrupts.c: 18:     INTCONbits.GIEH=1;
  1700   00152C  8EF2               	bsf	242,7,c	;volatile
  1701   00152E                     
  1702                           ; BSR set to: 14
  1703   00152E  0012               	return		;funcret
  1704   001530                     __end_of_Interrupts_init:
  1705                           	callstack 0
  1706                           
  1707 ;; *************** function _Comp1_init *****************
  1708 ;; Defined at:
  1709 ;;		line 22 in file "comparator.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;		None
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;		None
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		wreg, status,2, cstack
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1727 ;;Total ram usage:        0 bytes
  1728 ;; Hardware stack levels used: 1
  1729 ;; Hardware stack levels required when called: 7
  1730 ;; This function calls:
  1731 ;;		_DAC_init
  1732 ;; This function is called by:
  1733 ;;		_main
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text12
  1738   0014AE                     __ptext12:
  1739                           	callstack 0
  1740   0014AE                     _Comp1_init:
  1741                           	callstack 23
  1742   0014AE                     
  1743                           ;comparator.c: 24:     TRISFbits.TRISF7=1;
  1744   0014AE  8E86               	bsf	134,7,c	;volatile
  1745   0014B0                     
  1746                           ;comparator.c: 25:     CM1NCHbits.NCH=0b011;
  1747   0014B0  010E               	movlb	14	; () banked
  1748   0014B2  51D2               	movf	210,w,b	;volatile
  1749   0014B4  0BF8               	andlw	-8
  1750   0014B6  0903               	iorlw	3
  1751   0014B8  6FD2               	movwf	210,b	;volatile
  1752                           
  1753                           ;comparator.c: 26:     CM1PCHbits.PCH=0b101;
  1754   0014BA  51D3               	movf	211,w,b	;volatile
  1755   0014BC  0BF8               	andlw	-8
  1756   0014BE  0905               	iorlw	5
  1757   0014C0  6FD3               	movwf	211,b	;volatile
  1758   0014C2                     
  1759                           ; BSR set to: 14
  1760                           ;comparator.c: 27:     CM1CON0bits.HYS=1;
  1761   0014C2  83D0               	bsf	208,1,b	;volatile
  1762   0014C4                     
  1763                           ; BSR set to: 14
  1764                           ;comparator.c: 28:     CM1CON0bits.POL=1;
  1765   0014C4  89D0               	bsf	208,4,b	;volatile
  1766   0014C6                     
  1767                           ; BSR set to: 14
  1768                           ;comparator.c: 29:     CM1CON1bits.INTP=1;
  1769   0014C6  83D1               	bsf	209,1,b	;volatile
  1770   0014C8                     
  1771                           ; BSR set to: 14
  1772                           ;comparator.c: 30:     DAC_init();
  1773   0014C8  EC86  F00A         	call	_DAC_init	;wreg free
  1774   0014CC                     
  1775                           ;comparator.c: 31:     CM1CON0bits.EN=1;
  1776   0014CC  010E               	movlb	14	; () banked
  1777   0014CE  8FD0               	bsf	208,7,b	;volatile
  1778   0014D0                     
  1779                           ; BSR set to: 14
  1780   0014D0  0012               	return		;funcret
  1781   0014D2                     __end_of_Comp1_init:
  1782                           	callstack 0
  1783                           
  1784 ;; *************** function _DAC_init *****************
  1785 ;; Defined at:
  1786 ;;		line 7 in file "comparator.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;		None
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;		None
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, status,2
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1804 ;;Total ram usage:        0 bytes
  1805 ;; Hardware stack levels used: 1
  1806 ;; Hardware stack levels required when called: 6
  1807 ;; This function calls:
  1808 ;;		Nothing
  1809 ;; This function is called by:
  1810 ;;		_Comp1_init
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text13
  1815   00150C                     __ptext13:
  1816                           	callstack 0
  1817   00150C                     _DAC_init:
  1818                           	callstack 23
  1819   00150C                     
  1820                           ;comparator.c: 9:     DAC1CON0bits.PSS=0b00;
  1821   00150C  0EF3               	movlw	-13
  1822   00150E  010E               	movlb	14	; () banked
  1823   001510  17C6               	andwf	198,f,b	;volatile
  1824   001512                     
  1825                           ; BSR set to: 14
  1826                           ;comparator.c: 10:     DAC1CON0bits.NSS=0b0;
  1827   001512  91C6               	bcf	198,0,b	;volatile
  1828                           
  1829                           ;comparator.c: 14:     DAC1CON1bits.DAC1R=20;
  1830   001514  51C7               	movf	199,w,b	;volatile
  1831   001516  0BE0               	andlw	-32
  1832   001518  0914               	iorlw	20
  1833   00151A  6FC7               	movwf	199,b	;volatile
  1834   00151C                     
  1835                           ; BSR set to: 14
  1836                           ;comparator.c: 15:     DAC1CON0bits.DAC1EN=1;
  1837   00151C  8FC6               	bsf	198,7,b	;volatile
  1838   00151E                     
  1839                           ; BSR set to: 14
  1840   00151E  0012               	return		;funcret
  1841   001520                     __end_of_DAC_init:
  1842                           	callstack 0
  1843                           
  1844 ;; *************** function _ADC_init *****************
  1845 ;; Defined at:
  1846 ;;		line 9 in file "ADC.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;		None
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;		None
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  1    wreg      void 
  1853 ;; Registers used:
  1854 ;;		wreg, status,2
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1864 ;;Total ram usage:        0 bytes
  1865 ;; Hardware stack levels used: 1
  1866 ;; Hardware stack levels required when called: 6
  1867 ;; This function calls:
  1868 ;;		Nothing
  1869 ;; This function is called by:
  1870 ;;		_main
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text14
  1875   0014F2                     __ptext14:
  1876                           	callstack 0
  1877   0014F2                     _ADC_init:
  1878                           	callstack 24
  1879   0014F2                     
  1880                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  1881   0014F2  8681               	bsf	129,3,c	;volatile
  1882                           
  1883                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  1884   0014F4  010E               	movlb	14	; () banked
  1885   0014F6  8792               	bsf	146,3,b	;volatile
  1886                           
  1887                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  1888   0014F8  010F               	movlb	15	; () banked
  1889   0014FA  9958               	bcf	88,4,b	;volatile
  1890   0014FC                     
  1891                           ; BSR set to: 15
  1892                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  1893   0014FC  0EFC               	movlw	-4
  1894   0014FE  1758               	andwf	88,f,b	;volatile
  1895                           
  1896                           ;ADC.c: 17:     ADPCH=0b11;
  1897   001500  0E03               	movlw	3
  1898   001502  6F5F               	movwf	95,b	;volatile
  1899   001504                     
  1900                           ; BSR set to: 15
  1901                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  1902   001504  9460               	bcf	96,2,c	;volatile
  1903   001506                     
  1904                           ; BSR set to: 15
  1905                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  1906   001506  8860               	bsf	96,4,c	;volatile
  1907   001508                     
  1908                           ; BSR set to: 15
  1909                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  1910   001508  8E60               	bsf	96,7,c	;volatile
  1911   00150A                     
  1912                           ; BSR set to: 15
  1913   00150A  0012               	return		;funcret
  1914   00150C                     __end_of_ADC_init:
  1915                           	callstack 0
  1916                           
  1917 ;; *************** function _HighISR *****************
  1918 ;; Defined at:
  1919 ;;		line 25 in file "interrupts.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;		None
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;		None
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  1    wreg      void 
  1926 ;; Registers used:
  1927 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1935 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1936 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1937 ;;Total ram usage:        7 bytes
  1938 ;; Hardware stack levels used: 1
  1939 ;; Hardware stack levels required when called: 5
  1940 ;; This function calls:
  1941 ;;		_increment_seconds
  1942 ;; This function is called by:
  1943 ;;		Interrupt level 2
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	intcode
  1948   000008                     __pintcode:
  1949                           	callstack 0
  1950   000008                     _HighISR:
  1951                           	callstack 21
  1952                           
  1953                           ; BSR set to: 15
  1954                           ;incstack = 0
  1955   000008  823A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1956   00000A  CFE1 F02A          	movff	fsr1l,??_HighISR+1
  1957   00000E  CFE2 F02B          	movff	fsr1h,??_HighISR+2
  1958   000012  CFD9 F02C          	movff	fsr2l,??_HighISR+3
  1959   000016  CFDA F02D          	movff	fsr2h,??_HighISR+4
  1960   00001A  CFF3 F02E          	movff	prodl,??_HighISR+5
  1961   00001E  CFF4 F02F          	movff	prodh,??_HighISR+6
  1962   000022                     
  1963                           ;interrupts.c: 27:  if(PIR2bits.C1IF){
  1964   000022  010E               	movlb	14	; () banked
  1965   000024  A135               	btfss	53,0,b	;volatile
  1966   000026  EF17  F000         	goto	i2u103_41
  1967   00002A  EF19  F000         	goto	i2u103_40
  1968   00002E                     i2u103_41:
  1969   00002E  EF2C  F000         	goto	i2l1815
  1970   000032                     i2u103_40:
  1971   000032                     
  1972                           ; BSR set to: 14
  1973                           ;interrupts.c: 28:         LATDbits.LATD7 = !LATDbits.LATD7;
  1974   000032  AE7C               	btfss	124,7,c	;volatile
  1975   000034  EF1E  F000         	goto	i2u104_41
  1976   000038  EF22  F000         	goto	i2u104_40
  1977   00003C                     i2u104_41:
  1978   00003C  6A29               	clrf	??_HighISR^0,c
  1979   00003E  2A29               	incf	??_HighISR^0,f,c
  1980   000040  EF23  F000         	goto	i2u105_48
  1981   000044                     i2u104_40:
  1982   000044  6A29               	clrf	??_HighISR^0,c
  1983   000046                     i2u105_48:
  1984   000046  3229               	rrcf	??_HighISR^0,f,c
  1985   000048  3229               	rrcf	??_HighISR^0,f,c
  1986   00004A  507C               	movf	124,w,c	;volatile
  1987   00004C  1829               	xorwf	??_HighISR^0,w,c
  1988   00004E  0B7F               	andlw	-129
  1989   000050  1829               	xorwf	??_HighISR^0,w,c
  1990   000052  6E7C               	movwf	124,c	;volatile
  1991   000054                     
  1992                           ;interrupts.c: 29:         PIR2bits.C1IF=0;
  1993   000054  010E               	movlb	14	; () banked
  1994   000056  9135               	bcf	53,0,b	;volatile
  1995   000058                     i2l1815:
  1996                           
  1997                           ; BSR set to: 14
  1998                           ;interrupts.c: 31:     if(PIR0bits.TMR0IF){
  1999   000058  AB33               	btfss	51,5,b	;volatile
  2000   00005A  EF31  F000         	goto	i2u106_41
  2001   00005E  EF33  F000         	goto	i2u106_40
  2002   000062                     i2u106_41:
  2003   000062  EF4E  F000         	goto	i2l152
  2004   000066                     i2u106_40:
  2005   000066                     
  2006                           ; BSR set to: 14
  2007                           ;interrupts.c: 33:         increment_seconds(1);
  2008   000066  0E00               	movlw	0
  2009   000068  6E28               	movwf	(increment_seconds@increment+1)^0,c
  2010   00006A  0E01               	movlw	1
  2011   00006C  6E27               	movwf	increment_seconds@increment^0,c
  2012   00006E  ECE5  F008         	call	_increment_seconds	;wreg free
  2013   000072                     
  2014                           ;interrupts.c: 35:         if(test_mode == 0){
  2015   000072  5036               	movf	_test_mode^0,w,c
  2016   000074  1037               	iorwf	(_test_mode+1)^0,w,c
  2017   000076  A4D8               	btfss	status,2,c
  2018   000078  EF40  F000         	goto	i2u107_41
  2019   00007C  EF42  F000         	goto	i2u107_40
  2020   000080                     i2u107_41:
  2021   000080  EF48  F000         	goto	i2l1823
  2022   000084                     i2u107_40:
  2023   000084                     
  2024                           ;interrupts.c: 36:             TMR0H = 0b1011;
  2025   000084  0E0B               	movlw	11
  2026   000086  6ED4               	movwf	212,c	;volatile
  2027                           
  2028                           ;interrupts.c: 37:             TMR0L = 0b11011011;
  2029   000088  0EDB               	movlw	219
  2030   00008A  6ED3               	movwf	211,c	;volatile
  2031                           
  2032                           ;interrupts.c: 38:         }else{
  2033   00008C  EF4C  F000         	goto	i2l1825
  2034   000090                     i2l1823:
  2035                           
  2036                           ;interrupts.c: 39:             TMR0H = 0;
  2037   000090  0E00               	movlw	0
  2038   000092  6ED4               	movwf	212,c	;volatile
  2039                           
  2040                           ;interrupts.c: 40:             TMR0L = 0;
  2041   000094  0E00               	movlw	0
  2042   000096  6ED3               	movwf	211,c	;volatile
  2043   000098                     i2l1825:
  2044                           
  2045                           ;interrupts.c: 43:         PIR0bits.TMR0IF = 0;
  2046   000098  010E               	movlb	14	; () banked
  2047   00009A  9B33               	bcf	51,5,b	;volatile
  2048   00009C                     i2l152:
  2049                           
  2050                           ; BSR set to: 14
  2051   00009C  C02F  FFF4         	movff	??_HighISR+6,prodh
  2052   0000A0  C02E  FFF3         	movff	??_HighISR+5,prodl
  2053   0000A4  C02D  FFDA         	movff	??_HighISR+4,fsr2h
  2054   0000A8  C02C  FFD9         	movff	??_HighISR+3,fsr2l
  2055   0000AC  C02B  FFE2         	movff	??_HighISR+2,fsr1h
  2056   0000B0  C02A  FFE1         	movff	??_HighISR+1,fsr1l
  2057   0000B4  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2058   0000B6  0011               	retfie		f
  2059   0000B8                     __end_of_HighISR:
  2060                           	callstack 0
  2061                           
  2062 ;; *************** function _increment_seconds *****************
  2063 ;; Defined at:
  2064 ;;		line 81 in file "timers.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;  increment       2   38[COMRAM] unsigned int 
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;		None
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2078 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2081 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2082 ;;Total ram usage:        2 bytes
  2083 ;; Hardware stack levels used: 1
  2084 ;; Hardware stack levels required when called: 4
  2085 ;; This function calls:
  2086 ;;		___wmul
  2087 ;;		_increment_minutes
  2088 ;; This function is called by:
  2089 ;;		_HighISR
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text16
  2094   0011CA                     __ptext16:
  2095                           	callstack 0
  2096   0011CA                     _increment_seconds:
  2097                           	callstack 21
  2098   0011CA                     
  2099                           ;timers.c: 82:     if(test_mode == 1){
  2100   0011CA  0436               	decf	_test_mode^0,w,c
  2101   0011CC  1037               	iorwf	(_test_mode+1)^0,w,c
  2102   0011CE  A4D8               	btfss	status,2,c
  2103   0011D0  EFEC  F008         	goto	i2u92_41
  2104   0011D4  EFEE  F008         	goto	i2u92_40
  2105   0011D8                     i2u92_41:
  2106   0011D8  EF17  F009         	goto	i2l1751
  2107   0011DC                     i2u92_40:
  2108   0011DC                     
  2109                           ;timers.c: 83:             increment *= 15;
  2110   0011DC  C027  F001         	movff	increment_seconds@increment,___wmul@multiplier
  2111   0011E0  C028  F002         	movff	increment_seconds@increment+1,___wmul@multiplier+1
  2112   0011E4  0E00               	movlw	0
  2113   0011E6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2114   0011E8  0E0F               	movlw	15
  2115   0011EA  6E03               	movwf	___wmul@multiplicand^0,c
  2116   0011EC  EC44  F00A         	call	___wmul	;wreg free
  2117   0011F0  C001  F027         	movff	?___wmul,increment_seconds@increment
  2118   0011F4  C002  F028         	movff	?___wmul+1,increment_seconds@increment+1
  2119   0011F8  EF17  F009         	goto	i2l1751
  2120   0011FC                     i2l1741:
  2121                           
  2122                           ;timers.c: 86:         seconds += 1;
  2123   0011FC  4A34               	infsnz	_seconds^0,f,c
  2124   0011FE  2A35               	incf	(_seconds+1)^0,f,c
  2125   001200                     
  2126                           ;timers.c: 87:         if(seconds == 60){
  2127   001200  0E3C               	movlw	60
  2128   001202  1834               	xorwf	_seconds^0,w,c
  2129   001204  1035               	iorwf	(_seconds+1)^0,w,c
  2130   001206  A4D8               	btfss	status,2,c
  2131   001208  EF08  F009         	goto	i2u93_41
  2132   00120C  EF0A  F009         	goto	i2u93_40
  2133   001210                     i2u93_41:
  2134   001210  EF14  F009         	goto	i2l1749
  2135   001214                     i2u93_40:
  2136   001214                     
  2137                           ;timers.c: 88:             seconds = 0;
  2138   001214  0E00               	movlw	0
  2139   001216  6E35               	movwf	(_seconds+1)^0,c
  2140   001218  0E00               	movlw	0
  2141   00121A  6E34               	movwf	_seconds^0,c
  2142   00121C                     
  2143                           ;timers.c: 89:             increment_minutes(1);
  2144   00121C  0E00               	movlw	0
  2145   00121E  6E26               	movwf	(increment_minutes@increment+1)^0,c
  2146   001220  0E01               	movlw	1
  2147   001222  6E25               	movwf	increment_minutes@increment^0,c
  2148   001224  EC82  F009         	call	_increment_minutes	;wreg free
  2149   001228                     i2l1749:
  2150                           
  2151                           ;timers.c: 91:     increment -= 1;
  2152   001228  0627               	decf	increment_seconds@increment^0,f,c
  2153   00122A  A0D8               	btfss	status,0,c
  2154   00122C  0628               	decf	(increment_seconds@increment+1)^0,f,c
  2155   00122E                     i2l1751:
  2156                           
  2157                           ;timers.c: 85:     while(increment > 0){
  2158   00122E  5027               	movf	increment_seconds@increment^0,w,c
  2159   001230  1028               	iorwf	(increment_seconds@increment+1)^0,w,c
  2160   001232  A4D8               	btfss	status,2,c
  2161   001234  EF1E  F009         	goto	i2u94_41
  2162   001238  EF20  F009         	goto	i2u94_40
  2163   00123C                     i2u94_41:
  2164   00123C  EFFE  F008         	goto	i2l1741
  2165   001240                     i2u94_40:
  2166   001240  0012               	return		;funcret
  2167   001242                     __end_of_increment_seconds:
  2168                           	callstack 0
  2169                           
  2170 ;; *************** function _increment_minutes *****************
  2171 ;; Defined at:
  2172 ;;		line 95 in file "timers.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  increment       2   36[COMRAM] unsigned int 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  1    wreg      void 
  2179 ;; Registers used:
  2180 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2186 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2189 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;Total ram usage:        2 bytes
  2191 ;; Hardware stack levels used: 1
  2192 ;; Hardware stack levels required when called: 3
  2193 ;; This function calls:
  2194 ;;		_increment_hours
  2195 ;; This function is called by:
  2196 ;;		_increment_seconds
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text17
  2201   001304                     __ptext17:
  2202                           	callstack 0
  2203   001304                     _increment_minutes:
  2204                           	callstack 21
  2205   001304                     
  2206                           ;timers.c: 96:     while(increment > 0){
  2207   001304  EF9D  F009         	goto	i2l1601
  2208   001308                     i2l1591:
  2209                           
  2210                           ;timers.c: 97:         minutes += 1;
  2211   001308  4A30               	infsnz	_minutes^0,f,c
  2212   00130A  2A31               	incf	(_minutes+1)^0,f,c
  2213   00130C                     
  2214                           ;timers.c: 98:         if(minutes == 60){
  2215   00130C  0E3C               	movlw	60
  2216   00130E  1830               	xorwf	_minutes^0,w,c
  2217   001310  1031               	iorwf	(_minutes+1)^0,w,c
  2218   001312  A4D8               	btfss	status,2,c
  2219   001314  EF8E  F009         	goto	i2u80_41
  2220   001318  EF90  F009         	goto	i2u80_40
  2221   00131C                     i2u80_41:
  2222   00131C  EF9A  F009         	goto	i2l1599
  2223   001320                     i2u80_40:
  2224   001320                     
  2225                           ;timers.c: 99:             minutes = 0;
  2226   001320  0E00               	movlw	0
  2227   001322  6E31               	movwf	(_minutes+1)^0,c
  2228   001324  0E00               	movlw	0
  2229   001326  6E30               	movwf	_minutes^0,c
  2230   001328                     
  2231                           ;timers.c: 100:             increment_hours(1);
  2232   001328  0E00               	movlw	0
  2233   00132A  6E24               	movwf	(increment_hours@increment+1)^0,c
  2234   00132C  0E01               	movlw	1
  2235   00132E  6E23               	movwf	increment_hours@increment^0,c
  2236   001330  ECA7  F009         	call	_increment_hours	;wreg free
  2237   001334                     i2l1599:
  2238                           
  2239                           ;timers.c: 102:         increment -= 1;
  2240   001334  0625               	decf	increment_minutes@increment^0,f,c
  2241   001336  A0D8               	btfss	status,0,c
  2242   001338  0626               	decf	(increment_minutes@increment+1)^0,f,c
  2243   00133A                     i2l1601:
  2244                           
  2245                           ;timers.c: 96:     while(increment > 0){
  2246   00133A  5025               	movf	increment_minutes@increment^0,w,c
  2247   00133C  1026               	iorwf	(increment_minutes@increment+1)^0,w,c
  2248   00133E  A4D8               	btfss	status,2,c
  2249   001340  EFA4  F009         	goto	i2u81_41
  2250   001344  EFA6  F009         	goto	i2u81_40
  2251   001348                     i2u81_41:
  2252   001348  EF84  F009         	goto	i2l1591
  2253   00134C                     i2u81_40:
  2254   00134C  0012               	return		;funcret
  2255   00134E                     __end_of_increment_minutes:
  2256                           	callstack 0
  2257                           
  2258 ;; *************** function _increment_hours *****************
  2259 ;; Defined at:
  2260 ;;		line 106 in file "timers.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  increment       2   34[COMRAM] unsigned int 
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;		None
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2274 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2277 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2278 ;;Total ram usage:        2 bytes
  2279 ;; Hardware stack levels used: 1
  2280 ;; Hardware stack levels required when called: 2
  2281 ;; This function calls:
  2282 ;;		i2_increment_day
  2283 ;; This function is called by:
  2284 ;;		_increment_minutes
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text18
  2289   00134E                     __ptext18:
  2290                           	callstack 0
  2291   00134E                     _increment_hours:
  2292                           	callstack 21
  2293   00134E                     
  2294                           ;timers.c: 107:     while(increment > 0){
  2295   00134E  EFC2  F009         	goto	i2l1561
  2296   001352                     i2l1551:
  2297                           
  2298                           ;timers.c: 108:         hours += 1;
  2299   001352  4A32               	infsnz	_hours^0,f,c
  2300   001354  2A33               	incf	(_hours+1)^0,f,c
  2301   001356                     
  2302                           ;timers.c: 109:         if(hours == 24){
  2303   001356  0E18               	movlw	24
  2304   001358  1832               	xorwf	_hours^0,w,c
  2305   00135A  1033               	iorwf	(_hours+1)^0,w,c
  2306   00135C  A4D8               	btfss	status,2,c
  2307   00135E  EFB3  F009         	goto	i2u74_41
  2308   001362  EFB5  F009         	goto	i2u74_40
  2309   001366                     i2u74_41:
  2310   001366  EFBF  F009         	goto	i2l1559
  2311   00136A                     i2u74_40:
  2312   00136A                     
  2313                           ;timers.c: 110:             hours = 0;
  2314   00136A  0E00               	movlw	0
  2315   00136C  6E33               	movwf	(_hours+1)^0,c
  2316   00136E  0E00               	movlw	0
  2317   001370  6E32               	movwf	_hours^0,c
  2318   001372                     
  2319                           ;timers.c: 111:             increment_day(1);
  2320   001372  0E00               	movlw	0
  2321   001374  6E04               	movwf	(i2increment_day@increment+1)^0,c
  2322   001376  0E01               	movlw	1
  2323   001378  6E03               	movwf	i2increment_day@increment^0,c
  2324   00137A  EC7C  F007         	call	i2_increment_day	;wreg free
  2325   00137E                     i2l1559:
  2326                           
  2327                           ;timers.c: 113:         increment -= 1;
  2328   00137E  0623               	decf	increment_hours@increment^0,f,c
  2329   001380  A0D8               	btfss	status,0,c
  2330   001382  0624               	decf	(increment_hours@increment+1)^0,f,c
  2331   001384                     i2l1561:
  2332                           
  2333                           ;timers.c: 107:     while(increment > 0){
  2334   001384  5023               	movf	increment_hours@increment^0,w,c
  2335   001386  1024               	iorwf	(increment_hours@increment+1)^0,w,c
  2336   001388  A4D8               	btfss	status,2,c
  2337   00138A  EFC9  F009         	goto	i2u75_41
  2338   00138E  EFCB  F009         	goto	i2u75_40
  2339   001392                     i2u75_41:
  2340   001392  EFA9  F009         	goto	i2l1551
  2341   001396                     i2u75_40:
  2342   001396  0012               	return		;funcret
  2343   001398                     __end_of_increment_hours:
  2344                           	callstack 0
  2345                           
  2346 ;; *************** function i2_increment_day *****************
  2347 ;; Defined at:
  2348 ;;		line 117 in file "timers.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;  increment       2    2[COMRAM] unsigned int 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  day_in_month   24    8[COMRAM] unsigned int [12]
  2353 ;;  curr_day_in_    2   32[COMRAM] unsigned int 
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  1    wreg      void 
  2356 ;; Registers used:
  2357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2363 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2364 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2366 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2367 ;;Total ram usage:       32 bytes
  2368 ;; Hardware stack levels used: 1
  2369 ;; Hardware stack levels required when called: 1
  2370 ;; This function calls:
  2371 ;;		i2_increment_month
  2372 ;; This function is called by:
  2373 ;;		_increment_hours
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           	psect	text19
  2378   000EF8                     __ptext19:
  2379                           	callstack 0
  2380   000EF8                     i2_increment_day:
  2381                           	callstack 21
  2382   000EF8                     
  2383                           ;timers.c: 118:     while(increment > 0){
  2384   000EF8  EFEB  F007         	goto	i2l1547
  2385   000EFC                     i2l1521:
  2386                           
  2387                           ;timers.c: 120:         unsigned int day_in_month[] = {31,28,31,30,31,30,31,31,30,31,30,
      +                          31};
  2388   000EFC  EE20  F086         	lfsr	2,increment_day@F14265
  2389   000F00  EE10  F009         	lfsr	1,i2increment_day@day_in_month
  2390   000F04  0E17               	movlw	23
  2391   000F06                     i2u68_41:
  2392   000F06  CFDB FFE3          	movff	plusw2,plusw1
  2393   000F0A  06E8               	decf	wreg,f,c
  2394   000F0C  E2FC               	bc	i2u68_41
  2395   000F0E                     
  2396                           ;timers.c: 121:         unsigned int curr_day_in_month = day_in_month[month - 1];
  2397   000F0E  C0A0  F005         	movff	_month,??i2_increment_day
  2398   000F12  C0A1  F006         	movff	_month+1,??i2_increment_day+1
  2399   000F16  90D8               	bcf	status,0,c
  2400   000F18  3605               	rlcf	??i2_increment_day^0,f,c
  2401   000F1A  3606               	rlcf	(??i2_increment_day+1)^0,f,c
  2402   000F1C  0EFE               	movlw	254
  2403   000F1E  2405               	addwf	??i2_increment_day^0,w,c
  2404   000F20  6E07               	movwf	(??i2_increment_day+2)^0,c
  2405   000F22  0EFF               	movlw	255
  2406   000F24  2006               	addwfc	(??i2_increment_day+1)^0,w,c
  2407   000F26  6E08               	movwf	(??i2_increment_day+3)^0,c
  2408   000F28  0E09               	movlw	low i2increment_day@day_in_month
  2409   000F2A  2407               	addwf	(??i2_increment_day+2)^0,w,c
  2410   000F2C  6ED9               	movwf	fsr2l,c
  2411   000F2E  0E00               	movlw	high i2increment_day@day_in_month
  2412   000F30  2008               	addwfc	(??i2_increment_day+3)^0,w,c
  2413   000F32  6EDA               	movwf	fsr2h,c
  2414   000F34  CFDE F021          	movff	postinc2,i2increment_day@curr_day_in_month
  2415   000F38  CFDD F022          	movff	postdec2,i2increment_day@curr_day_in_month+1
  2416   000F3C                     
  2417                           ;timers.c: 122:         if(month == 2 && (year - 2020)%4 == 0){
  2418   000F3C  0E02               	movlw	2
  2419   000F3E  0100               	movlb	0	; () banked
  2420   000F40  19A0               	xorwf	_month& (0+255),w,b
  2421   000F42  11A1               	iorwf	(_month+1)& (0+255),w,b
  2422   000F44  A4D8               	btfss	status,2,c
  2423   000F46  EFA7  F007         	goto	i2u69_41
  2424   000F4A  EFA9  F007         	goto	i2u69_40
  2425   000F4E                     i2u69_41:
  2426   000F4E  EFC0  F007         	goto	i2l1531
  2427   000F52                     i2u69_40:
  2428   000F52                     
  2429                           ; BSR set to: 0
  2430   000F52  0E1C               	movlw	28
  2431   000F54  259E               	addwf	_year& (0+255),w,b
  2432   000F56  6E05               	movwf	??i2_increment_day^0,c
  2433   000F58  0EF8               	movlw	248
  2434   000F5A  219F               	addwfc	(_year+1)& (0+255),w,b
  2435   000F5C  6E06               	movwf	(??i2_increment_day+1)^0,c
  2436   000F5E  0E03               	movlw	3
  2437   000F60  1605               	andwf	??i2_increment_day^0,f,c
  2438   000F62  0E00               	movlw	0
  2439   000F64  1606               	andwf	(??i2_increment_day+1)^0,f,c
  2440   000F66  5005               	movf	??i2_increment_day^0,w,c
  2441   000F68  1006               	iorwf	(??i2_increment_day+1)^0,w,c
  2442   000F6A  A4D8               	btfss	status,2,c
  2443   000F6C  EFBA  F007         	goto	i2u70_41
  2444   000F70  EFBC  F007         	goto	i2u70_40
  2445   000F74                     i2u70_41:
  2446   000F74  EFC0  F007         	goto	i2l1531
  2447   000F78                     i2u70_40:
  2448   000F78                     
  2449                           ; BSR set to: 0
  2450                           ;timers.c: 123:             curr_day_in_month = 29;
  2451   000F78  0E00               	movlw	0
  2452   000F7A  6E22               	movwf	(i2increment_day@curr_day_in_month+1)^0,c
  2453   000F7C  0E1D               	movlw	29
  2454   000F7E  6E21               	movwf	i2increment_day@curr_day_in_month^0,c
  2455   000F80                     i2l1531:
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;timers.c: 126:         day += 1;
  2459   000F80  4BA2               	infsnz	_day& (0+255),f,b
  2460   000F82  2BA3               	incf	(_day+1)& (0+255),f,b
  2461   000F84                     
  2462                           ; BSR set to: 0
  2463                           ;timers.c: 127:         day_of_the_week += 1;
  2464   000F84  4BA4               	infsnz	_day_of_the_week& (0+255),f,b
  2465   000F86  2BA5               	incf	(_day_of_the_week+1)& (0+255),f,b
  2466   000F88                     
  2467                           ; BSR set to: 0
  2468                           ;timers.c: 129:         if(day_of_the_week == 8){
  2469   000F88  0E08               	movlw	8
  2470   000F8A  19A4               	xorwf	_day_of_the_week& (0+255),w,b
  2471   000F8C  11A5               	iorwf	(_day_of_the_week+1)& (0+255),w,b
  2472   000F8E  A4D8               	btfss	status,2,c
  2473   000F90  EFCC  F007         	goto	i2u71_41
  2474   000F94  EFCE  F007         	goto	i2u71_40
  2475   000F98                     i2u71_41:
  2476   000F98  EFD2  F007         	goto	i2l1539
  2477   000F9C                     i2u71_40:
  2478   000F9C                     
  2479                           ; BSR set to: 0
  2480                           ;timers.c: 130:             day_of_the_week = 1;
  2481   000F9C  0E00               	movlw	0
  2482   000F9E  6FA5               	movwf	(_day_of_the_week+1)& (0+255),b
  2483   000FA0  0E01               	movlw	1
  2484   000FA2  6FA4               	movwf	_day_of_the_week& (0+255),b
  2485   000FA4                     i2l1539:
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;timers.c: 133:         if(day > curr_day_in_month){
  2489   000FA4  51A2               	movf	_day& (0+255),w,b
  2490   000FA6  5C21               	subwf	i2increment_day@curr_day_in_month^0,w,c
  2491   000FA8  51A3               	movf	(_day+1)& (0+255),w,b
  2492   000FAA  5822               	subwfb	(i2increment_day@curr_day_in_month+1)^0,w,c
  2493   000FAC  B0D8               	btfsc	status,0,c
  2494   000FAE  EFDB  F007         	goto	i2u72_41
  2495   000FB2  EFDD  F007         	goto	i2u72_40
  2496   000FB6                     i2u72_41:
  2497   000FB6  EFE8  F007         	goto	i2l1545
  2498   000FBA                     i2u72_40:
  2499   000FBA                     
  2500                           ; BSR set to: 0
  2501                           ;timers.c: 134:             increment_month(1);
  2502   000FBA  0E00               	movlw	0
  2503   000FBC  6E02               	movwf	(i2increment_month@increment+1)^0,c
  2504   000FBE  0E01               	movlw	1
  2505   000FC0  6E01               	movwf	i2increment_month@increment^0,c
  2506   000FC2  ECEF  F009         	call	i2_increment_month	;wreg free
  2507   000FC6                     
  2508                           ;timers.c: 135:             day = 1;
  2509   000FC6  0E00               	movlw	0
  2510   000FC8  0100               	movlb	0	; () banked
  2511   000FCA  6FA3               	movwf	(_day+1)& (0+255),b
  2512   000FCC  0E01               	movlw	1
  2513   000FCE  6FA2               	movwf	_day& (0+255),b
  2514   000FD0                     i2l1545:
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;timers.c: 138:         increment -= 1;
  2518   000FD0  0603               	decf	i2increment_day@increment^0,f,c
  2519   000FD2  A0D8               	btfss	status,0,c
  2520   000FD4  0604               	decf	(i2increment_day@increment+1)^0,f,c
  2521   000FD6                     i2l1547:
  2522                           
  2523                           ;timers.c: 118:     while(increment > 0){
  2524   000FD6  5003               	movf	i2increment_day@increment^0,w,c
  2525   000FD8  1004               	iorwf	(i2increment_day@increment+1)^0,w,c
  2526   000FDA  A4D8               	btfss	status,2,c
  2527   000FDC  EFF2  F007         	goto	i2u73_41
  2528   000FE0  EFF4  F007         	goto	i2u73_40
  2529   000FE4                     i2u73_41:
  2530   000FE4  EF7E  F007         	goto	i2l1521
  2531   000FE8                     i2u73_40:
  2532   000FE8  0012               	return		;funcret
  2533   000FEA                     __end_ofi2_increment_day:
  2534                           	callstack 0
  2535                           
  2536 ;; *************** function i2_increment_month *****************
  2537 ;; Defined at:
  2538 ;;		line 155 in file "timers.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;  increment       2    0[COMRAM] unsigned int 
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  1    wreg      void 
  2545 ;; Registers used:
  2546 ;;		wreg, status,2, status,0
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2552 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2555 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2556 ;;Total ram usage:        2 bytes
  2557 ;; Hardware stack levels used: 1
  2558 ;; This function calls:
  2559 ;;		Nothing
  2560 ;; This function is called by:
  2561 ;;		i2_increment_day
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text20
  2566   0013DE                     __ptext20:
  2567                           	callstack 0
  2568   0013DE                     i2_increment_month:
  2569                           	callstack 21
  2570   0013DE                     
  2571                           ;timers.c: 156:     while(increment > 0){
  2572   0013DE  EF08  F00A         	goto	i2l1511
  2573   0013E2                     i2l1501:
  2574                           
  2575                           ;timers.c: 158:         month += 1;
  2576   0013E2  0100               	movlb	0	; () banked
  2577   0013E4  4BA0               	infsnz	_month& (0+255),f,b
  2578   0013E6  2BA1               	incf	(_month+1)& (0+255),f,b
  2579   0013E8                     
  2580                           ; BSR set to: 0
  2581                           ;timers.c: 159:         if(month > 12){
  2582   0013E8  51A1               	movf	(_month+1)& (0+255),w,b
  2583   0013EA  E109               	bnz	i2u66_40
  2584   0013EC  0E0D               	movlw	13
  2585   0013EE  5DA0               	subwf	_month& (0+255),w,b
  2586   0013F0  A0D8               	btfss	status,0,c
  2587   0013F2  EFFD  F009         	goto	i2u66_41
  2588   0013F6  EFFF  F009         	goto	i2u66_40
  2589   0013FA                     i2u66_41:
  2590   0013FA  EF05  F00A         	goto	i2l1509
  2591   0013FE                     i2u66_40:
  2592   0013FE                     
  2593                           ; BSR set to: 0
  2594                           ;timers.c: 160:             month = 1;
  2595   0013FE  0E00               	movlw	0
  2596   001400  6FA1               	movwf	(_month+1)& (0+255),b
  2597   001402  0E01               	movlw	1
  2598   001404  6FA0               	movwf	_month& (0+255),b
  2599   001406                     
  2600                           ; BSR set to: 0
  2601                           ;timers.c: 161:             year += 1;
  2602   001406  4B9E               	infsnz	_year& (0+255),f,b
  2603   001408  2B9F               	incf	(_year+1)& (0+255),f,b
  2604   00140A                     i2l1509:
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;timers.c: 163:         increment -= 1;
  2608   00140A  0601               	decf	i2increment_month@increment^0,f,c
  2609   00140C  A0D8               	btfss	status,0,c
  2610   00140E  0602               	decf	(i2increment_month@increment+1)^0,f,c
  2611   001410                     i2l1511:
  2612                           
  2613                           ;timers.c: 156:     while(increment > 0){
  2614   001410  5001               	movf	i2increment_month@increment^0,w,c
  2615   001412  1002               	iorwf	(i2increment_month@increment+1)^0,w,c
  2616   001414  A4D8               	btfss	status,2,c
  2617   001416  EF0F  F00A         	goto	i2u67_41
  2618   00141A  EF11  F00A         	goto	i2u67_40
  2619   00141E                     i2u67_41:
  2620   00141E  EFF1  F009         	goto	i2l1501
  2621   001422                     i2u67_40:
  2622   001422  0012               	return		;funcret
  2623   001424                     __end_ofi2_increment_month:
  2624                           	callstack 0
  2625                           
  2626 ;; *************** function ___wmul *****************
  2627 ;; Defined at:
  2628 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  multiplier      2    0[COMRAM] unsigned int 
  2631 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;  product         2    4[COMRAM] unsigned int 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  2    0[COMRAM] unsigned int 
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0, prodl, prodh
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2643 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2646 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2647 ;;Total ram usage:        6 bytes
  2648 ;; Hardware stack levels used: 1
  2649 ;; This function calls:
  2650 ;;		Nothing
  2651 ;; This function is called by:
  2652 ;;		_increment_seconds
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text21
  2657   001488                     __ptext21:
  2658                           	callstack 0
  2659   001488                     ___wmul:
  2660                           	callstack 24
  2661   001488  5001               	movf	___wmul@multiplier^0,w,c
  2662   00148A  0203               	mulwf	___wmul@multiplicand^0,c
  2663   00148C  CFF3 F005          	movff	prodl,___wmul@product
  2664   001490  CFF4 F006          	movff	prodh,___wmul@product+1
  2665   001494  5001               	movf	___wmul@multiplier^0,w,c
  2666   001496  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2667   001498  50F3               	movf	243,w,c
  2668   00149A  2606               	addwf	(___wmul@product+1)^0,f,c
  2669   00149C  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2670   00149E  0203               	mulwf	___wmul@multiplicand^0,c
  2671   0014A0  50F3               	movf	243,w,c
  2672   0014A2  2606               	addwf	(___wmul@product+1)^0,f,c
  2673   0014A4  C005  F001         	movff	___wmul@product,?___wmul
  2674   0014A8  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2675   0014AC  0012               	return		;funcret
  2676   0014AE                     __end_of___wmul:
  2677                           	callstack 0
  2678                           
  2679                           	psect	rparam
  2680   000000                     
  2681                           	psect	temp
  2682   00003A                     btemp:
  2683                           	callstack 0
  2684   00003A                     	ds	1
  2685   000000                     int$flags	set	btemp
  2686   000000                     wtemp8	set	btemp+1
  2687   000000                     ttemp5	set	btemp+1
  2688   000000                     ttemp6	set	btemp+4
  2689   000000                     ttemp7	set	btemp+8
  2690                           
  2691                           	psect	idloc
  2692                           
  2693                           ;Config register IDLOC0 @ 0x200000
  2694                           ;	unspecified, using default values
  2695   200000                     	org	2097152
  2696   200000  0FFF               	dw	4095
  2697                           
  2698                           ;Config register IDLOC1 @ 0x200002
  2699                           ;	unspecified, using default values
  2700   200002                     	org	2097154
  2701   200002  0FFF               	dw	4095
  2702                           
  2703                           ;Config register IDLOC2 @ 0x200004
  2704                           ;	unspecified, using default values
  2705   200004                     	org	2097156
  2706   200004  0FFF               	dw	4095
  2707                           
  2708                           ;Config register IDLOC3 @ 0x200006
  2709                           ;	unspecified, using default values
  2710   200006                     	org	2097158
  2711   200006  0FFF               	dw	4095
  2712                           
  2713                           ;Config register IDLOC4 @ 0x200008
  2714                           ;	unspecified, using default values
  2715   200008                     	org	2097160
  2716   200008  0FFF               	dw	4095
  2717                           
  2718                           ;Config register IDLOC5 @ 0x20000A
  2719                           ;	unspecified, using default values
  2720   20000A                     	org	2097162
  2721   20000A  0FFF               	dw	4095
  2722                           
  2723                           ;Config register IDLOC6 @ 0x20000C
  2724                           ;	unspecified, using default values
  2725   20000C                     	org	2097164
  2726   20000C  0FFF               	dw	4095
  2727                           
  2728                           ;Config register IDLOC7 @ 0x20000E
  2729                           ;	unspecified, using default values
  2730   20000E                     	org	2097166
  2731   20000E  0FFF               	dw	4095
  2732                           
  2733                           	psect	config
  2734                           
  2735                           ;Config register CONFIG1L @ 0x300000
  2736                           ;	External Oscillator mode Selection bits
  2737                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2738                           ;	Power-up default value for COSC bits
  2739                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2740   300000                     	org	3145728
  2741   300000  AA                 	db	170
  2742                           
  2743                           ;Config register CONFIG1H @ 0x300001
  2744                           ;	unspecified, using default values
  2745                           ;	Clock Out Enable bit
  2746                           ;	CLKOUTEN = 0x1, unprogrammed default
  2747                           ;	Clock Switch Enable bit
  2748                           ;	CSWEN = 0x1, unprogrammed default
  2749                           ;	Fail-Safe Clock Monitor Enable bit
  2750                           ;	FCMEN = 0x1, unprogrammed default
  2751   300001                     	org	3145729
  2752   300001  FF                 	db	255
  2753                           
  2754                           ;Config register CONFIG2L @ 0x300002
  2755                           ;	unspecified, using default values
  2756                           ;	Master Clear Enable bit
  2757                           ;	MCLRE = 0x1, unprogrammed default
  2758                           ;	Power-up Timer Enable bit
  2759                           ;	PWRTE = 0x1, unprogrammed default
  2760                           ;	Low-power BOR enable bit
  2761                           ;	LPBOREN = 0x1, unprogrammed default
  2762                           ;	Brown-out Reset Enable bits
  2763                           ;	BOREN = 0x3, unprogrammed default
  2764   300002                     	org	3145730
  2765   300002  FF                 	db	255
  2766                           
  2767                           ;Config register CONFIG2H @ 0x300003
  2768                           ;	unspecified, using default values
  2769                           ;	Brown Out Reset Voltage selection bits
  2770                           ;	BORV = 0x3, unprogrammed default
  2771                           ;	ZCD Disable bit
  2772                           ;	ZCD = 0x1, unprogrammed default
  2773                           ;	PPSLOCK bit One-Way Set Enable bit
  2774                           ;	PPS1WAY = 0x1, unprogrammed default
  2775                           ;	Stack Full/Underflow Reset Enable bit
  2776                           ;	STVREN = 0x1, unprogrammed default
  2777                           ;	Debugger Enable bit
  2778                           ;	DEBUG = 0x1, unprogrammed default
  2779                           ;	Extended Instruction Set Enable bit
  2780                           ;	XINST = 0x1, unprogrammed default
  2781   300003                     	org	3145731
  2782   300003  FF                 	db	255
  2783                           
  2784                           ;Config register CONFIG3L @ 0x300004
  2785                           ;	WDT Period Select bits
  2786                           ;	WDTCPS = 0x1F, unprogrammed default
  2787                           ;	WDT operating mode
  2788                           ;	WDTE = OFF, WDT Disabled
  2789   300004                     	org	3145732
  2790   300004  9F                 	db	159
  2791                           
  2792                           ;Config register CONFIG3H @ 0x300005
  2793                           ;	unspecified, using default values
  2794                           ;	WDT Window Select bits
  2795                           ;	WDTCWS = 0x7, unprogrammed default
  2796                           ;	WDT input clock selector
  2797                           ;	WDTCCS = 0x7, unprogrammed default
  2798   300005                     	org	3145733
  2799   300005  FF                 	db	255
  2800                           
  2801                           ;Config register CONFIG4L @ 0x300006
  2802                           ;	unspecified, using default values
  2803                           ;	Write Protection Block 0
  2804                           ;	WRT0 = 0x1, unprogrammed default
  2805                           ;	Write Protection Block 1
  2806                           ;	WRT1 = 0x1, unprogrammed default
  2807                           ;	Write Protection Block 2
  2808                           ;	WRT2 = 0x1, unprogrammed default
  2809                           ;	Write Protection Block 3
  2810                           ;	WRT3 = 0x1, unprogrammed default
  2811                           ;	Write Protection Block 3
  2812                           ;	WRT4 = 0x1, unprogrammed default
  2813                           ;	Write Protection Block 3
  2814                           ;	WRT5 = 0x1, unprogrammed default
  2815                           ;	Write Protection Block 3
  2816                           ;	WRT6 = 0x1, unprogrammed default
  2817                           ;	Write Protection Block 3
  2818                           ;	WRT7 = 0x1, unprogrammed default
  2819   300006                     	org	3145734
  2820   300006  FF                 	db	255
  2821                           
  2822                           ;Config register CONFIG4H @ 0x300007
  2823                           ;	unspecified, using default values
  2824                           ;	Configuration Register Write Protection bit
  2825                           ;	WRTC = 0x1, unprogrammed default
  2826                           ;	Boot Block Write Protection bit
  2827                           ;	WRTB = 0x1, unprogrammed default
  2828                           ;	Data EEPROM Write Protection bit
  2829                           ;	WRTD = 0x1, unprogrammed default
  2830                           ;	Scanner Enable bit
  2831                           ;	SCANE = 0x1, unprogrammed default
  2832                           ;	Low Voltage Programming Enable bit
  2833                           ;	LVP = 0x1, unprogrammed default
  2834   300007                     	org	3145735
  2835   300007  FF                 	db	255
  2836                           
  2837                           ;Config register CONFIG5L @ 0x300008
  2838                           ;	unspecified, using default values
  2839                           ;	UserNVM Program Memory Code Protection bit
  2840                           ;	CP = 0x1, unprogrammed default
  2841                           ;	DataNVM Memory Code Protection bit
  2842                           ;	CPD = 0x1, unprogrammed default
  2843   300008                     	org	3145736
  2844   300008  FF                 	db	255
  2845                           
  2846                           ;Config register CONFIG5H @ 0x300009
  2847                           ;	unspecified, using default values
  2848   300009                     	org	3145737
  2849   300009  FF                 	db	255
  2850                           
  2851                           ;Config register CONFIG6L @ 0x30000A
  2852                           ;	unspecified, using default values
  2853                           ;	Table Read Protection Block 0
  2854                           ;	EBTR0 = 0x1, unprogrammed default
  2855                           ;	Table Read Protection Block 1
  2856                           ;	EBTR1 = 0x1, unprogrammed default
  2857                           ;	Table Read Protection Block 2
  2858                           ;	EBTR2 = 0x1, unprogrammed default
  2859                           ;	Table Read Protection Block 3
  2860                           ;	EBTR3 = 0x1, unprogrammed default
  2861                           ;	Table Read Protection Block 4
  2862                           ;	EBTR4 = 0x1, unprogrammed default
  2863                           ;	Table Read Protection Block 5
  2864                           ;	EBTR5 = 0x1, unprogrammed default
  2865                           ;	Table Read Protection Block 6
  2866                           ;	EBTR6 = 0x1, unprogrammed default
  2867                           ;	Table Read Protection Block 7
  2868                           ;	EBTR7 = 0x1, unprogrammed default
  2869   30000A                     	org	3145738
  2870   30000A  FF                 	db	255
  2871                           
  2872                           ;Config register CONFIG6H @ 0x30000B
  2873                           ;	unspecified, using default values
  2874                           ;	Boot Block Table Read Protection bit
  2875                           ;	EBTRB = 0x1, unprogrammed default
  2876   30000B                     	org	3145739
  2877   30000B  FF                 	db	255
  2878                           tosu	equ	0xFFF
  2879                           tosh	equ	0xFFE
  2880                           tosl	equ	0xFFD
  2881                           stkptr	equ	0xFFC
  2882                           pclatu	equ	0xFFB
  2883                           pclath	equ	0xFFA
  2884                           pcl	equ	0xFF9
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           prodh	equ	0xFF4
  2890                           prodl	equ	0xFF3
  2891                           indf0	equ	0xFEF
  2892                           postinc0	equ	0xFEE
  2893                           postdec0	equ	0xFED
  2894                           preinc0	equ	0xFEC
  2895                           plusw0	equ	0xFEB
  2896                           fsr0h	equ	0xFEA
  2897                           fsr0l	equ	0xFE9
  2898                           wreg	equ	0xFE8
  2899                           indf1	equ	0xFE7
  2900                           postinc1	equ	0xFE6
  2901                           postdec1	equ	0xFE5
  2902                           preinc1	equ	0xFE4
  2903                           plusw1	equ	0xFE3
  2904                           fsr1h	equ	0xFE2
  2905                           fsr1l	equ	0xFE1
  2906                           bsr	equ	0xFE0
  2907                           indf2	equ	0xFDF
  2908                           postinc2	equ	0xFDE
  2909                           postdec2	equ	0xFDD
  2910                           preinc2	equ	0xFDC
  2911                           plusw2	equ	0xFDB
  2912                           fsr2h	equ	0xFDA
  2913                           fsr2l	equ	0xFD9
  2914                           status	equ	0xFD8

Data Sizes:
    Strings     3
    Constant    0
    Data        38
    BSS         2
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      57
    BANK0           160     38      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2077$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2077$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_increment_seconds
    _increment_seconds->_increment_minutes
    _increment_minutes->_increment_hours
    _increment_hours->i2_increment_day
    i2_increment_day->i2_increment_month

Critical Paths under _main in BANK0

    _main->_increment_day
    _increment_day->_increment_month
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    3470
                                             34 BANK0      4     4      0
                           _ADC_init
                         _Comp1_init
                    _Interrupts_init
                           _LCD_Init
                      _LEDarray_init
                        _Timer0_init
                            _get_day
                          _get_month
                      _increment_day
 ---------------------------------------------------------------------------------
 (1) _increment_day                                       32    30      2     377
                                              2 BANK0     32    30      2
                    _increment_month
 ---------------------------------------------------------------------------------
 (2) _increment_month                                      2     0      2     124
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_month                                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                         18     0     18     847
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (1) _LEDarray_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0    2231
                                              3 BANK0      2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendbyte                                         2     1      1    2107
                                              1 BANK0      2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendnibble                                       1     1      0     124
                                              0 BANK0      1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (3) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Comp1_init                                           0     0      0       0
                           _DAC_init
 ---------------------------------------------------------------------------------
 (2) _DAC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _HighISR                                              7     7      0     977
                                             40 COMRAM     7     7      0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (6) _increment_seconds                                    2     0      2     977
                                             38 COMRAM     2     0      2
                             ___wmul
                  _increment_minutes
 ---------------------------------------------------------------------------------
 (7) _increment_minutes                                    2     0      2     344
                                             36 COMRAM     2     0      2
                    _increment_hours
 ---------------------------------------------------------------------------------
 (8) _increment_hours                                      2     0      2     245
                                             34 COMRAM     2     0      2
                    i2_increment_day
 ---------------------------------------------------------------------------------
 (9) i2_increment_day                                     32    30      2     146
                                              2 COMRAM    32    30      2
                  i2_increment_month
 ---------------------------------------------------------------------------------
 (10) i2_increment_month                                   2     0      2      49
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     511
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Comp1_init
     _DAC_init
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LEDarray_init
   _Timer0_init
   _get_day
   _get_month
   _increment_day
     _increment_month

 _HighISR (ROOT)
   _increment_seconds
     ___wmul
     _increment_minutes
       _increment_hours
         i2_increment_day
           i2_increment_month

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      49        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      46       5       43.8%
BITBIGSFRllllhh     84      0       0      39        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      39       1       60.6%
BITBIGSFRlllllh     5C      0       0      42        0.0%
BITBIGSFRhhll       43      0       0      34        0.0%
BITBIGSFRlllllh     33      0       0      41        0.0%
BITBIGSFRllllll     32      0       0      47        0.0%
BITBIGSFRhhlhh      1B      0       0      33        0.0%
BITBIGSFRllllhh     14      0       0      36        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllhl      8      0       0      40        0.0%
BITBIGSFRllllll      7      0       0      46        0.0%
BITBIGSFRlllllh      7      0       0      44        0.0%
BITBIGSFRllllhh      6      0       0      38        0.0%
BITBIGSFRllllhh      3      0       0      37        0.0%
BITBIGSFRhlh         3      0       0      35        0.0%
BITBIGSFRlllllh      1      0       0      43        0.0%
BITBIGSFRllllll      1      0       0      45        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7F      48        0.0%
DATA                 0      0      7F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Nov 08 10:24:57 2022

                                l27 145A                 ___wmul@multiplicand 0003  
                 ??_Interrupts_init 0060                                 l115 151E  
                               l211 1546                                 l300 125C  
                               l118 14D0                                 l302 1272  
                               l143 152E                                 l311 1486  
                               l304 1288                                 l208 1550  
                               l306 129E                                 l314 10A2  
                               l308 12AC                                 l244 0EF6  
                               l272 150A                                 l193 11C8  
                               l257 13DC                                 l297 153C  
                               _day 00A2                                 wreg 000FE8  
                              l2001 1058                                l2011 1096  
                              l2003 1060                                l2005 106C  
                              l2013 1548                                l2021 0E1C  
                              l2101 1144                                l2007 107E  
                              l2015 153E                                l2031 0E90  
                              l2023 0E4A                                l2009 108A  
                              l2041 0ED2                                l2033 0E94  
                              l2025 0E5E                                l2017 0E06  
                              l2043 0EDC                                l2035 0EA8  
                              l2027 0E84                                l2019 0E0A  
                              l2037 0EB0                                l2029 0E8C  
                              l2045 0EE2                                l2039 0EC6  
                              l2081 10B0                                l2091 1112  
                              l2083 10B4                                l2093 111E  
                              l2085 10B8                                l2095 112A  
                              l2087 1106                                l2079 10A4  
                              l2097 1138                                l2089 110A  
                              l2099 113E                                l1901 1274  
                              l1911 12A4                                l1903 1282  
                              l1913 150C                                l1905 128A  
                              l1921 139C                                l1915 1512  
                              l1907 1298                                l1923 13A0  
                              l1931 13C8                                l1917 151C  
                              l1909 12A0                                l1933 1460  
                              l1941 1424                                l1925 13B6  
                              l1951 14C6                                l1943 14AE  
                              l1935 146C                                l1927 13BE  
                              l1919 1398                                l1953 14C8  
                              l1945 14B0                                l1937 1476  
                              l1961 1188                                l1929 13C2  
                              l1955 14CC                                l1947 14C2  
                              l1891 153A                                l1939 147E  
                              l1971 11BA                                l1963 1190  
                              l1981 1506                                l1949 14C4  
                              l1957 1520                                l1893 1246  
                              l1973 11C6                                l1965 1192  
                              l1983 1508                                l1975 14F2  
                              l1887 1530                                l1895 1256  
                              l1991 1022                                l1967 1194  
                              l1959 1150                                l1977 14FC  
                              l1889 1532                                l1897 125E  
                              l1993 1030                                l1985 0FEA  
                              l1969 11A6                                l1979 1504  
                              l1899 126C                                l1995 1038  
                              l1987 1002                                l1997 1044  
                              l1989 101C                                l1999 104C  
                              STR_1 0E01                                u1200 13B6  
                              u1201 13B2                                u1210 13DC  
                              u1211 13D8                                u1230 11A6  
                              u1231 11A2                                u1160 1256  
                              u1161 1252                                u1225 146A  
                              u1241 0E14                                u1170 126C  
                              u1226 146C                                u1250 0E5E  
                              u1171 1268                                u1251 0E5A  
                              u1180 1282                                u1260 0E84  
                              u1181 127E                                u1261 0E80  
                              u1190 1298                                u1270 0EA8  
                              u1191 1294                                u1271 0EA4  
                              u1280 0EC6                                u1281 0EC2  
                              u1290 0EF6                                u1507 12A6  
                              u1291 0EF2                                u1517 1534  
                              u1437 100E                                u1447 1024  
                              u1457 1032                                u1467 1046  
                              u1477 105A                                u1487 1074  
                              u1497 1480                                _main 10A4  
                              _year 009E                                fsr1h 000FE2  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 003A  
                              prodh 000FF4                                prodl 000FF3  
                              start 00B8                    __end_of_ADC_init 150C  
                  __end_of_DAC_init 1520                     __end_of_HighISR 00B8  
                      ___param_bank 000000          increment_minutes@increment 0025  
                        _Comp1_init 14AE                    __end_of_LCD_Init 10A4  
                             ?_main 0001                               _ADPCH 000F5F  
                             i2l152 009C                               i2l233 1396  
                             i2l226 134C                               i2l219 1240  
                             i2l244 0FE8                               i2l257 1422  
                             i2l359 14AC                               _TMR0H 000FD4  
                             _TMR0L 000FD3                     __end_of_get_day 1552  
                             _hours 0032                               _month 00A0  
                     ?_LCD_sendbyte 0061                               tablat 000FF5  
                             plusw1 000FE3                               plusw2 000FDB  
                             ttemp5 003B                               ttemp6 003E  
                             ttemp7 0042                               status 000FD8  
                             wtemp8 003B                    ?_increment_hours 0023  
       i2increment_day@day_in_month 0009                    ?_increment_month 0060  
                   __initialization 12AE                        __end_of_main 1150  
                 __end_of_LCD_E_TOG 153E                              ??_main 0082  
                     __activetblptr 000001  Timer0_init@current_day_of_the_week 006C  
        increment_seconds@increment 0027                              _ADRESH 000F64  
                    ??_LCD_sendbyte 0062                              i2l1501 13E2  
                            i2l1503 13E8                              i2l1511 1410  
                            i2l1505 13FE                              i2l1521 0EFC  
                            i2l1601 133A                              i2l1507 1406  
                            i2l1531 0F80                              i2l1523 0F0E  
                            i2l1509 140A                              i2l1541 0FBA  
                            i2l1533 0F84                              i2l1525 0F3C  
                            i2l1543 0FC6                              i2l1535 0F88  
                            i2l1527 0F52                              i2l1519 0EF8  
                            i2l1551 1352                              i2l1625 1488  
                            i2l1545 0FD0                              i2l1537 0F9C  
                            i2l1529 0F78                              i2l1553 1356  
                            i2l1561 1384                              i2l1627 14A4  
                            i2l1539 0FA4                              i2l1547 0FD6  
                            i2l1555 136A                              i2l1811 0032  
                            i2l1557 1372                              i2l1549 134E  
                            i2l1741 11FC                              i2l1821 0084  
                            i2l1813 0054                              i2l1559 137E  
                            i2l1591 1308                              i2l1743 1200  
                            i2l1751 122E                              i2l1823 0090  
                            i2l1815 0058                              i2l1593 130C  
                            i2l1745 1214                              i2l1737 11CA  
                            i2l1825 0098                              i2l1817 0066  
                            i2l1809 0022                              i2l1499 13DE  
                            i2l1595 1320                              i2l1747 121C  
                            i2l1739 11DC                              i2l1819 0072  
                            i2l1597 1328                              i2l1589 1304  
                            i2l1749 1228                              i2l1599 1334  
                         ??_HighISR 0029                       ??_Timer0_init 0072  
                            ___wmul 1488                         ?_Comp1_init 0001  
                            isa$std 000001                       _increment_day 0E06  
                         ??_get_day 0062                        __pdataCOMRAM 0030  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ?_ADC_init 0001                           ?_DAC_init 0001  
                        __accesstop 0060             __end_of__initialization 12F2  
                         ?_LCD_Init 0001                 increment_day@F14265 0086  
                     ___rparam_used 000001                       _LEDarray_init 1424  
                   _Interrupts_init 1520                      __pcstackCOMRAM 0001  
                      __pidataBANK0 14D2                      ?_increment_day 0062  
               __end_of_Timer0_init 11CA                          ??_ADC_init 0060  
                        ??_DAC_init 0060                          ??_LCD_Init 0063  
                    _LCD_sendnibble 1242                          __pnvCOMRAM 0036  
                    ?_LEDarray_init 0001                             ?___wmul 0001  
              __end_of_LCD_sendbyte 1488                             i2u70_40 0F78  
                           i2u70_41 0F74                             i2u71_40 0F9C  
                           i2u71_41 0F98                             i2u72_40 0FBA  
                           i2u80_40 1320                             i2u72_41 0FB6  
                           i2u80_41 131C                             i2u73_40 0FE8  
                           i2u81_40 134C                             i2u73_41 0FE4  
                           i2u81_41 1348                             i2u66_40 13FE  
                           i2u74_40 136A                             i2u66_41 13FA  
                           i2u74_41 1366                             i2u67_40 1422  
                           i2u75_40 1396                             i2u67_41 141E  
                           i2u75_41 1392                             i2u92_40 11DC  
                           i2u68_41 0F06                             i2u92_41 11D8  
        i2increment_month@increment 0001                             i2u69_40 0F52  
                           i2u93_40 1214                             i2u69_41 0F4E  
                           i2u93_41 1210                             i2u94_40 1240  
                           i2u94_41 123C              __end_of_LCD_sendnibble 12AE  
           __end_of_Interrupts_init 1530                             _HighISR 0008  
                         _ADREFbits 000F58                   ??i2_increment_day 0005  
                           __Hparam 0000                             __Lparam 0000  
                       _Timer0_init 1150                   __end_of_get_month 1548  
                   ??_increment_day 0064                        __psmallconst 0E00  
                           __pcinit 12AE                             __ramtop 0E00  
                           __ptext0 10A4                             __ptext1 0E06  
                           __ptext2 1398                             __ptext3 153E  
                           __ptext4 1548                             __ptext5 1150  
                           __ptext6 1424                             __ptext7 0FEA  
                           __ptext8 145C                             __ptext9 1242  
            increment_day@increment 0062                             _get_day 1548  
                           _minutes 0030                             _seconds 0034  
                         _LCD_E_TOG 1530                             main@day 0084  
              end_of_initialization 12F2                     ?_LCD_sendnibble 0001  
                   ??_LEDarray_init 0060           Timer0_init@current_minute 0062  
                           postdec1 000FE5                             postdec2 000FDD  
                      ??_Comp1_init 0060                             postinc0 000FEE  
                           postinc2 000FDE              Timer0_init@current_day 006A  
                         _PORTAbits 000F89                           _PORTBbits 000F8A  
                         _PORTFbits 000F8E                           _PORTGbits 000F8F  
         Timer0_init@init_test_mode 0060                          ?_LCD_E_TOG 0001  
                         _TRISAbits 000F81                           _TRISBbits 000F82  
                         _TRISCbits 000F83                           _TRISDbits 000F84  
                         _TRISEbits 000F85                           _TRISFbits 000F86  
                         _TRISGbits 000F87                           _TRISHbits 000F88  
                __end_of_Comp1_init 14D2                         _CM1CON0bits 000ED0  
                       _CM1CON1bits 000ED1                    ?_Interrupts_init 0001  
                 _increment_minutes 1304                   _increment_seconds 11CA  
                ?_increment_minutes 0025                  ?_increment_seconds 0027  
               ??_increment_minutes 0027                 ??_increment_seconds 0029  
                    __end_of___wmul 14AE                LCD_sendnibble@number 0060  
                     __pidataCOMRAM 1552                   i2_increment_month 13DE  
               start_initialization 12AE                  ?i2_increment_month 0001  
         __end_of_increment_minutes 134E           __end_of_increment_seconds 1242  
               ??i2_increment_month 0003                        _LCD_sendbyte 145C  
                          ??___wmul 0005                         __pdataBANK0 0086  
         __end_ofi2_increment_month 1424                         __pbssCOMRAM 0038  
                       ??_LCD_E_TOG 0060                       __pcstackBANK0 0060  
                 ??_increment_hours 0025                   ??_increment_month 0062  
          increment_month@increment 0060                     i2_increment_day 0EF8  
                    _time_corrector 0038                            ?_HighISR 0001  
                      ?_Timer0_init 0060           increment_day@day_in_month 0068  
                         __pintcode 0008    i2increment_day@curr_day_in_month 0021  
    increment_day@curr_day_in_month 0080                           _get_month 153E  
                          ?_get_day 0060                         __smallconst 0E00  
                   _day_of_the_week 00A4                    ??_LCD_sendnibble 0060  
                          _ADC_init 14F2                            _DAC_init 150C  
                  LCD_sendbyte@Byte 0062                            _LCD_Init 0FEA  
                  LCD_sendbyte@type 0061                      ___wmul@product 0005  
                          _LATAbits 000F79                            _LATBbits 000F7A  
                          _LATCbits 000F7B                            _LATDbits 000F7C  
                          _LATEbits 000F7D                            _LATFbits 000F7E  
                          _LATGbits 000F7F                            _LATHbits 000F80  
                          _PIE0bits 000E29                            _IPR2bits 000E21  
                          _PIE2bits 000E2B                            i2u103_40 0032  
                          i2u103_41 002E                            i2u104_40 0044  
                          i2u104_41 003C                            i2u106_40 0066  
                          i2u105_48 0046                            i2u106_41 0062  
                          i2u107_40 0084                            i2u107_41 0080  
                          _PIR0bits 000E33                            _PIR2bits 000E35  
                         _test_mode 0036               __end_of_increment_day 0EF8  
                        ?_get_month 0060                          _ADCON0bits 000F60  
                 ___wmul@multiplier 0001             __end_ofi2_increment_day 0FEA  
                         main@month 0082                          _CM1NCHbits 000ED2  
                        _CM1PCHbits 000ED3                           copy_data0 12C2  
                         copy_data1 12E2               __end_of_LEDarray_init 145C  
                          __Hrparam 0000                            __Lrparam 0000  
                      __Lsmallconst 0E00            i2increment_day@increment 0003  
                        _ANSELAbits 000E92                          _T0CON0bits 000FD5  
                        _T0CON1bits 000FD6                            __ptext10 1530  
                          __ptext11 1520                            __ptext20 13DE  
                          __ptext12 14AE                            __ptext21 1488  
                          __ptext13 150C                            __ptext14 14F2  
                          __ptext16 11CA                            __ptext17 1304  
                          __ptext18 134E                            __ptext19 0EF8  
                          isa$xinst 000000                            int$flags 003A  
          increment_hours@increment 0023                     _increment_hours 134E  
                   _increment_month 1398                         ??_get_month 0062  
                  ?i2_increment_day 0003                          _INTCONbits 000FF2  
                          intlevel2 0000                        _DAC1CON0bits 000EC6  
                      _DAC1CON1bits 000EC7            Timer0_init@current_month 006E  
           Timer0_init@current_hour 0066             Timer0_init@current_year 0070  
           __end_of_increment_hours 1398             __end_of_increment_month 13DE  
