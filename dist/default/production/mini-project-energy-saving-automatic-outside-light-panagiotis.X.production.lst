

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Nov 09 16:56:56 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=3
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=3
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=3
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=3
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=3
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=3
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Version 2.35
    61                           ; Generated 05/05/2021 GMT
    62                           ; 
    63                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F67K40 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95   000000                     
    96                           	psect	idataCOMRAM
    97   002380                     __pidataCOMRAM:
    98                           	callstack 0
    99                           
   100                           ;initializer for _week_day
   101   002380  0002               	dw	2
   102                           
   103                           	psect	idataBANK0
   104   0022C4                     __pidataBANK0:
   105                           	callstack 0
   106                           
   107                           ;initializer for _month_days
   108   0022C4  0000               	dw	0
   109   0022C6  001F               	dw	31
   110   0022C8  001C               	dw	28
   111   0022CA  001F               	dw	31
   112   0022CC  001E               	dw	30
   113   0022CE  001F               	dw	31
   114   0022D0  001E               	dw	30
   115   0022D2  001F               	dw	31
   116   0022D4  001F               	dw	31
   117   0022D6  001E               	dw	30
   118   0022D8  001F               	dw	31
   119   0022DA  001E               	dw	30
   120   0022DC  001F               	dw	31
   121                           
   122                           ;initializer for main@F14262
   123   0022DE  4D                 	db	77
   124   0022DF  4F                 	db	79
   125   0022E0  4E                 	db	78
   126   0022E1  00                 	db	0
   127                           
   128                           ;initializer for _year
   129   0022E2  07E4               	dw	2020
   130                           
   131                           ;initializer for _day
   132   0022E4  0001               	dw	1
   133                           
   134                           ;initializer for _test_mode
   135   0022E6  0001               	dw	1
   136   000000                     _LATHbits	set	3968
   137   000000                     _TRISHbits	set	3976
   138   000000                     _T0CON0bits	set	4053
   139   000000                     _T0CON1bits	set	4054
   140   000000                     _CM1CON1bits	set	3793
   141   000000                     _PORTAbits	set	3977
   142   000000                     _PORTGbits	set	3983
   143   000000                     _PIE0bits	set	3625
   144   000000                     _DAC1CON0bits	set	3782
   145   000000                     _LATAbits	set	3961
   146   000000                     _LATGbits	set	3967
   147   000000                     _TRISAbits	set	3969
   148   000000                     _TRISGbits	set	3975
   149   000000                     _TRISEbits	set	3973
   150   000000                     _TRISCbits	set	3971
   151   000000                     _TRISBbits	set	3970
   152   000000                     _TRISFbits	set	3974
   153   000000                     _TMR0L	set	4051
   154   000000                     _TMR0H	set	4052
   155   000000                     _INTCONbits	set	4082
   156   000000                     _PORTBbits	set	3978
   157   000000                     _PORTFbits	set	3982
   158   000000                     _LATEbits	set	3965
   159   000000                     _LATCbits	set	3963
   160   000000                     _LATBbits	set	3962
   161   000000                     _LATFbits	set	3966
   162   000000                     _CM1CON0bits	set	3792
   163   000000                     _CM1NCHbits	set	3794
   164   000000                     _DAC1CON1bits	set	3783
   165   000000                     _ADREFbits	set	3928
   166   000000                     _CM1PCHbits	set	3795
   167   000000                     _PIE2bits	set	3627
   168   000000                     _PIR0bits	set	3635
   169   000000                     _ANSELAbits	set	3730
   170   000000                     _ADPCH	set	3935
   171   000000                     _ADRESH	set	3940
   172   000000                     _ADCON0bits	set	3936
   173                           
   174                           	psect	smallconst
   175   000E00                     __psmallconst:
   176                           	callstack 0
   177   000E00  00                 	db	0
   178   000E01                     STR_9:
   179                           
   180                           ; BSR set to: 0
   181   000E01  25                 	db	37
   182   000E02  30                 	db	48	;'0'
   183   000E03  31                 	db	49	;'1'
   184   000E04  75                 	db	117	;'u'
   185   000E05  00                 	db	0
   186   000E06                     STR_10:
   187                           
   188                           ; BSR set to: 0
   189   000E06  25                 	db	37
   190   000E07  30                 	db	48	;'0'
   191   000E08  32                 	db	50	;'2'
   192   000E09  75                 	db	117	;'u'
   193   000E0A  00                 	db	0
   194   000E0B                     STR_11:
   195                           
   196                           ; BSR set to: 0
   197   000E0B  25                 	db	37
   198   000E0C  30                 	db	48	;'0'
   199   000E0D  33                 	db	51	;'3'
   200   000E0E  75                 	db	117	;'u'
   201   000E0F  00                 	db	0
   202   000E10                     STR_3:
   203                           
   204                           ; BSR set to: 0
   205   000E10  57                 	db	87	;'W'
   206   000E11  45                 	db	69	;'E'
   207   000E12  44                 	db	68	;'D'
   208   000E13  00                 	db	0
   209   000E14                     STR_2:
   210                           
   211                           ; BSR set to: 0
   212   000E14  54                 	db	84	;'T'
   213   000E15  55                 	db	85	;'U'
   214   000E16  45                 	db	69	;'E'
   215   000E17  00                 	db	0
   216   000E18                     STR_5:
   217                           
   218                           ; BSR set to: 0
   219   000E18  46                 	db	70	;'F'
   220   000E19  52                 	db	82	;'R'
   221   000E1A  49                 	db	73	;'I'
   222   000E1B  00                 	db	0
   223   000E1C                     STR_1:
   224                           
   225                           ; BSR set to: 0
   226   000E1C  4D                 	db	77	;'M'
   227   000E1D  4F                 	db	79	;'O'
   228   000E1E  4E                 	db	78	;'N'
   229   000E1F  00                 	db	0
   230   000E20                     STR_7:
   231                           
   232                           ; BSR set to: 0
   233   000E20  53                 	db	83	;'S'
   234   000E21  55                 	db	85	;'U'
   235   000E22  4E                 	db	78	;'N'
   236   000E23  00                 	db	0
   237   000E24                     STR_6:
   238                           
   239                           ; BSR set to: 0
   240   000E24  53                 	db	83	;'S'
   241   000E25  41                 	db	65	;'A'
   242   000E26  54                 	db	84	;'T'
   243   000E27  00                 	db	0
   244   000E28                     STR_4:
   245                           
   246                           ; BSR set to: 0
   247   000E28  54                 	db	84	;'T'
   248   000E29  48                 	db	72	;'H'
   249   000E2A  55                 	db	85	;'U'
   250   000E2B  00                 	db	0
   251   000E2C                     STR_8:
   252                           
   253                           ; BSR set to: 0
   254   000E2C  25                 	db	37
   255   000E2D  75                 	db	117	;'u'
   256   000E2E  00                 	db	0
   257   000E2F  00                 	db	0	; dummy byte at the end
   258   000000                     
   259                           ; #config settings
   260                           
   261                           	psect	cinit
   262   001FE0                     __pcinit:
   263                           	callstack 0
   264   001FE0                     start_initialization:
   265                           	callstack 0
   266   001FE0                     __initialization:
   267                           	callstack 0
   268                           
   269                           ; Initialize objects allocated to BANK0 (36 bytes)
   270                           ; load TBLPTR registers with __pidataBANK0
   271   001FE0  0EC4               	movlw	low __pidataBANK0
   272   001FE2  6EF6               	movwf	tblptrl,c
   273   001FE4  0E22               	movlw	high __pidataBANK0
   274   001FE6  6EF7               	movwf	tblptrh,c
   275   001FE8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   276   001FEA  6EF8               	movwf	tblptru,c
   277   001FEC  EE00  F0A8         	lfsr	0,__pdataBANK0
   278   001FF0  EE10 F024          	lfsr	1,36
   279   001FF4                     copy_data0:
   280   001FF4  0009               	tblrd		*+
   281   001FF6  CFF5 FFEE          	movff	tablat,postinc0
   282   001FFA  50E5               	movf	postdec1,w,c
   283   001FFC  50E1               	movf	fsr1l,w,c
   284   001FFE  E1FA               	bnz	copy_data0
   285                           
   286                           ; Initialize objects allocated to COMRAM (2 bytes)
   287                           ; load TBLPTR registers with __pidataCOMRAM
   288   002000  0E80               	movlw	low __pidataCOMRAM
   289   002002  6EF6               	movwf	tblptrl,c
   290   002004  0E23               	movlw	high __pidataCOMRAM
   291   002006  6EF7               	movwf	tblptrh,c
   292   002008  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   293   00200A  6EF8               	movwf	tblptru,c
   294   00200C  0009               	tblrd		*+	;fetch initializer
   295   00200E  CFF5 F059          	movff	tablat,__pdataCOMRAM
   296   002012  0009               	tblrd		*+	;fetch initializer
   297   002014  CFF5 F05A          	movff	tablat,__pdataCOMRAM+1
   298                           
   299                           ; Clear objects allocated to BANK1 (32 bytes)
   300   002018  EE01  F000         	lfsr	0,__pbssBANK1
   301   00201C  0E20               	movlw	32
   302   00201E                     clear_0:
   303   00201E  6AEE               	clrf	postinc0,c
   304   002020  06E8               	decf	wreg,f,c
   305   002022  E1FD               	bnz	clear_0
   306                           
   307                           ; Clear objects allocated to BANK0 (26 bytes)
   308   002024  EE00  F0CC         	lfsr	0,__pbssBANK0
   309   002028  0E1A               	movlw	26
   310   00202A                     clear_1:
   311   00202A  6AEE               	clrf	postinc0,c
   312   00202C  06E8               	decf	wreg,f,c
   313   00202E  E1FD               	bnz	clear_1
   314                           
   315                           ; Clear objects allocated to COMRAM (3 bytes)
   316   002030  6A58               	clrf	(__pbssCOMRAM+2)& (0+255),c
   317   002032  6A57               	clrf	(__pbssCOMRAM+1)& (0+255),c
   318   002034  6A56               	clrf	__pbssCOMRAM& (0+255),c
   319   002036                     end_of_initialization:
   320                           	callstack 0
   321   002036                     __end_of__initialization:
   322                           	callstack 0
   323   002036  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   324   002038  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   325   00203A  0100               	movlb	0
   326   00203C  EF7D  F009         	goto	_main	;jump to C main() function
   327                           
   328                           	psect	bssCOMRAM
   329   000056                     __pbssCOMRAM:
   330                           	callstack 0
   331   000056                     _month:
   332                           	callstack 0
   333   000056                     	ds	2
   334   000058                     _flags:
   335                           	callstack 0
   336   000058                     	ds	1
   337                           
   338                           	psect	dataCOMRAM
   339   000059                     __pdataCOMRAM:
   340                           	callstack 0
   341   000059                     _week_day:
   342                           	callstack 0
   343   000059                     	ds	2
   344                           
   345                           	psect	bssBANK0
   346   0000CC                     __pbssBANK0:
   347                           	callstack 0
   348   0000CC                     	ds	16
   349   0000DC                     _width:
   350                           	callstack 0
   351   0000DC                     	ds	2
   352   0000DE                     _prec:
   353                           	callstack 0
   354   0000DE                     	ds	2
   355   0000E0                     _hours:
   356                           	callstack 0
   357   0000E0                     	ds	2
   358   0000E2                     _minutes:
   359                           	callstack 0
   360   0000E2                     	ds	2
   361   0000E4                     _seconds:
   362                           	callstack 0
   363   0000E4                     	ds	2
   364                           
   365                           	psect	dataBANK0
   366   0000A8                     __pdataBANK0:
   367                           	callstack 0
   368   0000A8                     _month_days:
   369                           	callstack 0
   370   0000A8                     	ds	26
   371   0000C2                     main@F14262:
   372                           	callstack 0
   373   0000C2                     	ds	4
   374   0000C6                     _year:
   375                           	callstack 0
   376   0000C6                     	ds	2
   377   0000C8                     _day:
   378                           	callstack 0
   379   0000C8                     	ds	2
   380   0000CA                     _test_mode:
   381                           	callstack 0
   382   0000CA                     	ds	2
   383                           
   384                           	psect	bssBANK1
   385   000100                     __pbssBANK1:
   386                           	callstack 0
   387   000100                     _dbuf:
   388                           	callstack 0
   389   000100                     	ds	32
   390                           
   391                           	psect	cstackBANK0
   392   000060                     __pcstackBANK0:
   393                           	callstack 0
   394   000060                     ?_vfprintf:
   395                           	callstack 0
   396   000060                     vfprintf@fp:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x0
   400   000060                     	ds	2
   401   000062                     vfprintf@fmt:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x2
   405   000062                     	ds	2
   406   000064                     vfprintf@ap:
   407                           	callstack 0
   408                           
   409                           ; 2 bytes @ 0x4
   410   000064                     	ds	2
   411   000066                     vfprintf@cfmt:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x6
   415   000066                     	ds	2
   416   000068                     ?_sprintf:
   417                           	callstack 0
   418   000068                     sprintf@s:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0x8
   422   000068                     	ds	2
   423   00006A                     sprintf@fmt:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0xA
   427   00006A                     	ds	4
   428   00006E                     sprintf@ap:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0xE
   432   00006E                     	ds	2
   433   000070                     sprintf@f:
   434                           	callstack 0
   435                           
   436                           ; 11 bytes @ 0x10
   437   000070                     	ds	11
   438   00007B                     ADC2String@buf:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x1B
   442   00007B                     	ds	2
   443   00007D                     ADC2String@x:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x1D
   447   00007D                     	ds	2
   448   00007F                     ADC2String@leading_zeros:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x1F
   452   00007F                     	ds	2
   453   000081                     ??_main:
   454                           
   455                           ; 1 bytes @ 0x21
   456   000081                     	ds	2
   457   000083                     main@day_of_the_week:
   458                           	callstack 0
   459                           
   460                           ; 4 bytes @ 0x23
   461   000083                     	ds	4
   462   000087                     main@Yea:
   463                           	callstack 0
   464                           
   465                           ; 4 bytes @ 0x27
   466   000087                     	ds	4
   467   00008B                     main@ADC:
   468                           	callstack 0
   469                           
   470                           ; 3 bytes @ 0x2B
   471   00008B                     	ds	3
   472   00008E                     main@lst:
   473                           	callstack 0
   474                           
   475                           ; 16 bytes @ 0x2E
   476   00008E                     	ds	16
   477   00009E                     main@Sec:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x3E
   481   00009E                     	ds	2
   482   0000A0                     main@Min:
   483                           	callstack 0
   484                           
   485                           ; 2 bytes @ 0x40
   486   0000A0                     	ds	2
   487   0000A2                     main@Hou:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x42
   491   0000A2                     	ds	2
   492   0000A4                     main@Day:
   493                           	callstack 0
   494                           
   495                           ; 2 bytes @ 0x44
   496   0000A4                     	ds	2
   497   0000A6                     main@Mon:
   498                           	callstack 0
   499                           
   500                           ; 2 bytes @ 0x46
   501   0000A6                     	ds	2
   502                           
   503                           	psect	cstackCOMRAM
   504   000001                     __pcstackCOMRAM:
   505                           	callstack 0
   506   000001                     ??_increment_seconds:
   507   000001                     
   508                           ; 1 bytes @ 0x0
   509   000001                     	ds	2
   510   000003                     ??_HighISR:
   511                           
   512                           ; 1 bytes @ 0x2
   513   000003                     	ds	2
   514   000005                     ?_get_seconds:
   515                           	callstack 0
   516   000005                     ?_get_minutes:
   517                           	callstack 0
   518   000005                     ?_get_hours:
   519                           	callstack 0
   520   000005                     ?_get_day:
   521                           	callstack 0
   522   000005                     ?_get_month:
   523                           	callstack 0
   524   000005                     ?_get_year:
   525                           	callstack 0
   526   000005                     ?_ADC_getval:
   527                           	callstack 0
   528   000005                     ?_get_week_day:
   529                           	callstack 0
   530   000005                     ?_isdigit:
   531                           	callstack 0
   532   000005                     ?_isspace:
   533                           	callstack 0
   534   000005                     ?___wmul:
   535                           	callstack 0
   536   000005                     ?___lodiv:
   537                           	callstack 0
   538   000005                     ?___lomod:
   539                           	callstack 0
   540   000005                     LCD_sendnibble@number:
   541                           	callstack 0
   542   000005                     ___wmul@multiplier:
   543                           	callstack 0
   544   000005                     isdigit@c:
   545                           	callstack 0
   546   000005                     isspace@c:
   547                           	callstack 0
   548   000005                     fputc@c:
   549                           	callstack 0
   550   000005                     ___lodiv@dividend:
   551                           	callstack 0
   552   000005                     ___lomod@dividend:
   553                           	callstack 0
   554                           
   555                           ; 8 bytes @ 0x4
   556   000005                     	ds	1
   557   000006                     LCD_sendbyte@type:
   558                           	callstack 0
   559                           
   560                           ; 1 bytes @ 0x5
   561   000006                     	ds	1
   562   000007                     ??_isdigit:
   563   000007                     ??_isspace:
   564   000007                     LCD_sendbyte@Byte:
   565                           	callstack 0
   566   000007                     ADC_getval@tmpval:
   567                           	callstack 0
   568   000007                     ___wmul@multiplicand:
   569                           	callstack 0
   570   000007                     fputc@fp:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0x6
   574   000007                     	ds	1
   575   000008                     ??_LCD_Init:
   576   000008                     ??_LCD_clear:
   577   000008                     LCD_setline@line:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0x7
   581   000008                     	ds	1
   582   000009                     ??_fputc:
   583   000009                     _isspace$2047:
   584                           	callstack 0
   585   000009                     set_light@curr_hour:
   586                           	callstack 0
   587   000009                     ___wmul@product:
   588                           	callstack 0
   589                           
   590                           ; 2 bytes @ 0x8
   591   000009                     	ds	1
   592   00000A                     LCD_sendstring@strlst:
   593                           	callstack 0
   594                           
   595                           ; 2 bytes @ 0x9
   596   00000A                     	ds	1
   597   00000B                     ?_atoi:
   598                           	callstack 0
   599   00000B                     set_light@luminosity:
   600                           	callstack 0
   601   00000B                     atoi@s:
   602                           	callstack 0
   603                           
   604                           ; 2 bytes @ 0xA
   605   00000B                     	ds	1
   606   00000C                     ??_LCD_sendstring:
   607                           
   608                           ; 1 bytes @ 0xB
   609   00000C                     	ds	1
   610   00000D                     ??_atoi:
   611   00000D                     ___lodiv@divisor:
   612                           	callstack 0
   613   00000D                     ___lomod@divisor:
   614                           	callstack 0
   615                           
   616                           ; 8 bytes @ 0xC
   617   00000D                     	ds	1
   618   00000E                     LCD_sendstring@i:
   619                           	callstack 0
   620   00000E                     fputs@s:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0xD
   624   00000E                     	ds	2
   625   000010                     atoi@neg:
   626                           	callstack 0
   627   000010                     fputs@fp:
   628                           	callstack 0
   629                           
   630                           ; 2 bytes @ 0xF
   631   000010                     	ds	2
   632   000012                     fputs@c:
   633                           	callstack 0
   634   000012                     atoi@n:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0x11
   638   000012                     	ds	1
   639   000013                     fputs@i:
   640                           	callstack 0
   641                           
   642                           ; 2 bytes @ 0x12
   643   000013                     	ds	2
   644   000015                     ___lomod@counter:
   645                           	callstack 0
   646   000015                     pad@fp:
   647                           	callstack 0
   648   000015                     ___lodiv@quotient:
   649                           	callstack 0
   650                           
   651                           ; 8 bytes @ 0x14
   652   000015                     	ds	2
   653   000017                     pad@buf:
   654                           	callstack 0
   655                           
   656                           ; 2 bytes @ 0x16
   657   000017                     	ds	2
   658   000019                     pad@p:
   659                           	callstack 0
   660                           
   661                           ; 2 bytes @ 0x18
   662   000019                     	ds	2
   663   00001B                     ??_pad:
   664                           
   665                           ; 1 bytes @ 0x1A
   666   00001B                     	ds	1
   667   00001C                     pad@i:
   668                           	callstack 0
   669                           
   670                           ; 2 bytes @ 0x1B
   671   00001C                     	ds	1
   672   00001D                     ___lodiv@counter:
   673                           	callstack 0
   674                           
   675                           ; 1 bytes @ 0x1C
   676   00001D                     	ds	1
   677   00001E                     pad@w:
   678                           	callstack 0
   679                           
   680                           ; 2 bytes @ 0x1D
   681   00001E                     	ds	2
   682   000020                     utoa@fp:
   683                           	callstack 0
   684                           
   685                           ; 2 bytes @ 0x1F
   686   000020                     	ds	2
   687   000022                     utoa@d:
   688                           	callstack 0
   689                           
   690                           ; 8 bytes @ 0x21
   691   000022                     	ds	8
   692   00002A                     ??_utoa:
   693                           
   694                           ; 1 bytes @ 0x29
   695   00002A                     	ds	8
   696   000032                     utoa@p:
   697                           	callstack 0
   698                           
   699                           ; 2 bytes @ 0x31
   700   000032                     	ds	2
   701   000034                     utoa@w:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0x33
   705   000034                     	ds	2
   706   000036                     utoa@n:
   707                           	callstack 0
   708                           
   709                           ; 8 bytes @ 0x35
   710   000036                     	ds	8
   711   00003E                     utoa@i:
   712                           	callstack 0
   713                           
   714                           ; 2 bytes @ 0x3D
   715   00003E                     	ds	2
   716   000040                     vfpfcnvrt@fp:
   717                           	callstack 0
   718                           
   719                           ; 2 bytes @ 0x3F
   720   000040                     	ds	2
   721   000042                     vfpfcnvrt@fmt:
   722                           	callstack 0
   723                           
   724                           ; 2 bytes @ 0x41
   725   000042                     	ds	2
   726   000044                     vfpfcnvrt@ap:
   727                           	callstack 0
   728                           
   729                           ; 2 bytes @ 0x43
   730   000044                     	ds	2
   731   000046                     ??_vfpfcnvrt:
   732                           
   733                           ; 1 bytes @ 0x45
   734   000046                     	ds	4
   735   00004A                     vfpfcnvrt@convarg:
   736                           	callstack 0
   737                           
   738                           ; 8 bytes @ 0x49
   739   00004A                     	ds	8
   740   000052                     vfpfcnvrt@done:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x51
   744   000052                     	ds	2
   745   000054                     vfpfcnvrt@cp:
   746                           	callstack 0
   747                           
   748                           ; 2 bytes @ 0x53
   749   000054                     	ds	2
   750   000056                     
   751                           ; 1 bytes @ 0x55
   752 ;;
   753 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   754 ;;
   755 ;; *************** function _main *****************
   756 ;; Defined at:
   757 ;;		line 20 in file "main.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;		None
   760 ;; Auto vars:     Size  Location     Type
   761 ;;  lst            16   46[BANK0 ] PTR unsigned char [8]
   762 ;;		 -> STR_7(4), STR_6(4), STR_5(4), STR_4(4), 
   763 ;;		 -> STR_3(4), STR_2(4), STR_1(4), NULL(0), 
   764 ;;		 -> main@ADC(3), main@Yea(4), main@Mon(2), main@Day(2), 
   765 ;;		 -> main@Hou(2), main@Min(2), main@Sec(2), 
   766 ;;  Yea             4   39[BANK0 ] unsigned char [4]
   767 ;;  day_of_the_w    4   35[BANK0 ] unsigned char [4]
   768 ;;  ADC             3   43[BANK0 ] unsigned char [3]
   769 ;;  Mon             2   70[BANK0 ] unsigned char [2]
   770 ;;  Day             2   68[BANK0 ] unsigned char [2]
   771 ;;  Hou             2   66[BANK0 ] unsigned char [2]
   772 ;;  Min             2   64[BANK0 ] unsigned char [2]
   773 ;;  Sec             2   62[BANK0 ] unsigned char [2]
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   784 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   785 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   786 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   787 ;;Total ram usage:       39 bytes
   788 ;; Hardware stack levels required when called: 11
   789 ;; This function calls:
   790 ;;		_ADC2String
   791 ;;		_ADC_getval
   792 ;;		_ADC_init
   793 ;;		_Interrupts_init
   794 ;;		_LCD_Init
   795 ;;		_LCD_clear
   796 ;;		_LCD_sendstring
   797 ;;		_Light_init
   798 ;;		_Timer0_init
   799 ;;		_get_day
   800 ;;		_get_hours
   801 ;;		_get_minutes
   802 ;;		_get_month
   803 ;;		_get_seconds
   804 ;;		_get_week_day
   805 ;;		_get_year
   806 ;;		_set_light
   807 ;; This function is called by:
   808 ;;		Startup code after reset
   809 ;; This function uses a non-reentrant model
   810 ;;
   811                           
   812                           	psect	text0
   813   0012FA                     __ptext0:
   814                           	callstack 0
   815   0012FA                     _main:
   816                           	callstack 20
   817   0012FA                     
   818                           ;main.c: 23:     Timer0_init();
   819   0012FA  ECBD  F010         	call	_Timer0_init	;wreg free
   820   0012FE                     
   821                           ;main.c: 24:     Interrupts_init();
   822   0012FE  EC9A  F011         	call	_Interrupts_init	;wreg free
   823   001302                     
   824                           ;main.c: 25:     LCD_Init();
   825   001302  EC69  F00F         	call	_LCD_Init	;wreg free
   826   001306                     
   827                           ;main.c: 26:     ADC_init();
   828   001306  EC86  F011         	call	_ADC_init	;wreg free
   829   00130A                     
   830                           ;main.c: 27:     Light_init();
   831   00130A  ECBE  F011         	call	_Light_init	;wreg free
   832   00130E                     
   833                           ;main.c: 29:     char Sec[2];;main.c: 30:     char Min[2];;main.c: 31:     char Hou[2];;
      +                          main.c: 32:     char Day[2];;main.c: 33:     char Mon[2];;main.c: 34:     char Yea[4];;m
      +                          ain.c: 35:     char ADC[3];;main.c: 36:     char day_of_the_week[] = {"MON","TUE","WED",
      +                          "THU","FRI","SAT","SUN"};
   834   00130E  C0C2  F083         	movff	main@F14262,main@day_of_the_week
   835   001312  C0C3  F084         	movff	main@F14262+1,main@day_of_the_week+1
   836   001316  C0C4  F085         	movff	main@F14262+2,main@day_of_the_week+2
   837   00131A  C0C5  F086         	movff	main@F14262+3,main@day_of_the_week+3
   838   00131E                     l2946:
   839                           
   840                           ;main.c: 38:         LCD_clear();
   841   00131E  EC01  F011         	call	_LCD_clear	;wreg free
   842   001322                     
   843                           ;main.c: 40:         ADC2String(Sec, get_seconds(), 2);
   844   001322  0E9E               	movlw	low main@Sec
   845   001324  0100               	movlb	0	; () banked
   846   001326  6F7B               	movwf	ADC2String@buf& (0+255),b
   847   001328  0E00               	movlw	high main@Sec
   848   00132A  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
   849   00132C  ECA5  F011         	call	_get_seconds	;wreg free
   850   001330  C005  F07D         	movff	?_get_seconds,ADC2String@x
   851   001334  C006  F07E         	movff	?_get_seconds+1,ADC2String@x+1
   852   001338  0E00               	movlw	0
   853   00133A  0100               	movlb	0	; () banked
   854   00133C  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   855   00133E  0E02               	movlw	2
   856   001340  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
   857   001342  ECB8  F00E         	call	_ADC2String	;wreg free
   858   001346                     
   859                           ;main.c: 41:         ADC2String(Min, get_minutes(), 2);
   860   001346  0EA0               	movlw	low main@Min
   861   001348  0100               	movlb	0	; () banked
   862   00134A  6F7B               	movwf	ADC2String@buf& (0+255),b
   863   00134C  0E00               	movlw	high main@Min
   864   00134E  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
   865   001350  ECAF  F011         	call	_get_minutes	;wreg free
   866   001354  C005  F07D         	movff	?_get_minutes,ADC2String@x
   867   001358  C006  F07E         	movff	?_get_minutes+1,ADC2String@x+1
   868   00135C  0E00               	movlw	0
   869   00135E  0100               	movlb	0	; () banked
   870   001360  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   871   001362  0E02               	movlw	2
   872   001364  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
   873   001366  ECB8  F00E         	call	_ADC2String	;wreg free
   874   00136A                     
   875                           ;main.c: 42:         ADC2String(Hou, get_hours(), 2);
   876   00136A  0EA2               	movlw	low main@Hou
   877   00136C  0100               	movlb	0	; () banked
   878   00136E  6F7B               	movwf	ADC2String@buf& (0+255),b
   879   001370  0E00               	movlw	high main@Hou
   880   001372  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
   881   001374  ECB4  F011         	call	_get_hours	;wreg free
   882   001378  C005  F07D         	movff	?_get_hours,ADC2String@x
   883   00137C  C006  F07E         	movff	?_get_hours+1,ADC2String@x+1
   884   001380  0E00               	movlw	0
   885   001382  0100               	movlb	0	; () banked
   886   001384  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   887   001386  0E02               	movlw	2
   888   001388  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
   889   00138A  ECB8  F00E         	call	_ADC2String	;wreg free
   890   00138E                     
   891                           ;main.c: 43:         ADC2String(Day, get_day(), 2);
   892   00138E  0EA4               	movlw	low main@Day
   893   001390  0100               	movlb	0	; () banked
   894   001392  6F7B               	movwf	ADC2String@buf& (0+255),b
   895   001394  0E00               	movlw	high main@Day
   896   001396  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
   897   001398  ECB9  F011         	call	_get_day	;wreg free
   898   00139C  C005  F07D         	movff	?_get_day,ADC2String@x
   899   0013A0  C006  F07E         	movff	?_get_day+1,ADC2String@x+1
   900   0013A4  0E00               	movlw	0
   901   0013A6  0100               	movlb	0	; () banked
   902   0013A8  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   903   0013AA  0E02               	movlw	2
   904   0013AC  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
   905   0013AE  ECB8  F00E         	call	_ADC2String	;wreg free
   906   0013B2                     
   907                           ;main.c: 44:         ADC2String(Mon, get_month()+1, 2);
   908   0013B2  0EA6               	movlw	low main@Mon
   909   0013B4  0100               	movlb	0	; () banked
   910   0013B6  6F7B               	movwf	ADC2String@buf& (0+255),b
   911   0013B8  0E00               	movlw	high main@Mon
   912   0013BA  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
   913   0013BC  ECAA  F011         	call	_get_month	;wreg free
   914   0013C0  0E01               	movlw	1
   915   0013C2  2405               	addwf	?_get_month^0,w,c
   916   0013C4  0100               	movlb	0	; () banked
   917   0013C6  6F7D               	movwf	ADC2String@x& (0+255),b
   918   0013C8  0E00               	movlw	0
   919   0013CA  2006               	addwfc	(?_get_month+1)^0,w,c
   920   0013CC  6F7E               	movwf	(ADC2String@x+1)& (0+255),b
   921   0013CE  0E00               	movlw	0
   922   0013D0  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   923   0013D2  0E02               	movlw	2
   924   0013D4  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
   925   0013D6  ECB8  F00E         	call	_ADC2String	;wreg free
   926   0013DA                     
   927                           ;main.c: 45:         ADC2String(Yea, get_year(), 4);
   928   0013DA  0E87               	movlw	low main@Yea
   929   0013DC  0100               	movlb	0	; () banked
   930   0013DE  6F7B               	movwf	ADC2String@buf& (0+255),b
   931   0013E0  0E00               	movlw	high main@Yea
   932   0013E2  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
   933   0013E4  ECA0  F011         	call	_get_year	;wreg free
   934   0013E8  C005  F07D         	movff	?_get_year,ADC2String@x
   935   0013EC  C006  F07E         	movff	?_get_year+1,ADC2String@x+1
   936   0013F0  0E00               	movlw	0
   937   0013F2  0100               	movlb	0	; () banked
   938   0013F4  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   939   0013F6  0E04               	movlw	4
   940   0013F8  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
   941   0013FA  ECB8  F00E         	call	_ADC2String	;wreg free
   942   0013FE                     
   943                           ;main.c: 46:         ADC2String(ADC, ADC_getval(), 3);
   944   0013FE  0E8B               	movlw	low main@ADC
   945   001400  0100               	movlb	0	; () banked
   946   001402  6F7B               	movwf	ADC2String@buf& (0+255),b
   947   001404  0E00               	movlw	high main@ADC
   948   001406  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
   949   001408  EC21  F011         	call	_ADC_getval	;wreg free
   950   00140C  C005  F07D         	movff	?_ADC_getval,ADC2String@x
   951   001410  C006  F07E         	movff	?_ADC_getval+1,ADC2String@x+1
   952   001414  0E00               	movlw	0
   953   001416  0100               	movlb	0	; () banked
   954   001418  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   955   00141A  0E03               	movlw	3
   956   00141C  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
   957   00141E  ECB8  F00E         	call	_ADC2String	;wreg free
   958   001422                     
   959                           ;main.c: 48:         char *lst[8] = {get_week_day(),Day,Mon,Yea,Hou,Min,Sec,ADC};
   960   001422  EE20  F08E         	lfsr	2,main@lst
   961   001426  0E0F               	movlw	15
   962   001428                     u2281:
   963   001428  6ADE               	clrf	postinc2,c
   964   00142A  06E8               	decf	wreg,f,c
   965   00142C  E2FD               	bc	u2281
   966   00142E  EC7C  F00D         	call	_get_week_day	;wreg free
   967   001432  C005  F08E         	movff	?_get_week_day,main@lst
   968   001436  C006  F08F         	movff	?_get_week_day+1,main@lst+1
   969   00143A  0EA4               	movlw	low main@Day
   970   00143C  0100               	movlb	0	; () banked
   971   00143E  6F90               	movwf	(main@lst+2)& (0+255),b
   972   001440  0E00               	movlw	high main@Day
   973   001442  6F91               	movwf	(main@lst+3)& (0+255),b
   974   001444                     
   975                           ; BSR set to: 0
   976   001444  0EA6               	movlw	low main@Mon
   977   001446  6F92               	movwf	(main@lst+4)& (0+255),b
   978   001448  0E00               	movlw	high main@Mon
   979   00144A  6F93               	movwf	(main@lst+5)& (0+255),b
   980   00144C                     
   981                           ; BSR set to: 0
   982   00144C  0E87               	movlw	low main@Yea
   983   00144E  6F94               	movwf	(main@lst+6)& (0+255),b
   984   001450  0E00               	movlw	high main@Yea
   985   001452  6F95               	movwf	(main@lst+7)& (0+255),b
   986   001454                     
   987                           ; BSR set to: 0
   988   001454  0EA2               	movlw	low main@Hou
   989   001456  6F96               	movwf	(main@lst+8)& (0+255),b
   990   001458  0E00               	movlw	high main@Hou
   991   00145A  6F97               	movwf	(main@lst+9)& (0+255),b
   992   00145C                     
   993                           ; BSR set to: 0
   994   00145C  0EA0               	movlw	low main@Min
   995   00145E  6F98               	movwf	(main@lst+10)& (0+255),b
   996   001460  0E00               	movlw	high main@Min
   997   001462  6F99               	movwf	(main@lst+11)& (0+255),b
   998   001464                     
   999                           ; BSR set to: 0
  1000   001464  0E9E               	movlw	low main@Sec
  1001   001466  6F9A               	movwf	(main@lst+12)& (0+255),b
  1002   001468  0E00               	movlw	high main@Sec
  1003   00146A  6F9B               	movwf	(main@lst+13)& (0+255),b
  1004   00146C                     
  1005                           ; BSR set to: 0
  1006   00146C  0E8B               	movlw	low main@ADC
  1007   00146E  6F9C               	movwf	(main@lst+14)& (0+255),b
  1008   001470  0E00               	movlw	high main@ADC
  1009   001472  6F9D               	movwf	(main@lst+15)& (0+255),b
  1010   001474                     
  1011                           ; BSR set to: 0
  1012                           ;main.c: 49:         LCD_sendstring(lst);
  1013   001474  0E8E               	movlw	low main@lst
  1014   001476  6E0A               	movwf	LCD_sendstring@strlst^0,c
  1015   001478  0E00               	movlw	high main@lst
  1016   00147A  6E0B               	movwf	(LCD_sendstring@strlst+1)^0,c
  1017   00147C  EC5F  F00A         	call	_LCD_sendstring	;wreg free
  1018   001480                     
  1019                           ;main.c: 51:         set_light(get_hours(),ADC_getval());
  1020   001480  ECB4  F011         	call	_get_hours	;wreg free
  1021   001484  C005  F009         	movff	?_get_hours,set_light@curr_hour
  1022   001488  C006  F00A         	movff	?_get_hours+1,set_light@curr_hour+1
  1023   00148C  EC21  F011         	call	_ADC_getval	;wreg free
  1024   001490  C005  F00B         	movff	?_ADC_getval,set_light@luminosity
  1025   001494  C006  F00C         	movff	?_ADC_getval+1,set_light@luminosity+1
  1026   001498  EC73  F010         	call	_set_light	;wreg free
  1027   00149C                     
  1028                           ;main.c: 52:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1029   00149C  0E09               	movlw	9
  1030   00149E  0100               	movlb	0	; () banked
  1031   0014A0  6F82               	movwf	(??_main+1)& (0+255),b
  1032   0014A2  0E1E               	movlw	30
  1033   0014A4  6F81               	movwf	??_main& (0+255),b
  1034   0014A6  0EE4               	movlw	228
  1035   0014A8                     u2297:
  1036   0014A8  2EE8               	decfsz	wreg,f,c
  1037   0014AA  D7FE               	bra	u2297
  1038   0014AC  2F81               	decfsz	??_main& (0+255),f,b
  1039   0014AE  D7FC               	bra	u2297
  1040   0014B0  2F82               	decfsz	(??_main+1)& (0+255),f,b
  1041   0014B2  D7FA               	bra	u2297
  1042   0014B4  F000               	nop	
  1043   0014B6  EF8F  F009         	goto	l2946
  1044   0014BA  EF2F  F000         	goto	start
  1045   0014BE                     __end_of_main:
  1046                           	callstack 0
  1047                           
  1048 ;; *************** function _set_light *****************
  1049 ;; Defined at:
  1050 ;;		line 8 in file "light_manager.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;  curr_hour       2    8[COMRAM] unsigned int 
  1053 ;;  luminosity      2   10[COMRAM] unsigned int 
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;		None
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg, status,2, status,0
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1065 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1068 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1069 ;;Total ram usage:        4 bytes
  1070 ;; Hardware stack levels used: 1
  1071 ;; Hardware stack levels required when called: 2
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text1
  1080   0020E6                     __ptext1:
  1081                           	callstack 0
  1082   0020E6                     _set_light:
  1083                           	callstack 28
  1084   0020E6                     
  1085                           ;light_manager.c: 9:     if(curr_hour >= 1 && curr_hour < 5){
  1086   0020E6  5009               	movf	set_light@curr_hour^0,w,c
  1087   0020E8  100A               	iorwf	(set_light@curr_hour+1)^0,w,c
  1088   0020EA  B4D8               	btfsc	status,2,c
  1089   0020EC  EF7A  F010         	goto	u1681
  1090   0020F0  EF7C  F010         	goto	u1680
  1091   0020F4                     u1681:
  1092   0020F4  EF8A  F010         	goto	l2460
  1093   0020F8                     u1680:
  1094   0020F8  500A               	movf	(set_light@curr_hour+1)^0,w,c
  1095   0020FA  E107               	bnz	u1691
  1096   0020FC  0E05               	movlw	5
  1097   0020FE  5C09               	subwf	set_light@curr_hour^0,w,c
  1098   002100  B0D8               	btfsc	status,0,c
  1099   002102  EF85  F010         	goto	u1691
  1100   002106  EF87  F010         	goto	u1690
  1101   00210A                     u1691:
  1102   00210A  EF8A  F010         	goto	l2460
  1103   00210E                     u1690:
  1104   00210E                     
  1105                           ;light_manager.c: 10:         LATHbits.LATH3 = 0;
  1106   00210E  9680               	bcf	128,3,c	;volatile
  1107                           
  1108                           ;light_manager.c: 11:         return;
  1109   002110  EF99  F010         	goto	l359
  1110   002114                     l2460:
  1111                           
  1112                           ;light_manager.c: 13:     if(luminosity < 10){
  1113   002114  500C               	movf	(set_light@luminosity+1)^0,w,c
  1114   002116  E107               	bnz	u1701
  1115   002118  0E0A               	movlw	10
  1116   00211A  5C0B               	subwf	set_light@luminosity^0,w,c
  1117   00211C  B0D8               	btfsc	status,0,c
  1118   00211E  EF93  F010         	goto	u1701
  1119   002122  EF95  F010         	goto	u1700
  1120   002126                     u1701:
  1121   002126  EF98  F010         	goto	l360
  1122   00212A                     u1700:
  1123   00212A                     
  1124                           ;light_manager.c: 14:         LATHbits.LATH3 = 1;
  1125   00212A  8680               	bsf	128,3,c	;volatile
  1126                           
  1127                           ;light_manager.c: 15:     }else{
  1128   00212C  EF99  F010         	goto	l359
  1129   002130                     l360:
  1130                           
  1131                           ;light_manager.c: 16:         LATHbits.LATH3 = 0;
  1132   002130  9680               	bcf	128,3,c	;volatile
  1133   002132                     l359:
  1134   002132  0012               	return		;funcret
  1135   002134                     __end_of_set_light:
  1136                           	callstack 0
  1137                           
  1138 ;; *************** function _get_year *****************
  1139 ;; Defined at:
  1140 ;;		line 121 in file "timers.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  2    4[COMRAM] unsigned int 
  1147 ;; Registers used:
  1148 ;;		None
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1154 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1158 ;;Total ram usage:        2 bytes
  1159 ;; Hardware stack levels used: 1
  1160 ;; Hardware stack levels required when called: 2
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text2
  1169   002340                     __ptext2:
  1170                           	callstack 0
  1171   002340                     _get_year:
  1172                           	callstack 28
  1173   002340                     
  1174                           ;timers.c: 122:     return year;
  1175   002340  C0C6  F005         	movff	_year,?_get_year
  1176   002344  C0C7  F006         	movff	_year+1,?_get_year+1
  1177   002348  0012               	return		;funcret
  1178   00234A                     __end_of_get_year:
  1179                           	callstack 0
  1180                           
  1181 ;; *************** function _get_week_day *****************
  1182 ;; Defined at:
  1183 ;;		line 100 in file "timers.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;		None
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;		None
  1188 ;; Return value:  Size  Location     Type
  1189 ;;                  2    4[COMRAM] PTR const unsigned char 
  1190 ;; Registers used:
  1191 ;;		wreg, status,2, status,0
  1192 ;; Tracked objects:
  1193 ;;		On entry : 0/0
  1194 ;;		On exit  : 0/0
  1195 ;;		Unchanged: 0/0
  1196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1197 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1200 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1201 ;;Total ram usage:        2 bytes
  1202 ;; Hardware stack levels used: 1
  1203 ;; Hardware stack levels required when called: 2
  1204 ;; This function calls:
  1205 ;;		Nothing
  1206 ;; This function is called by:
  1207 ;;		_main
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           	psect	text3
  1212   001AF8                     __ptext3:
  1213                           	callstack 0
  1214   001AF8                     _get_week_day:
  1215                           	callstack 28
  1216   001AF8                     
  1217                           ;timers.c: 101:     if(week_day == 0){
  1218   001AF8  5059               	movf	_week_day^0,w,c
  1219   001AFA  105A               	iorwf	(_week_day+1)^0,w,c
  1220   001AFC  A4D8               	btfss	status,2,c
  1221   001AFE  EF83  F00D         	goto	u1571
  1222   001B02  EF85  F00D         	goto	u1570
  1223   001B06                     u1571:
  1224   001B06  EF8B  F00D         	goto	l2390
  1225   001B0A                     u1570:
  1226   001B0A                     
  1227                           ;timers.c: 102:         return("MON");
  1228   001B0A  0E1C               	movlw	low STR_1
  1229   001B0C  6E05               	movwf	?_get_week_day^0,c
  1230   001B0E  0E0E               	movlw	high STR_1
  1231   001B10  6E06               	movwf	(?_get_week_day+1)^0,c
  1232   001B12  EFEA  F00D         	goto	l225
  1233   001B16                     l2390:
  1234   001B16  0459               	decf	_week_day^0,w,c
  1235   001B18  105A               	iorwf	(_week_day+1)^0,w,c
  1236   001B1A  A4D8               	btfss	status,2,c
  1237   001B1C  EF92  F00D         	goto	u1581
  1238   001B20  EF94  F00D         	goto	u1580
  1239   001B24                     u1581:
  1240   001B24  EF9A  F00D         	goto	l2398
  1241   001B28                     u1580:
  1242   001B28                     
  1243                           ;timers.c: 104:         return("TUE");
  1244   001B28  0E14               	movlw	low STR_2
  1245   001B2A  6E05               	movwf	?_get_week_day^0,c
  1246   001B2C  0E0E               	movlw	high STR_2
  1247   001B2E  6E06               	movwf	(?_get_week_day+1)^0,c
  1248   001B30  EFEA  F00D         	goto	l225
  1249   001B34                     l2398:
  1250   001B34  0E02               	movlw	2
  1251   001B36  1859               	xorwf	_week_day^0,w,c
  1252   001B38  105A               	iorwf	(_week_day+1)^0,w,c
  1253   001B3A  A4D8               	btfss	status,2,c
  1254   001B3C  EFA2  F00D         	goto	u1591
  1255   001B40  EFA4  F00D         	goto	u1590
  1256   001B44                     u1591:
  1257   001B44  EFAA  F00D         	goto	l2406
  1258   001B48                     u1590:
  1259   001B48                     
  1260                           ;timers.c: 106:         return("WED");
  1261   001B48  0E10               	movlw	low STR_3
  1262   001B4A  6E05               	movwf	?_get_week_day^0,c
  1263   001B4C  0E0E               	movlw	high STR_3
  1264   001B4E  6E06               	movwf	(?_get_week_day+1)^0,c
  1265   001B50  EFEA  F00D         	goto	l225
  1266   001B54                     l2406:
  1267   001B54  0E03               	movlw	3
  1268   001B56  1859               	xorwf	_week_day^0,w,c
  1269   001B58  105A               	iorwf	(_week_day+1)^0,w,c
  1270   001B5A  A4D8               	btfss	status,2,c
  1271   001B5C  EFB2  F00D         	goto	u1601
  1272   001B60  EFB4  F00D         	goto	u1600
  1273   001B64                     u1601:
  1274   001B64  EFBA  F00D         	goto	l2414
  1275   001B68                     u1600:
  1276   001B68                     
  1277                           ;timers.c: 108:         return("THU");
  1278   001B68  0E28               	movlw	low STR_4
  1279   001B6A  6E05               	movwf	?_get_week_day^0,c
  1280   001B6C  0E0E               	movlw	high STR_4
  1281   001B6E  6E06               	movwf	(?_get_week_day+1)^0,c
  1282   001B70  EFEA  F00D         	goto	l225
  1283   001B74                     l2414:
  1284   001B74  0E04               	movlw	4
  1285   001B76  1859               	xorwf	_week_day^0,w,c
  1286   001B78  105A               	iorwf	(_week_day+1)^0,w,c
  1287   001B7A  A4D8               	btfss	status,2,c
  1288   001B7C  EFC2  F00D         	goto	u1611
  1289   001B80  EFC4  F00D         	goto	u1610
  1290   001B84                     u1611:
  1291   001B84  EFCA  F00D         	goto	l2422
  1292   001B88                     u1610:
  1293   001B88                     
  1294                           ;timers.c: 110:         return("FRI");
  1295   001B88  0E18               	movlw	low STR_5
  1296   001B8A  6E05               	movwf	?_get_week_day^0,c
  1297   001B8C  0E0E               	movlw	high STR_5
  1298   001B8E  6E06               	movwf	(?_get_week_day+1)^0,c
  1299   001B90  EFEA  F00D         	goto	l225
  1300   001B94                     l2422:
  1301   001B94  0E05               	movlw	5
  1302   001B96  1859               	xorwf	_week_day^0,w,c
  1303   001B98  105A               	iorwf	(_week_day+1)^0,w,c
  1304   001B9A  A4D8               	btfss	status,2,c
  1305   001B9C  EFD2  F00D         	goto	u1621
  1306   001BA0  EFD4  F00D         	goto	u1620
  1307   001BA4                     u1621:
  1308   001BA4  EFDA  F00D         	goto	l2430
  1309   001BA8                     u1620:
  1310   001BA8                     
  1311                           ;timers.c: 112:         return("SAT");
  1312   001BA8  0E24               	movlw	low STR_6
  1313   001BAA  6E05               	movwf	?_get_week_day^0,c
  1314   001BAC  0E0E               	movlw	high STR_6
  1315   001BAE  6E06               	movwf	(?_get_week_day+1)^0,c
  1316   001BB0  EFEA  F00D         	goto	l225
  1317   001BB4                     l2430:
  1318   001BB4  0E06               	movlw	6
  1319   001BB6  1859               	xorwf	_week_day^0,w,c
  1320   001BB8  105A               	iorwf	(_week_day+1)^0,w,c
  1321   001BBA  A4D8               	btfss	status,2,c
  1322   001BBC  EFE2  F00D         	goto	u1631
  1323   001BC0  EFE4  F00D         	goto	u1630
  1324   001BC4                     u1631:
  1325   001BC4  EFEA  F00D         	goto	l232
  1326   001BC8                     u1630:
  1327   001BC8                     
  1328                           ;timers.c: 114:         return("SUN");
  1329   001BC8  0E20               	movlw	low STR_7
  1330   001BCA  6E05               	movwf	?_get_week_day^0,c
  1331   001BCC  0E0E               	movlw	high STR_7
  1332   001BCE  6E06               	movwf	(?_get_week_day+1)^0,c
  1333   001BD0  EFEA  F00D         	goto	l225
  1334   001BD4                     l232:
  1335   001BD4                     l225:
  1336   001BD4  0012               	return		;funcret
  1337   001BD6                     __end_of_get_week_day:
  1338                           	callstack 0
  1339                           
  1340 ;; *************** function _get_seconds *****************
  1341 ;; Defined at:
  1342 ;;		line 88 in file "timers.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  2    4[COMRAM] unsigned int 
  1349 ;; Registers used:
  1350 ;;		None
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1356 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1359 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1360 ;;Total ram usage:        2 bytes
  1361 ;; Hardware stack levels used: 1
  1362 ;; Hardware stack levels required when called: 2
  1363 ;; This function calls:
  1364 ;;		Nothing
  1365 ;; This function is called by:
  1366 ;;		_main
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text4
  1371   00234A                     __ptext4:
  1372                           	callstack 0
  1373   00234A                     _get_seconds:
  1374                           	callstack 28
  1375   00234A                     
  1376                           ;timers.c: 89:     return seconds;
  1377   00234A  C0E4  F005         	movff	_seconds,?_get_seconds
  1378   00234E  C0E5  F006         	movff	_seconds+1,?_get_seconds+1
  1379   002352  0012               	return		;funcret
  1380   002354                     __end_of_get_seconds:
  1381                           	callstack 0
  1382                           
  1383 ;; *************** function _get_month *****************
  1384 ;; Defined at:
  1385 ;;		line 118 in file "timers.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;		None
  1390 ;; Return value:  Size  Location     Type
  1391 ;;                  2    4[COMRAM] unsigned int 
  1392 ;; Registers used:
  1393 ;;		None
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1399 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1402 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1403 ;;Total ram usage:        2 bytes
  1404 ;; Hardware stack levels used: 1
  1405 ;; Hardware stack levels required when called: 2
  1406 ;; This function calls:
  1407 ;;		Nothing
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text5
  1414   002354                     __ptext5:
  1415                           	callstack 0
  1416   002354                     _get_month:
  1417                           	callstack 28
  1418   002354                     
  1419                           ;timers.c: 119:     return month;
  1420   002354  C056  F005         	movff	_month,?_get_month
  1421   002358  C057  F006         	movff	_month+1,?_get_month+1
  1422   00235C  0012               	return		;funcret
  1423   00235E                     __end_of_get_month:
  1424                           	callstack 0
  1425                           
  1426 ;; *************** function _get_minutes *****************
  1427 ;; Defined at:
  1428 ;;		line 91 in file "timers.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;		None
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  2    4[COMRAM] unsigned int 
  1435 ;; Registers used:
  1436 ;;		None
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1446 ;;Total ram usage:        2 bytes
  1447 ;; Hardware stack levels used: 1
  1448 ;; Hardware stack levels required when called: 2
  1449 ;; This function calls:
  1450 ;;		Nothing
  1451 ;; This function is called by:
  1452 ;;		_main
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           	psect	text6
  1457   00235E                     __ptext6:
  1458                           	callstack 0
  1459   00235E                     _get_minutes:
  1460                           	callstack 28
  1461   00235E                     
  1462                           ;timers.c: 92:     return minutes;
  1463   00235E  C0E2  F005         	movff	_minutes,?_get_minutes
  1464   002362  C0E3  F006         	movff	_minutes+1,?_get_minutes+1
  1465   002366  0012               	return		;funcret
  1466   002368                     __end_of_get_minutes:
  1467                           	callstack 0
  1468                           
  1469 ;; *************** function _get_hours *****************
  1470 ;; Defined at:
  1471 ;;		line 94 in file "timers.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  2    4[COMRAM] unsigned int 
  1478 ;; Registers used:
  1479 ;;		None
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1488 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1489 ;;Total ram usage:        2 bytes
  1490 ;; Hardware stack levels used: 1
  1491 ;; Hardware stack levels required when called: 2
  1492 ;; This function calls:
  1493 ;;		Nothing
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text7
  1500   002368                     __ptext7:
  1501                           	callstack 0
  1502   002368                     _get_hours:
  1503                           	callstack 28
  1504   002368                     
  1505                           ;timers.c: 95:     return hours;
  1506   002368  C0E0  F005         	movff	_hours,?_get_hours
  1507   00236C  C0E1  F006         	movff	_hours+1,?_get_hours+1
  1508   002370  0012               	return		;funcret
  1509   002372                     __end_of_get_hours:
  1510                           	callstack 0
  1511                           
  1512 ;; *************** function _get_day *****************
  1513 ;; Defined at:
  1514 ;;		line 97 in file "timers.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;		None
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  2    4[COMRAM] unsigned int 
  1521 ;; Registers used:
  1522 ;;		None
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1528 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1531 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1532 ;;Total ram usage:        2 bytes
  1533 ;; Hardware stack levels used: 1
  1534 ;; Hardware stack levels required when called: 2
  1535 ;; This function calls:
  1536 ;;		Nothing
  1537 ;; This function is called by:
  1538 ;;		_main
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text8
  1543   002372                     __ptext8:
  1544                           	callstack 0
  1545   002372                     _get_day:
  1546                           	callstack 28
  1547   002372                     
  1548                           ;timers.c: 98:     return day;
  1549   002372  C0C8  F005         	movff	_day,?_get_day
  1550   002376  C0C9  F006         	movff	_day+1,?_get_day+1
  1551   00237A  0012               	return		;funcret
  1552   00237C                     __end_of_get_day:
  1553                           	callstack 0
  1554                           
  1555 ;; *************** function _Timer0_init *****************
  1556 ;; Defined at:
  1557 ;;		line 17 in file "timers.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      void 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1575 ;;Total ram usage:        0 bytes
  1576 ;; Hardware stack levels used: 1
  1577 ;; Hardware stack levels required when called: 2
  1578 ;; This function calls:
  1579 ;;		Nothing
  1580 ;; This function is called by:
  1581 ;;		_main
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text9
  1586   00217A                     __ptext9:
  1587                           	callstack 0
  1588   00217A                     _Timer0_init:
  1589                           	callstack 28
  1590   00217A                     
  1591                           ;timers.c: 19:     T0CON1bits.T0CS=0b010;
  1592   00217A  50D6               	movf	214,w,c	;volatile
  1593   00217C  0B1F               	andlw	-225
  1594   00217E  0940               	iorlw	64
  1595   002180  6ED6               	movwf	214,c	;volatile
  1596   002182                     
  1597                           ;timers.c: 20:     T0CON1bits.T0ASYNC=1;
  1598   002182  88D6               	bsf	214,4,c	;volatile
  1599   002184                     
  1600                           ;timers.c: 21:     if(test_mode == 0){
  1601   002184  0100               	movlb	0	; () banked
  1602   002186  51CA               	movf	_test_mode& (0+255),w,b
  1603   002188  11CB               	iorwf	(_test_mode+1)& (0+255),w,b
  1604   00218A  A4D8               	btfss	status,2,c
  1605   00218C  EFCA  F010         	goto	u1521
  1606   002190  EFCC  F010         	goto	u1520
  1607   002194                     u1521:
  1608   002194  EFD6  F010         	goto	l2294
  1609   002198                     u1520:
  1610   002198                     
  1611                           ; BSR set to: 0
  1612                           ;timers.c: 22:         T0CON1bits.T0CKPS=0b1000;
  1613   002198  50D6               	movf	214,w,c	;volatile
  1614   00219A  0BF0               	andlw	-16
  1615   00219C  0908               	iorlw	8
  1616   00219E  6ED6               	movwf	214,c	;volatile
  1617                           
  1618                           ;timers.c: 23:         TMR0H=0b00001011;
  1619   0021A0  0E0B               	movlw	11
  1620   0021A2  6ED4               	movwf	212,c	;volatile
  1621                           
  1622                           ;timers.c: 24:         TMR0L=0b11011011;
  1623   0021A4  0EDB               	movlw	219
  1624   0021A6  6ED3               	movwf	211,c	;volatile
  1625                           
  1626                           ;timers.c: 25:     }else{
  1627   0021A8  EFDC  F010         	goto	l2296
  1628   0021AC                     l2294:
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;timers.c: 26:         T0CON1bits.T0CKPS=0;
  1632   0021AC  0EF0               	movlw	-16
  1633   0021AE  16D6               	andwf	214,f,c	;volatile
  1634                           
  1635                           ;timers.c: 27:         TMR0H=0b00000000;
  1636   0021B0  0E00               	movlw	0
  1637   0021B2  6ED4               	movwf	212,c	;volatile
  1638                           
  1639                           ;timers.c: 28:         TMR0L=0b00000000;
  1640   0021B4  0E00               	movlw	0
  1641   0021B6  6ED3               	movwf	211,c	;volatile
  1642   0021B8                     l2296:
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;timers.c: 30:     T0CON0bits.T016BIT=1;
  1646   0021B8  88D5               	bsf	213,4,c	;volatile
  1647   0021BA                     
  1648                           ; BSR set to: 0
  1649                           ;timers.c: 34:     T0CON0bits.T0EN=1;
  1650   0021BA  8ED5               	bsf	213,7,c	;volatile
  1651   0021BC                     
  1652                           ; BSR set to: 0
  1653   0021BC  0012               	return		;funcret
  1654   0021BE                     __end_of_Timer0_init:
  1655                           	callstack 0
  1656                           
  1657 ;; *************** function _Light_init *****************
  1658 ;; Defined at:
  1659 ;;		line 4 in file "light_manager.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;		None
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;		None
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  1    wreg      void 
  1666 ;; Registers used:
  1667 ;;		None
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1677 ;;Total ram usage:        0 bytes
  1678 ;; Hardware stack levels used: 1
  1679 ;; Hardware stack levels required when called: 2
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_main
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text10
  1688   00237C                     __ptext10:
  1689                           	callstack 0
  1690   00237C                     _Light_init:
  1691                           	callstack 28
  1692   00237C                     
  1693                           ;light_manager.c: 5:     TRISHbits.TRISH3 = 0;
  1694   00237C  9688               	bcf	136,3,c	;volatile
  1695   00237E  0012               	return		;funcret
  1696   002380                     __end_of_Light_init:
  1697                           	callstack 0
  1698                           
  1699 ;; *************** function _LCD_sendstring *****************
  1700 ;; Defined at:
  1701 ;;		line 137 in file "LCD.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;  strlst          2    9[COMRAM] PTR PTR unsigned char 
  1704 ;;		 -> main@lst(16), 
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;  i               2   13[COMRAM] int 
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1716 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1717 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1718 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1719 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1720 ;;Total ram usage:        6 bytes
  1721 ;; Hardware stack levels used: 1
  1722 ;; Hardware stack levels required when called: 6
  1723 ;; This function calls:
  1724 ;;		_LCD_sendbyte
  1725 ;;		_LCD_setline
  1726 ;; This function is called by:
  1727 ;;		_main
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text11
  1732   0014BE                     __ptext11:
  1733                           	callstack 0
  1734   0014BE                     _LCD_sendstring:
  1735                           	callstack 24
  1736   0014BE                     
  1737                           ;LCD.c: 137: void LCD_sendstring(char *strlst[8]);LCD.c: 138: { int i;;LCD.c: 139:      
      +                             for (i=0;i<8;i++){
  1738   0014BE  0E00               	movlw	0
  1739   0014C0  6E0F               	movwf	(LCD_sendstring@i+1)^0,c
  1740   0014C2  0E00               	movlw	0
  1741   0014C4  6E0E               	movwf	LCD_sendstring@i^0,c
  1742   0014C6                     l2442:
  1743                           
  1744                           ;LCD.c: 140:             LCD_setline(i);
  1745   0014C6  C00E  F008         	movff	LCD_sendstring@i,LCD_setline@line
  1746   0014CA  C00F  F009         	movff	LCD_sendstring@i+1,LCD_setline@line+1
  1747   0014CE  EC7D  F00C         	call	_LCD_setline	;wreg free
  1748                           
  1749                           ;LCD.c: 142:             while(*strlst[i] !=0){
  1750   0014D2  EF91  F00A         	goto	l2446
  1751   0014D6                     l2444:
  1752                           
  1753                           ;LCD.c: 143:                 LCD_sendbyte(*strlst[i]++,1);
  1754   0014D6  0E01               	movlw	1
  1755   0014D8  6E06               	movwf	LCD_sendbyte@type^0,c
  1756   0014DA  90D8               	bcf	status,0,c
  1757   0014DC  340E               	rlcf	LCD_sendstring@i^0,w,c
  1758   0014DE  6ED9               	movwf	fsr2l,c
  1759   0014E0  340F               	rlcf	(LCD_sendstring@i+1)^0,w,c
  1760   0014E2  6EDA               	movwf	fsr2h,c
  1761   0014E4  500A               	movf	LCD_sendstring@strlst^0,w,c
  1762   0014E6  26D9               	addwf	fsr2l,f,c
  1763   0014E8  500B               	movf	(LCD_sendstring@strlst+1)^0,w,c
  1764   0014EA  22DA               	addwfc	fsr2h,f,c
  1765   0014EC  CFDF F00C          	movff	indf2,??_LCD_sendstring
  1766   0014F0  0E01               	movlw	1
  1767   0014F2  26DE               	addwf	postinc2,f,c
  1768   0014F4  CFDF F00D          	movff	indf2,??_LCD_sendstring+1
  1769   0014F8  0E00               	movlw	0
  1770   0014FA  22DD               	addwfc	postdec2,f,c
  1771   0014FC  C00C  FFF6         	movff	??_LCD_sendstring,tblptrl
  1772   001500  C00D  FFF7         	movff	??_LCD_sendstring+1,tblptrh
  1773   001504  0E00               	movlw	low (__smallconst shr (0+16))
  1774   001506  6EF8               	movwf	tblptru,c
  1775   001508  0E0D               	movlw	(high __ramtop+-1)
  1776   00150A  64F7               	cpfsgt	tblptrh,c
  1777   00150C  D003               	bra	u1647
  1778   00150E  0008               	tblrd		*
  1779   001510  50F5               	movf	tablat,w,c
  1780   001512  D005               	bra	u1640
  1781   001514                     u1647:
  1782   001514  CFF6 FFE9          	movff	tblptrl,fsr0l
  1783   001518  CFF7 FFEA          	movff	tblptrh,fsr0h
  1784   00151C  50EF               	movf	indf0,w,c
  1785   00151E                     u1640:
  1786   00151E  EC74  F011         	call	_LCD_sendbyte
  1787   001522                     l2446:
  1788                           
  1789                           ;LCD.c: 142:             while(*strlst[i] !=0){
  1790   001522  90D8               	bcf	status,0,c
  1791   001524  340E               	rlcf	LCD_sendstring@i^0,w,c
  1792   001526  6ED9               	movwf	fsr2l,c
  1793   001528  340F               	rlcf	(LCD_sendstring@i+1)^0,w,c
  1794   00152A  6EDA               	movwf	fsr2h,c
  1795   00152C  500A               	movf	LCD_sendstring@strlst^0,w,c
  1796   00152E  26D9               	addwf	fsr2l,f,c
  1797   001530  500B               	movf	(LCD_sendstring@strlst+1)^0,w,c
  1798   001532  22DA               	addwfc	fsr2h,f,c
  1799   001534  CFDE F00C          	movff	postinc2,??_LCD_sendstring
  1800   001538  CFDD F00D          	movff	postdec2,??_LCD_sendstring+1
  1801   00153C  C00C  FFF6         	movff	??_LCD_sendstring,tblptrl
  1802   001540  C00D  FFF7         	movff	??_LCD_sendstring+1,tblptrh
  1803   001544  0E00               	movlw	low (__smallconst shr (0+16))
  1804   001546  6EF8               	movwf	tblptru,c
  1805   001548  0E0D               	movlw	(high __ramtop+-1)
  1806   00154A  64F7               	cpfsgt	tblptrh,c
  1807   00154C  D003               	bra	u1657
  1808   00154E  0008               	tblrd		*
  1809   001550  50F5               	movf	tablat,w,c
  1810   001552  D005               	bra	u1650
  1811   001554                     u1657:
  1812   001554  CFF6 FFE9          	movff	tblptrl,fsr0l
  1813   001558  CFF7 FFEA          	movff	tblptrh,fsr0h
  1814   00155C  50EF               	movf	indf0,w,c
  1815   00155E                     u1650:
  1816   00155E  0900               	iorlw	0
  1817   001560  A4D8               	btfss	status,2,c
  1818   001562  EFB5  F00A         	goto	u1661
  1819   001566  EFB7  F00A         	goto	u1660
  1820   00156A                     u1661:
  1821   00156A  EF6B  F00A         	goto	l2444
  1822   00156E                     u1660:
  1823   00156E                     
  1824                           ;LCD.c: 146:             LCD_sendbyte (0xC2,0);
  1825   00156E  0E00               	movlw	0
  1826   001570  6E06               	movwf	LCD_sendbyte@type^0,c
  1827   001572  0EC2               	movlw	194
  1828   001574  EC74  F011         	call	_LCD_sendbyte
  1829                           
  1830                           ;LCD.c: 147:             LCD_sendbyte (0b00111010,1);
  1831   001578  0E01               	movlw	1
  1832   00157A  6E06               	movwf	LCD_sendbyte@type^0,c
  1833   00157C  0E3A               	movlw	58
  1834   00157E  EC74  F011         	call	_LCD_sendbyte
  1835                           
  1836                           ;LCD.c: 148:             LCD_sendbyte (0xC5,0);
  1837   001582  0E00               	movlw	0
  1838   001584  6E06               	movwf	LCD_sendbyte@type^0,c
  1839   001586  0EC5               	movlw	197
  1840   001588  EC74  F011         	call	_LCD_sendbyte
  1841                           
  1842                           ;LCD.c: 149:             LCD_sendbyte (0b00101110,1);
  1843   00158C  0E01               	movlw	1
  1844   00158E  6E06               	movwf	LCD_sendbyte@type^0,c
  1845   001590  0E2E               	movlw	46
  1846   001592  EC74  F011         	call	_LCD_sendbyte
  1847                           
  1848                           ;LCD.c: 150:             LCD_sendbyte (0xC8,0);
  1849   001596  0E00               	movlw	0
  1850   001598  6E06               	movwf	LCD_sendbyte@type^0,c
  1851   00159A  0EC8               	movlw	200
  1852   00159C  EC74  F011         	call	_LCD_sendbyte
  1853                           
  1854                           ;LCD.c: 151:             LCD_sendbyte (0b00100000,1);
  1855   0015A0  0E01               	movlw	1
  1856   0015A2  6E06               	movwf	LCD_sendbyte@type^0,c
  1857   0015A4  0E20               	movlw	32
  1858   0015A6  EC74  F011         	call	_LCD_sendbyte
  1859                           
  1860                           ;LCD.c: 152:             LCD_sendbyte (0xC9,0);
  1861   0015AA  0E00               	movlw	0
  1862   0015AC  6E06               	movwf	LCD_sendbyte@type^0,c
  1863   0015AE  0EC9               	movlw	201
  1864   0015B0  EC74  F011         	call	_LCD_sendbyte
  1865                           
  1866                           ;LCD.c: 153:             LCD_sendbyte (0b00100000,1);
  1867   0015B4  0E01               	movlw	1
  1868   0015B6  6E06               	movwf	LCD_sendbyte@type^0,c
  1869   0015B8  0E20               	movlw	32
  1870   0015BA  EC74  F011         	call	_LCD_sendbyte
  1871                           
  1872                           ;LCD.c: 154:             LCD_sendbyte (0xCA,0);
  1873   0015BE  0E00               	movlw	0
  1874   0015C0  6E06               	movwf	LCD_sendbyte@type^0,c
  1875   0015C2  0ECA               	movlw	202
  1876   0015C4  EC74  F011         	call	_LCD_sendbyte
  1877                           
  1878                           ;LCD.c: 155:             LCD_sendbyte (0b00100000,1);
  1879   0015C8  0E01               	movlw	1
  1880   0015CA  6E06               	movwf	LCD_sendbyte@type^0,c
  1881   0015CC  0E20               	movlw	32
  1882   0015CE  EC74  F011         	call	_LCD_sendbyte
  1883                           
  1884                           ;LCD.c: 156:             LCD_sendbyte (0xCB,0);
  1885   0015D2  0E00               	movlw	0
  1886   0015D4  6E06               	movwf	LCD_sendbyte@type^0,c
  1887   0015D6  0ECB               	movlw	203
  1888   0015D8  EC74  F011         	call	_LCD_sendbyte
  1889                           
  1890                           ;LCD.c: 157:             LCD_sendbyte (0b00100000,1);
  1891   0015DC  0E01               	movlw	1
  1892   0015DE  6E06               	movwf	LCD_sendbyte@type^0,c
  1893   0015E0  0E20               	movlw	32
  1894   0015E2  EC74  F011         	call	_LCD_sendbyte
  1895                           
  1896                           ;LCD.c: 158:             LCD_sendbyte (0xCC,0);
  1897   0015E6  0E00               	movlw	0
  1898   0015E8  6E06               	movwf	LCD_sendbyte@type^0,c
  1899   0015EA  0ECC               	movlw	204
  1900   0015EC  EC74  F011         	call	_LCD_sendbyte
  1901                           
  1902                           ;LCD.c: 159:             LCD_sendbyte (0b00100000,1);
  1903   0015F0  0E01               	movlw	1
  1904   0015F2  6E06               	movwf	LCD_sendbyte@type^0,c
  1905   0015F4  0E20               	movlw	32
  1906   0015F6  EC74  F011         	call	_LCD_sendbyte
  1907                           
  1908                           ;LCD.c: 160:             LCD_sendbyte (0x88,0);
  1909   0015FA  0E00               	movlw	0
  1910   0015FC  6E06               	movwf	LCD_sendbyte@type^0,c
  1911   0015FE  0E88               	movlw	136
  1912   001600  EC74  F011         	call	_LCD_sendbyte
  1913                           
  1914                           ;LCD.c: 161:             LCD_sendbyte (0b00101111,1);
  1915   001604  0E01               	movlw	1
  1916   001606  6E06               	movwf	LCD_sendbyte@type^0,c
  1917   001608  0E2F               	movlw	47
  1918   00160A  EC74  F011         	call	_LCD_sendbyte
  1919                           
  1920                           ;LCD.c: 162:             LCD_sendbyte (0x8B,0);
  1921   00160E  0E00               	movlw	0
  1922   001610  6E06               	movwf	LCD_sendbyte@type^0,c
  1923   001612  0E8B               	movlw	139
  1924   001614  EC74  F011         	call	_LCD_sendbyte
  1925                           
  1926                           ;LCD.c: 163:             LCD_sendbyte (0b00101111,1);
  1927   001618  0E01               	movlw	1
  1928   00161A  6E06               	movwf	LCD_sendbyte@type^0,c
  1929   00161C  0E2F               	movlw	47
  1930   00161E  EC74  F011         	call	_LCD_sendbyte
  1931   001622                     
  1932                           ;LCD.c: 164:     }
  1933   001622  4A0E               	infsnz	LCD_sendstring@i^0,f,c
  1934   001624  2A0F               	incf	(LCD_sendstring@i+1)^0,f,c
  1935   001626  BE0F               	btfsc	(LCD_sendstring@i+1)^0,7,c
  1936   001628  EF1F  F00B         	goto	u1671
  1937   00162C  500F               	movf	(LCD_sendstring@i+1)^0,w,c
  1938   00162E  E109               	bnz	u1670
  1939   001630  0E08               	movlw	8
  1940   001632  5C0E               	subwf	LCD_sendstring@i^0,w,c
  1941   001634  A0D8               	btfss	status,0,c
  1942   001636  EF1F  F00B         	goto	u1671
  1943   00163A  EF21  F00B         	goto	u1670
  1944   00163E                     u1671:
  1945   00163E  EF63  F00A         	goto	l2442
  1946   001642                     u1670:
  1947   001642  0012               	return		;funcret
  1948   001644                     __end_of_LCD_sendstring:
  1949                           	callstack 0
  1950                           
  1951 ;; *************** function _LCD_setline *****************
  1952 ;; Defined at:
  1953 ;;		line 112 in file "LCD.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  line            2    7[COMRAM] int 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;		None
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      void 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0, cstack
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1967 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1970 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1971 ;;Total ram usage:        2 bytes
  1972 ;; Hardware stack levels used: 1
  1973 ;; Hardware stack levels required when called: 5
  1974 ;; This function calls:
  1975 ;;		_LCD_sendbyte
  1976 ;; This function is called by:
  1977 ;;		_LCD_sendstring
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text12
  1982   0018FA                     __ptext12:
  1983                           	callstack 0
  1984   0018FA                     _LCD_setline:
  1985                           	callstack 24
  1986   0018FA                     
  1987                           ;LCD.c: 112: void LCD_setline(int line);LCD.c: 113: {;LCD.c: 114:     if(line == 0){
  1988   0018FA  5008               	movf	LCD_setline@line^0,w,c
  1989   0018FC  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  1990   0018FE  A4D8               	btfss	status,2,c
  1991   001900  EF84  F00C         	goto	u1441
  1992   001904  EF86  F00C         	goto	u1440
  1993   001908                     u1441:
  1994   001908  EF8D  F00C         	goto	l2246
  1995   00190C                     u1440:
  1996   00190C                     
  1997                           ;LCD.c: 115:         LCD_sendbyte(0x80,0);
  1998   00190C  0E00               	movlw	0
  1999   00190E  6E06               	movwf	LCD_sendbyte@type^0,c
  2000   001910  0E80               	movlw	128
  2001   001912  EC74  F011         	call	_LCD_sendbyte
  2002                           
  2003                           ;LCD.c: 116:     }else if(line == 1){
  2004   001916  EF03  F00D         	goto	l321
  2005   00191A                     l2246:
  2006   00191A  0408               	decf	LCD_setline@line^0,w,c
  2007   00191C  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2008   00191E  A4D8               	btfss	status,2,c
  2009   001920  EF94  F00C         	goto	u1451
  2010   001924  EF96  F00C         	goto	u1450
  2011   001928                     u1451:
  2012   001928  EF9D  F00C         	goto	l2250
  2013   00192C                     u1450:
  2014   00192C                     
  2015                           ;LCD.c: 117:         LCD_sendbyte(0x86,0);
  2016   00192C  0E00               	movlw	0
  2017   00192E  6E06               	movwf	LCD_sendbyte@type^0,c
  2018   001930  0E86               	movlw	134
  2019   001932  EC74  F011         	call	_LCD_sendbyte
  2020                           
  2021                           ;LCD.c: 118:     }else if(line == 2){
  2022   001936  EF03  F00D         	goto	l321
  2023   00193A                     l2250:
  2024   00193A  0E02               	movlw	2
  2025   00193C  1808               	xorwf	LCD_setline@line^0,w,c
  2026   00193E  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2027   001940  A4D8               	btfss	status,2,c
  2028   001942  EFA5  F00C         	goto	u1461
  2029   001946  EFA7  F00C         	goto	u1460
  2030   00194A                     u1461:
  2031   00194A  EFAE  F00C         	goto	l2254
  2032   00194E                     u1460:
  2033   00194E                     
  2034                           ;LCD.c: 119:         LCD_sendbyte(0x89,0);
  2035   00194E  0E00               	movlw	0
  2036   001950  6E06               	movwf	LCD_sendbyte@type^0,c
  2037   001952  0E89               	movlw	137
  2038   001954  EC74  F011         	call	_LCD_sendbyte
  2039                           
  2040                           ;LCD.c: 120:     }else if(line == 3){
  2041   001958  EF03  F00D         	goto	l321
  2042   00195C                     l2254:
  2043   00195C  0E03               	movlw	3
  2044   00195E  1808               	xorwf	LCD_setline@line^0,w,c
  2045   001960  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2046   001962  A4D8               	btfss	status,2,c
  2047   001964  EFB6  F00C         	goto	u1471
  2048   001968  EFB8  F00C         	goto	u1470
  2049   00196C                     u1471:
  2050   00196C  EFBF  F00C         	goto	l2258
  2051   001970                     u1470:
  2052   001970                     
  2053                           ;LCD.c: 121:         LCD_sendbyte(0x8C,0);
  2054   001970  0E00               	movlw	0
  2055   001972  6E06               	movwf	LCD_sendbyte@type^0,c
  2056   001974  0E8C               	movlw	140
  2057   001976  EC74  F011         	call	_LCD_sendbyte
  2058                           
  2059                           ;LCD.c: 122:     }else if(line == 4){
  2060   00197A  EF03  F00D         	goto	l321
  2061   00197E                     l2258:
  2062   00197E  0E04               	movlw	4
  2063   001980  1808               	xorwf	LCD_setline@line^0,w,c
  2064   001982  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2065   001984  A4D8               	btfss	status,2,c
  2066   001986  EFC7  F00C         	goto	u1481
  2067   00198A  EFC9  F00C         	goto	u1480
  2068   00198E                     u1481:
  2069   00198E  EFD0  F00C         	goto	l2262
  2070   001992                     u1480:
  2071   001992                     
  2072                           ;LCD.c: 123:         LCD_sendbyte(0xC0,0);
  2073   001992  0E00               	movlw	0
  2074   001994  6E06               	movwf	LCD_sendbyte@type^0,c
  2075   001996  0EC0               	movlw	192
  2076   001998  EC74  F011         	call	_LCD_sendbyte
  2077                           
  2078                           ;LCD.c: 124:     }else if(line == 5){
  2079   00199C  EF03  F00D         	goto	l321
  2080   0019A0                     l2262:
  2081   0019A0  0E05               	movlw	5
  2082   0019A2  1808               	xorwf	LCD_setline@line^0,w,c
  2083   0019A4  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2084   0019A6  A4D8               	btfss	status,2,c
  2085   0019A8  EFD8  F00C         	goto	u1491
  2086   0019AC  EFDA  F00C         	goto	u1490
  2087   0019B0                     u1491:
  2088   0019B0  EFE1  F00C         	goto	l2266
  2089   0019B4                     u1490:
  2090   0019B4                     
  2091                           ;LCD.c: 125:         LCD_sendbyte(0xC3,0);
  2092   0019B4  0E00               	movlw	0
  2093   0019B6  6E06               	movwf	LCD_sendbyte@type^0,c
  2094   0019B8  0EC3               	movlw	195
  2095   0019BA  EC74  F011         	call	_LCD_sendbyte
  2096                           
  2097                           ;LCD.c: 126:     }else if(line == 6){
  2098   0019BE  EF03  F00D         	goto	l321
  2099   0019C2                     l2266:
  2100   0019C2  0E06               	movlw	6
  2101   0019C4  1808               	xorwf	LCD_setline@line^0,w,c
  2102   0019C6  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2103   0019C8  A4D8               	btfss	status,2,c
  2104   0019CA  EFE9  F00C         	goto	u1501
  2105   0019CE  EFEB  F00C         	goto	u1500
  2106   0019D2                     u1501:
  2107   0019D2  EFF2  F00C         	goto	l2270
  2108   0019D6                     u1500:
  2109   0019D6                     
  2110                           ;LCD.c: 127:         LCD_sendbyte(0xC6,0);
  2111   0019D6  0E00               	movlw	0
  2112   0019D8  6E06               	movwf	LCD_sendbyte@type^0,c
  2113   0019DA  0EC6               	movlw	198
  2114   0019DC  EC74  F011         	call	_LCD_sendbyte
  2115                           
  2116                           ;LCD.c: 128:     }else if(line == 7){
  2117   0019E0  EF03  F00D         	goto	l321
  2118   0019E4                     l2270:
  2119   0019E4  0E07               	movlw	7
  2120   0019E6  1808               	xorwf	LCD_setline@line^0,w,c
  2121   0019E8  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2122   0019EA  A4D8               	btfss	status,2,c
  2123   0019EC  EFFA  F00C         	goto	u1511
  2124   0019F0  EFFC  F00C         	goto	u1510
  2125   0019F4                     u1511:
  2126   0019F4  EF03  F00D         	goto	l315
  2127   0019F8                     u1510:
  2128   0019F8                     
  2129                           ;LCD.c: 129:         LCD_sendbyte(0xCD,0);
  2130   0019F8  0E00               	movlw	0
  2131   0019FA  6E06               	movwf	LCD_sendbyte@type^0,c
  2132   0019FC  0ECD               	movlw	205
  2133   0019FE  EC74  F011         	call	_LCD_sendbyte
  2134   001A02  EF03  F00D         	goto	l321
  2135   001A06                     l315:
  2136   001A06                     l321:
  2137   001A06  0012               	return		;funcret
  2138   001A08                     __end_of_LCD_setline:
  2139                           	callstack 0
  2140                           
  2141 ;; *************** function _LCD_clear *****************
  2142 ;; Defined at:
  2143 ;;		line 97 in file "LCD.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;		None
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;		None
  2148 ;; Return value:  Size  Location     Type
  2149 ;;                  1    wreg      void 
  2150 ;; Registers used:
  2151 ;;		wreg, status,2, status,0, cstack
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2159 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2160 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2161 ;;Total ram usage:        1 bytes
  2162 ;; Hardware stack levels used: 1
  2163 ;; Hardware stack levels required when called: 5
  2164 ;; This function calls:
  2165 ;;		_LCD_sendbyte
  2166 ;; This function is called by:
  2167 ;;		_main
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text13
  2172   002202                     __ptext13:
  2173                           	callstack 0
  2174   002202                     _LCD_clear:
  2175                           	callstack 25
  2176   002202                     
  2177                           ;LCD.c: 99:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2178   002202  0ED5               	movlw	213
  2179   002204                     u2307:
  2180   002204  2EE8               	decfsz	wreg,f,c
  2181   002206  D7FE               	bra	u2307
  2182   002208  F000               	nop	
  2183   00220A                     
  2184                           ;LCD.c: 100:     LCD_sendbyte(0b00000001,0);
  2185   00220A  0E00               	movlw	0
  2186   00220C  6E06               	movwf	LCD_sendbyte@type^0,c
  2187   00220E  0E01               	movlw	1
  2188   002210  EC74  F011         	call	_LCD_sendbyte
  2189   002214                     
  2190                           ;LCD.c: 102:     _delay((unsigned long)((2)*(64000000/4000.0)));
  2191   002214  0E2A               	movlw	42
  2192   002216  6E08               	movwf	??_LCD_clear^0,c
  2193   002218  0E8E               	movlw	142
  2194   00221A                     u2317:
  2195   00221A  2EE8               	decfsz	wreg,f,c
  2196   00221C  D7FE               	bra	u2317
  2197   00221E  2E08               	decfsz	??_LCD_clear^0,f,c
  2198   002220  D7FC               	bra	u2317
  2199                           
  2200                           ;LCD.c: 103:     LCD_sendbyte(0b00000110,0);
  2201   002222  0E00               	movlw	0
  2202   002224  6E06               	movwf	LCD_sendbyte@type^0,c
  2203   002226  0E06               	movlw	6
  2204   002228  EC74  F011         	call	_LCD_sendbyte
  2205                           
  2206                           ;LCD.c: 104:     LCD_sendbyte(0b00001110,0);
  2207   00222C  0E00               	movlw	0
  2208   00222E  6E06               	movwf	LCD_sendbyte@type^0,c
  2209   002230  0E0E               	movlw	14
  2210   002232  EC74  F011         	call	_LCD_sendbyte
  2211                           
  2212                           ;LCD.c: 105:     LCD_sendbyte(0b00001100,0);
  2213   002236  0E00               	movlw	0
  2214   002238  6E06               	movwf	LCD_sendbyte@type^0,c
  2215   00223A  0E0C               	movlw	12
  2216   00223C  EC74  F011         	call	_LCD_sendbyte
  2217   002240  0012               	return		;funcret
  2218   002242                     __end_of_LCD_clear:
  2219                           	callstack 0
  2220                           
  2221 ;; *************** function _LCD_Init *****************
  2222 ;; Defined at:
  2223 ;;		line 52 in file "LCD.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;		None
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;		None
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      void 
  2230 ;; Registers used:
  2231 ;;		wreg, status,2, status,0, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2240 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2241 ;;Total ram usage:        2 bytes
  2242 ;; Hardware stack levels used: 1
  2243 ;; Hardware stack levels required when called: 5
  2244 ;; This function calls:
  2245 ;;		_LCD_sendbyte
  2246 ;;		_LCD_sendnibble
  2247 ;; This function is called by:
  2248 ;;		_main
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252                           	psect	text14
  2253   001ED2                     __ptext14:
  2254                           	callstack 0
  2255   001ED2                     _LCD_Init:
  2256                           	callstack 25
  2257   001ED2                     
  2258                           ;LCD.c: 57:     TRISCbits.TRISC2 = 0;
  2259   001ED2  9483               	bcf	131,2,c	;volatile
  2260                           
  2261                           ;LCD.c: 58:     TRISCbits.TRISC6 = 0;
  2262   001ED4  9C83               	bcf	131,6,c	;volatile
  2263                           
  2264                           ;LCD.c: 59:     TRISBbits.TRISB3 = 0;
  2265   001ED6  9682               	bcf	130,3,c	;volatile
  2266                           
  2267                           ;LCD.c: 60:     TRISBbits.TRISB2 = 0;
  2268   001ED8  9482               	bcf	130,2,c	;volatile
  2269                           
  2270                           ;LCD.c: 61:     TRISEbits.TRISE3 = 0;
  2271   001EDA  9685               	bcf	133,3,c	;volatile
  2272                           
  2273                           ;LCD.c: 62:     TRISEbits.TRISE1 = 0;
  2274   001EDC  9285               	bcf	133,1,c	;volatile
  2275                           
  2276                           ;LCD.c: 65:     LATCbits.LATC6 = 0;
  2277   001EDE  9C7B               	bcf	123,6,c	;volatile
  2278                           
  2279                           ;LCD.c: 66:     LATCbits.LATC2 = 0;
  2280   001EE0  947B               	bcf	123,2,c	;volatile
  2281                           
  2282                           ;LCD.c: 67:     LATBbits.LATB3 = 0;
  2283   001EE2  967A               	bcf	122,3,c	;volatile
  2284                           
  2285                           ;LCD.c: 68:     LATBbits.LATB2 = 0;
  2286   001EE4  947A               	bcf	122,2,c	;volatile
  2287                           
  2288                           ;LCD.c: 69:     LATEbits.LATE3 = 0;
  2289   001EE6  967D               	bcf	125,3,c	;volatile
  2290                           
  2291                           ;LCD.c: 70:     LATEbits.LATE1 = 0;
  2292   001EE8  927D               	bcf	125,1,c	;volatile
  2293   001EEA                     
  2294                           ;LCD.c: 72:     _delay((unsigned long)((60)*(64000000/4000.0)));
  2295   001EEA  0E05               	movlw	5
  2296   001EEC  6E09               	movwf	(??_LCD_Init+1)^0,c
  2297   001EEE  0EDF               	movlw	223
  2298   001EF0  6E08               	movwf	??_LCD_Init^0,c
  2299   001EF2  0EBC               	movlw	188
  2300   001EF4                     u2327:
  2301   001EF4  2EE8               	decfsz	wreg,f,c
  2302   001EF6  D7FE               	bra	u2327
  2303   001EF8  2E08               	decfsz	??_LCD_Init^0,f,c
  2304   001EFA  D7FC               	bra	u2327
  2305   001EFC  2E09               	decfsz	(??_LCD_Init+1)^0,f,c
  2306   001EFE  D7FA               	bra	u2327
  2307   001F00                     
  2308                           ;LCD.c: 74:     LCD_sendnibble(0b0011);
  2309   001F00  0E03               	movlw	3
  2310   001F02  ECBC  F00F         	call	_LCD_sendnibble
  2311   001F06                     
  2312                           ;LCD.c: 75:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2313   001F06  0ED5               	movlw	213
  2314   001F08                     u2337:
  2315   001F08  2EE8               	decfsz	wreg,f,c
  2316   001F0A  D7FE               	bra	u2337
  2317   001F0C  F000               	nop	
  2318                           
  2319                           ;LCD.c: 77:     LCD_sendnibble(0b0010);
  2320   001F0E  0E02               	movlw	2
  2321   001F10  ECBC  F00F         	call	_LCD_sendnibble
  2322   001F14                     
  2323                           ;LCD.c: 78:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2324   001F14  0ED5               	movlw	213
  2325   001F16                     u2347:
  2326   001F16  2EE8               	decfsz	wreg,f,c
  2327   001F18  D7FE               	bra	u2347
  2328   001F1A  F000               	nop	
  2329   001F1C                     
  2330                           ;LCD.c: 80:     LCD_sendbyte(0b00101000,0);
  2331   001F1C  0E00               	movlw	0
  2332   001F1E  6E06               	movwf	LCD_sendbyte@type^0,c
  2333   001F20  0E28               	movlw	40
  2334   001F22  EC74  F011         	call	_LCD_sendbyte
  2335   001F26                     
  2336                           ;LCD.c: 81:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2337   001F26  0ED5               	movlw	213
  2338   001F28                     u2357:
  2339   001F28  2EE8               	decfsz	wreg,f,c
  2340   001F2A  D7FE               	bra	u2357
  2341   001F2C  F000               	nop	
  2342   001F2E                     
  2343                           ;LCD.c: 83:     LCD_sendbyte(0b00101000,0);
  2344   001F2E  0E00               	movlw	0
  2345   001F30  6E06               	movwf	LCD_sendbyte@type^0,c
  2346   001F32  0E28               	movlw	40
  2347   001F34  EC74  F011         	call	_LCD_sendbyte
  2348   001F38                     
  2349                           ;LCD.c: 84:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2350   001F38  0ED5               	movlw	213
  2351   001F3A                     u2367:
  2352   001F3A  2EE8               	decfsz	wreg,f,c
  2353   001F3C  D7FE               	bra	u2367
  2354   001F3E  F000               	nop	
  2355   001F40                     
  2356                           ;LCD.c: 86:     LCD_sendbyte(0b00000001,0);
  2357   001F40  0E00               	movlw	0
  2358   001F42  6E06               	movwf	LCD_sendbyte@type^0,c
  2359   001F44  0E01               	movlw	1
  2360   001F46  EC74  F011         	call	_LCD_sendbyte
  2361   001F4A                     
  2362                           ;LCD.c: 87:     _delay((unsigned long)((2)*(64000000/4000.0)));
  2363   001F4A  0E2A               	movlw	42
  2364   001F4C  6E08               	movwf	??_LCD_Init^0,c
  2365   001F4E  0E8E               	movlw	142
  2366   001F50                     u2377:
  2367   001F50  2EE8               	decfsz	wreg,f,c
  2368   001F52  D7FE               	bra	u2377
  2369   001F54  2E08               	decfsz	??_LCD_Init^0,f,c
  2370   001F56  D7FC               	bra	u2377
  2371   001F58                     
  2372                           ;LCD.c: 89:     LCD_sendbyte(0b00000110,0);
  2373   001F58  0E00               	movlw	0
  2374   001F5A  6E06               	movwf	LCD_sendbyte@type^0,c
  2375   001F5C  0E06               	movlw	6
  2376   001F5E  EC74  F011         	call	_LCD_sendbyte
  2377   001F62                     
  2378                           ;LCD.c: 91:     LCD_sendbyte(0b00001110,0);
  2379   001F62  0E00               	movlw	0
  2380   001F64  6E06               	movwf	LCD_sendbyte@type^0,c
  2381   001F66  0E0E               	movlw	14
  2382   001F68  EC74  F011         	call	_LCD_sendbyte
  2383   001F6C                     
  2384                           ;LCD.c: 92:     LCD_sendbyte(0b00001100,0);
  2385   001F6C  0E00               	movlw	0
  2386   001F6E  6E06               	movwf	LCD_sendbyte@type^0,c
  2387   001F70  0E0C               	movlw	12
  2388   001F72  EC74  F011         	call	_LCD_sendbyte
  2389   001F76  0012               	return		;funcret
  2390   001F78                     __end_of_LCD_Init:
  2391                           	callstack 0
  2392                           
  2393 ;; *************** function _LCD_sendbyte *****************
  2394 ;; Defined at:
  2395 ;;		line 39 in file "LCD.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  Byte            1    wreg     unsigned char 
  2398 ;;  type            1    5[COMRAM] unsigned char 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  Byte            1    6[COMRAM] unsigned char 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      void 
  2403 ;; Registers used:
  2404 ;;		wreg, status,2, status,0, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2410 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2413 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2414 ;;Total ram usage:        2 bytes
  2415 ;; Hardware stack levels used: 1
  2416 ;; Hardware stack levels required when called: 4
  2417 ;; This function calls:
  2418 ;;		_LCD_sendnibble
  2419 ;; This function is called by:
  2420 ;;		_LCD_Init
  2421 ;;		_LCD_clear
  2422 ;;		_LCD_setline
  2423 ;;		_LCD_sendstring
  2424 ;;		_LCD_scroll
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text15
  2429   0022E8                     __ptext15:
  2430                           	callstack 0
  2431   0022E8                     _LCD_sendbyte:
  2432                           	callstack 24
  2433                           
  2434                           ;incstack = 0
  2435                           ;LCD_sendbyte@Byte stored from wreg
  2436   0022E8  6E07               	movwf	LCD_sendbyte@Byte^0,c
  2437   0022EA                     
  2438                           ;LCD.c: 39: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 40: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  2439   0022EA  B006               	btfsc	LCD_sendbyte@type^0,0,c
  2440   0022EC  D002               	bra	u1425
  2441   0022EE  9C7B               	bcf	123,6,c	;volatile
  2442   0022F0  D001               	bra	u1426
  2443   0022F2                     u1425:
  2444   0022F2  8C7B               	bsf	123,6,c	;volatile
  2445   0022F4                     u1426:
  2446   0022F4                     
  2447                           ;LCD.c: 43:     LCD_sendnibble(Byte >> 4);
  2448   0022F4  3807               	swapf	LCD_sendbyte@Byte^0,w,c
  2449   0022F6  0B0F               	andlw	15
  2450   0022F8  ECBC  F00F         	call	_LCD_sendnibble
  2451   0022FC                     
  2452                           ;LCD.c: 44:     LCD_sendnibble(Byte);
  2453   0022FC  5007               	movf	LCD_sendbyte@Byte^0,w,c
  2454   0022FE  ECBC  F00F         	call	_LCD_sendnibble
  2455   002302                     
  2456                           ;LCD.c: 46:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  2457   002302  0EA0               	movlw	160
  2458   002304                     u2387:
  2459   002304  D000               	nop2	
  2460   002306  2EE8               	decfsz	wreg,f,c
  2461   002308  D7FD               	bra	u2387
  2462   00230A  0012               	return		;funcret
  2463   00230C                     __end_of_LCD_sendbyte:
  2464                           	callstack 0
  2465                           
  2466 ;; *************** function _LCD_sendnibble *****************
  2467 ;; Defined at:
  2468 ;;		line 21 in file "LCD.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;  number          1    wreg     unsigned char 
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;  number          1    4[COMRAM] unsigned char 
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  1    wreg      void 
  2475 ;; Registers used:
  2476 ;;		wreg, cstack
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2483 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2486 ;;Total ram usage:        1 bytes
  2487 ;; Hardware stack levels used: 1
  2488 ;; Hardware stack levels required when called: 3
  2489 ;; This function calls:
  2490 ;;		_LCD_E_TOG
  2491 ;; This function is called by:
  2492 ;;		_LCD_sendbyte
  2493 ;;		_LCD_Init
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           	psect	text16
  2498   001F78                     __ptext16:
  2499                           	callstack 0
  2500   001F78                     _LCD_sendnibble:
  2501                           	callstack 24
  2502                           
  2503                           ;incstack = 0
  2504                           ;LCD_sendnibble@number stored from wreg
  2505   001F78  6E05               	movwf	LCD_sendnibble@number^0,c
  2506   001F7A                     
  2507                           ;LCD.c: 21: void LCD_sendnibble(unsigned char number);LCD.c: 22: {;LCD.c: 25:     if(num
      +                          ber & 0b0001){ LATBbits.LATB3 = 1;}else{LATBbits.LATB3 = 0;}
  2508   001F7A  A005               	btfss	LCD_sendnibble@number^0,0,c
  2509   001F7C  EFC2  F00F         	goto	u1321
  2510   001F80  EFC4  F00F         	goto	u1320
  2511   001F84                     u1321:
  2512   001F84  EFC7  F00F         	goto	l286
  2513   001F88                     u1320:
  2514   001F88  867A               	bsf	122,3,c	;volatile
  2515   001F8A  EFC8  F00F         	goto	l2138
  2516   001F8E                     l286:
  2517   001F8E  967A               	bcf	122,3,c	;volatile
  2518   001F90                     l2138:
  2519                           
  2520                           ;LCD.c: 26:     if(number & 0b0010){ LATBbits.LATB2 = 1;}else{LATBbits.LATB2 = 0;}
  2521   001F90  A205               	btfss	LCD_sendnibble@number^0,1,c
  2522   001F92  EFCD  F00F         	goto	u1331
  2523   001F96  EFCF  F00F         	goto	u1330
  2524   001F9A                     u1331:
  2525   001F9A  EFD2  F00F         	goto	l288
  2526   001F9E                     u1330:
  2527   001F9E  847A               	bsf	122,2,c	;volatile
  2528   001FA0  EFD3  F00F         	goto	l2142
  2529   001FA4                     l288:
  2530   001FA4  947A               	bcf	122,2,c	;volatile
  2531   001FA6                     l2142:
  2532                           
  2533                           ;LCD.c: 27:     if(number & 0b0100){ LATEbits.LATE3 = 1;}else{LATEbits.LATE3 = 0;}
  2534   001FA6  A405               	btfss	LCD_sendnibble@number^0,2,c
  2535   001FA8  EFD8  F00F         	goto	u1341
  2536   001FAC  EFDA  F00F         	goto	u1340
  2537   001FB0                     u1341:
  2538   001FB0  EFDD  F00F         	goto	l290
  2539   001FB4                     u1340:
  2540   001FB4  867D               	bsf	125,3,c	;volatile
  2541   001FB6  EFDE  F00F         	goto	l2146
  2542   001FBA                     l290:
  2543   001FBA  967D               	bcf	125,3,c	;volatile
  2544   001FBC                     l2146:
  2545                           
  2546                           ;LCD.c: 28:     if(number & 0b1000){ LATEbits.LATE1 = 1;}else{LATEbits.LATE1 = 0;}
  2547   001FBC  A605               	btfss	LCD_sendnibble@number^0,3,c
  2548   001FBE  EFE3  F00F         	goto	u1351
  2549   001FC2  EFE5  F00F         	goto	u1350
  2550   001FC6                     u1351:
  2551   001FC6  EFE8  F00F         	goto	l292
  2552   001FCA                     u1350:
  2553   001FCA  827D               	bsf	125,1,c	;volatile
  2554   001FCC  EFE9  F00F         	goto	l2150
  2555   001FD0                     l292:
  2556   001FD0  927D               	bcf	125,1,c	;volatile
  2557   001FD2                     l2150:
  2558                           
  2559                           ;LCD.c: 30:     LCD_E_TOG();
  2560   001FD2  EC93  F011         	call	_LCD_E_TOG	;wreg free
  2561   001FD6                     
  2562                           ;LCD.c: 31:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  2563   001FD6  0E1A               	movlw	26
  2564   001FD8                     u2397:
  2565   001FD8  2EE8               	decfsz	wreg,f,c
  2566   001FDA  D7FE               	bra	u2397
  2567   001FDC  D000               	nop2	
  2568   001FDE  0012               	return		;funcret
  2569   001FE0                     __end_of_LCD_sendnibble:
  2570                           	callstack 0
  2571                           
  2572 ;; *************** function _LCD_E_TOG *****************
  2573 ;; Defined at:
  2574 ;;		line 8 in file "LCD.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;		None
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;		None
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2592 ;;Total ram usage:        0 bytes
  2593 ;; Hardware stack levels used: 1
  2594 ;; Hardware stack levels required when called: 2
  2595 ;; This function calls:
  2596 ;;		Nothing
  2597 ;; This function is called by:
  2598 ;;		_LCD_sendnibble
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text17
  2603   002326                     __ptext17:
  2604                           	callstack 0
  2605   002326                     _LCD_E_TOG:
  2606                           	callstack 24
  2607   002326                     
  2608                           ;LCD.c: 11:     LATCbits.LATC2 = 1;
  2609   002326  847B               	bsf	123,2,c	;volatile
  2610   002328                     
  2611                           ;LCD.c: 12:     _delay((unsigned long)((2)*(64000000/4000000.0)));
  2612   002328  0E0A               	movlw	10
  2613   00232A                     u2407:
  2614   00232A  2EE8               	decfsz	wreg,f,c
  2615   00232C  D7FE               	bra	u2407
  2616   00232E  D000               	nop2	
  2617   002330                     
  2618                           ;LCD.c: 14:     LATCbits.LATC2 = 0;
  2619   002330  947B               	bcf	123,2,c	;volatile
  2620   002332  0012               	return		;funcret
  2621   002334                     __end_of_LCD_E_TOG:
  2622                           	callstack 0
  2623                           
  2624 ;; *************** function _Interrupts_init *****************
  2625 ;; Defined at:
  2626 ;;		line 10 in file "interrupts.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;		None
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;		None
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      void 
  2633 ;; Registers used:
  2634 ;;		None
  2635 ;; Tracked objects:
  2636 ;;		On entry : 0/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;Total ram usage:        0 bytes
  2645 ;; Hardware stack levels used: 1
  2646 ;; Hardware stack levels required when called: 2
  2647 ;; This function calls:
  2648 ;;		Nothing
  2649 ;; This function is called by:
  2650 ;;		_main
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text18
  2655   002334                     __ptext18:
  2656                           	callstack 0
  2657   002334                     _Interrupts_init:
  2658                           	callstack 28
  2659   002334                     
  2660                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  2661   002334  8CF2               	bsf	242,6,c	;volatile
  2662                           
  2663                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  2664   002336  010E               	movlb	14	; () banked
  2665   002338  8B29               	bsf	41,5,b	;volatile
  2666                           
  2667                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  2668   00233A  812B               	bsf	43,0,b	;volatile
  2669                           
  2670                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  2671   00233C  8EF2               	bsf	242,7,c	;volatile
  2672   00233E                     
  2673                           ; BSR set to: 14
  2674   00233E  0012               	return		;funcret
  2675   002340                     __end_of_Interrupts_init:
  2676                           	callstack 0
  2677                           
  2678 ;; *************** function _ADC_init *****************
  2679 ;; Defined at:
  2680 ;;		line 9 in file "ADC.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;		None
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;		None
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, status,2
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2698 ;;Total ram usage:        0 bytes
  2699 ;; Hardware stack levels used: 1
  2700 ;; Hardware stack levels required when called: 2
  2701 ;; This function calls:
  2702 ;;		Nothing
  2703 ;; This function is called by:
  2704 ;;		_main
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text19
  2709   00230C                     __ptext19:
  2710                           	callstack 0
  2711   00230C                     _ADC_init:
  2712                           	callstack 28
  2713   00230C                     
  2714                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  2715   00230C  8681               	bsf	129,3,c	;volatile
  2716                           
  2717                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  2718   00230E  010E               	movlb	14	; () banked
  2719   002310  8792               	bsf	146,3,b	;volatile
  2720                           
  2721                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  2722   002312  010F               	movlb	15	; () banked
  2723   002314  9958               	bcf	88,4,b	;volatile
  2724   002316                     
  2725                           ; BSR set to: 15
  2726                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  2727   002316  0EFC               	movlw	-4
  2728   002318  1758               	andwf	88,f,b	;volatile
  2729                           
  2730                           ;ADC.c: 17:     ADPCH=0b11;
  2731   00231A  0E03               	movlw	3
  2732   00231C  6F5F               	movwf	95,b	;volatile
  2733   00231E                     
  2734                           ; BSR set to: 15
  2735                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  2736   00231E  9460               	bcf	96,2,c	;volatile
  2737   002320                     
  2738                           ; BSR set to: 15
  2739                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  2740   002320  8860               	bsf	96,4,c	;volatile
  2741   002322                     
  2742                           ; BSR set to: 15
  2743                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  2744   002322  8E60               	bsf	96,7,c	;volatile
  2745   002324                     
  2746                           ; BSR set to: 15
  2747   002324  0012               	return		;funcret
  2748   002326                     __end_of_ADC_init:
  2749                           	callstack 0
  2750                           
  2751 ;; *************** function _ADC_getval *****************
  2752 ;; Defined at:
  2753 ;;		line 23 in file "ADC.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;		None
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  tmpval          2    6[COMRAM] unsigned int 
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  2    4[COMRAM] unsigned int 
  2760 ;; Registers used:
  2761 ;;		wreg, status,2, status,0
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2767 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2768 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2770 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2771 ;;Total ram usage:        4 bytes
  2772 ;; Hardware stack levels used: 1
  2773 ;; Hardware stack levels required when called: 2
  2774 ;; This function calls:
  2775 ;;		Nothing
  2776 ;; This function is called by:
  2777 ;;		_main
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text20
  2782   002242                     __ptext20:
  2783                           	callstack 0
  2784   002242                     _ADC_getval:
  2785                           	callstack 28
  2786   002242                     
  2787                           ;ADC.c: 25:     unsigned int tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  2788   002242  8060               	bsf	96,0,c	;volatile
  2789   002244                     l261:
  2790   002244  B060               	btfsc	96,0,c	;volatile
  2791   002246  EF27  F011         	goto	u1561
  2792   00224A  EF29  F011         	goto	u1560
  2793   00224E                     u1561:
  2794   00224E  EF22  F011         	goto	l261
  2795   002252                     u1560:
  2796   002252                     
  2797                           ;ADC.c: 31:     tmpval = ADRESH;
  2798   002252  CF64 F007          	movff	3940,ADC_getval@tmpval	;volatile
  2799   002256  6A08               	clrf	(ADC_getval@tmpval+1)^0,c
  2800   002258                     
  2801                           ;ADC.c: 35:     tmpval = 255 - tmpval;
  2802   002258  5007               	movf	ADC_getval@tmpval^0,w,c
  2803   00225A  08FF               	sublw	255
  2804   00225C  6E07               	movwf	ADC_getval@tmpval^0,c
  2805   00225E  5008               	movf	(ADC_getval@tmpval+1)^0,w,c
  2806   002260  A0D8               	btfss	status,0,c
  2807   002262  2AE8               	incf	wreg,f,c
  2808   002264  0800               	sublw	0
  2809   002266  6E08               	movwf	(ADC_getval@tmpval+1)^0,c
  2810   002268                     
  2811                           ;ADC.c: 37:     return tmpval;
  2812   002268  C007  F005         	movff	ADC_getval@tmpval,?_ADC_getval
  2813   00226C  C008  F006         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  2814   002270  0012               	return		;funcret
  2815   002272                     __end_of_ADC_getval:
  2816                           	callstack 0
  2817                           
  2818 ;; *************** function _ADC2String *****************
  2819 ;; Defined at:
  2820 ;;		line 194 in file "LCD.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  buf             2   27[BANK0 ] PTR unsigned char 
  2823 ;;		 -> main@ADC(3), main@Yea(4), main@Mon(2), main@Day(2), 
  2824 ;;		 -> main@Hou(2), main@Min(2), main@Sec(2), 
  2825 ;;  x               2   29[BANK0 ] unsigned int 
  2826 ;;  leading_zero    2   31[BANK0 ] unsigned int 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;		None
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2838 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2841 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2842 ;;Total ram usage:        6 bytes
  2843 ;; Hardware stack levels used: 1
  2844 ;; Hardware stack levels required when called: 10
  2845 ;; This function calls:
  2846 ;;		_sprintf
  2847 ;; This function is called by:
  2848 ;;		_main
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           	psect	text21
  2853   001D70                     __ptext21:
  2854                           	callstack 0
  2855   001D70                     _ADC2String:
  2856                           	callstack 20
  2857   001D70                     
  2858                           ;LCD.c: 196:     if(leading_zeros == 0){
  2859   001D70  0100               	movlb	0	; () banked
  2860   001D72  517F               	movf	ADC2String@leading_zeros& (0+255),w,b
  2861   001D74  1180               	iorwf	(ADC2String@leading_zeros+1)& (0+255),w,b
  2862   001D76  A4D8               	btfss	status,2,c
  2863   001D78  EFC0  F00E         	goto	u2251
  2864   001D7C  EFC2  F00E         	goto	u2250
  2865   001D80                     u2251:
  2866   001D80  EFD2  F00E         	goto	l2924
  2867   001D84                     u2250:
  2868   001D84                     
  2869                           ; BSR set to: 0
  2870                           ;LCD.c: 197:     sprintf(buf, "%u",x);
  2871   001D84  C07B  F068         	movff	ADC2String@buf,sprintf@s
  2872   001D88  C07C  F069         	movff	ADC2String@buf+1,sprintf@s+1
  2873   001D8C  0E2C               	movlw	low STR_8
  2874   001D8E  6F6A               	movwf	sprintf@fmt& (0+255),b
  2875   001D90  0E0E               	movlw	high STR_8
  2876   001D92  6F6B               	movwf	(sprintf@fmt+1)& (0+255),b
  2877   001D94  C07D  F06C         	movff	ADC2String@x,?_sprintf+4
  2878   001D98  C07E  F06D         	movff	ADC2String@x+1,?_sprintf+5
  2879   001D9C  EC4A  F010         	call	_sprintf	;wreg free
  2880                           
  2881                           ;LCD.c: 198:     }else if(leading_zeros == 1){
  2882   001DA0  EF13  F00F         	goto	l348
  2883   001DA4                     l2924:
  2884                           
  2885                           ; BSR set to: 0
  2886   001DA4  057F               	decf	ADC2String@leading_zeros& (0+255),w,b
  2887   001DA6  1180               	iorwf	(ADC2String@leading_zeros+1)& (0+255),w,b
  2888   001DA8  A4D8               	btfss	status,2,c
  2889   001DAA  EFD9  F00E         	goto	u2261
  2890   001DAE  EFDB  F00E         	goto	u2260
  2891   001DB2                     u2261:
  2892   001DB2  EFEB  F00E         	goto	l2928
  2893   001DB6                     u2260:
  2894   001DB6                     
  2895                           ; BSR set to: 0
  2896                           ;LCD.c: 199:     sprintf(buf, "%01u",x);
  2897   001DB6  C07B  F068         	movff	ADC2String@buf,sprintf@s
  2898   001DBA  C07C  F069         	movff	ADC2String@buf+1,sprintf@s+1
  2899   001DBE  0E01               	movlw	low STR_9
  2900   001DC0  6F6A               	movwf	sprintf@fmt& (0+255),b
  2901   001DC2  0E0E               	movlw	high STR_9
  2902   001DC4  6F6B               	movwf	(sprintf@fmt+1)& (0+255),b
  2903   001DC6  C07D  F06C         	movff	ADC2String@x,?_sprintf+4
  2904   001DCA  C07E  F06D         	movff	ADC2String@x+1,?_sprintf+5
  2905   001DCE  EC4A  F010         	call	_sprintf	;wreg free
  2906                           
  2907                           ;LCD.c: 200:     }else if(leading_zeros == 2){
  2908   001DD2  EF13  F00F         	goto	l348
  2909   001DD6                     l2928:
  2910                           
  2911                           ; BSR set to: 0
  2912   001DD6  0E02               	movlw	2
  2913   001DD8  197F               	xorwf	ADC2String@leading_zeros& (0+255),w,b
  2914   001DDA  1180               	iorwf	(ADC2String@leading_zeros+1)& (0+255),w,b
  2915   001DDC  A4D8               	btfss	status,2,c
  2916   001DDE  EFF3  F00E         	goto	u2271
  2917   001DE2  EFF5  F00E         	goto	u2270
  2918   001DE6                     u2271:
  2919   001DE6  EF05  F00F         	goto	l2932
  2920   001DEA                     u2270:
  2921   001DEA                     
  2922                           ; BSR set to: 0
  2923                           ;LCD.c: 201:     sprintf(buf, "%02u",x);
  2924   001DEA  C07B  F068         	movff	ADC2String@buf,sprintf@s
  2925   001DEE  C07C  F069         	movff	ADC2String@buf+1,sprintf@s+1
  2926   001DF2  0E06               	movlw	low STR_10
  2927   001DF4  6F6A               	movwf	sprintf@fmt& (0+255),b
  2928   001DF6  0E0E               	movlw	high STR_10
  2929   001DF8  6F6B               	movwf	(sprintf@fmt+1)& (0+255),b
  2930   001DFA  C07D  F06C         	movff	ADC2String@x,?_sprintf+4
  2931   001DFE  C07E  F06D         	movff	ADC2String@x+1,?_sprintf+5
  2932   001E02  EC4A  F010         	call	_sprintf	;wreg free
  2933                           
  2934                           ;LCD.c: 202:     }else{sprintf(buf, "%03u",x);
  2935   001E06  EF13  F00F         	goto	l348
  2936   001E0A                     l2932:
  2937                           
  2938                           ; BSR set to: 0
  2939   001E0A  C07B  F068         	movff	ADC2String@buf,sprintf@s
  2940   001E0E  C07C  F069         	movff	ADC2String@buf+1,sprintf@s+1
  2941   001E12  0E0B               	movlw	low STR_11
  2942   001E14  6F6A               	movwf	sprintf@fmt& (0+255),b
  2943   001E16  0E0E               	movlw	high STR_11
  2944   001E18  6F6B               	movwf	(sprintf@fmt+1)& (0+255),b
  2945   001E1A  C07D  F06C         	movff	ADC2String@x,?_sprintf+4
  2946   001E1E  C07E  F06D         	movff	ADC2String@x+1,?_sprintf+5
  2947   001E22  EC4A  F010         	call	_sprintf	;wreg free
  2948   001E26                     l348:
  2949   001E26  0012               	return		;funcret
  2950   001E28                     __end_of_ADC2String:
  2951                           	callstack 0
  2952                           
  2953 ;; *************** function _sprintf *****************
  2954 ;; Defined at:
  2955 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  s               2    8[BANK0 ] PTR unsigned char 
  2958 ;;		 -> main@ADC(3), main@Yea(4), main@Mon(2), main@Day(2), 
  2959 ;;		 -> main@Hou(2), main@Min(2), main@Sec(2), 
  2960 ;;  fmt             2   10[BANK0 ] PTR const unsigned char 
  2961 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  f              11   16[BANK0 ] struct _IO_FILE
  2964 ;;  ap              2   14[BANK0 ] PTR void [1]
  2965 ;;		 -> ?_sprintf(2), 
  2966 ;;  ret             2    0        int 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  2    8[BANK0 ] int 
  2969 ;; Registers used:
  2970 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2976 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2977 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2979 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2980 ;;Total ram usage:       19 bytes
  2981 ;; Hardware stack levels used: 1
  2982 ;; Hardware stack levels required when called: 9
  2983 ;; This function calls:
  2984 ;;		_vfprintf
  2985 ;; This function is called by:
  2986 ;;		_ADC2String
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text22
  2991   002094                     __ptext22:
  2992                           	callstack 0
  2993   002094                     _sprintf:
  2994                           	callstack 20
  2995   002094  0E6C               	movlw	low (?_sprintf+4)
  2996   002096  0100               	movlb	0	; () banked
  2997   002098  6F6E               	movwf	sprintf@ap& (0+255),b
  2998   00209A  0E00               	movlw	high (?_sprintf+4)
  2999   00209C  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  3000   00209E  C068  F070         	movff	sprintf@s,sprintf@f
  3001   0020A2  C069  F071         	movff	sprintf@s+1,sprintf@f+1
  3002   0020A6                     
  3003                           ; BSR set to: 0
  3004   0020A6  0E00               	movlw	0
  3005   0020A8  6F74               	movwf	(sprintf@f+4)& (0+255),b
  3006   0020AA  0E00               	movlw	0
  3007   0020AC  6F73               	movwf	(sprintf@f+3)& (0+255),b
  3008   0020AE                     
  3009                           ; BSR set to: 0
  3010   0020AE  0E00               	movlw	0
  3011   0020B0  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  3012   0020B2  0E00               	movlw	0
  3013   0020B4  6F79               	movwf	(sprintf@f+9)& (0+255),b
  3014   0020B6                     
  3015                           ; BSR set to: 0
  3016   0020B6  0E70               	movlw	low sprintf@f
  3017   0020B8  6F60               	movwf	vfprintf@fp& (0+255),b
  3018   0020BA  0E00               	movlw	high sprintf@f
  3019   0020BC  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  3020   0020BE  C06A  F062         	movff	sprintf@fmt,vfprintf@fmt
  3021   0020C2  C06B  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  3022   0020C6  0E6E               	movlw	low sprintf@ap
  3023   0020C8  6F64               	movwf	vfprintf@ap& (0+255),b
  3024   0020CA  0E00               	movlw	high sprintf@ap
  3025   0020CC  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  3026   0020CE  EC20  F010         	call	_vfprintf	;wreg free
  3027   0020D2  0100               	movlb	0	; () banked
  3028   0020D4  5173               	movf	(sprintf@f+3)& (0+255),w,b
  3029   0020D6  2568               	addwf	sprintf@s& (0+255),w,b
  3030   0020D8  6ED9               	movwf	fsr2l,c
  3031   0020DA  5174               	movf	(sprintf@f+4)& (0+255),w,b
  3032   0020DC  2169               	addwfc	(sprintf@s+1)& (0+255),w,b
  3033   0020DE  6EDA               	movwf	fsr2h,c
  3034   0020E0  0E00               	movlw	0
  3035   0020E2  6EDF               	movwf	indf2,c
  3036   0020E4                     
  3037                           ; BSR set to: 0
  3038   0020E4  0012               	return		;funcret
  3039   0020E6                     __end_of_sprintf:
  3040                           	callstack 0
  3041                           
  3042 ;; *************** function _vfprintf *****************
  3043 ;; Defined at:
  3044 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  3047 ;;		 -> sprintf@f(11), 
  3048 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  3049 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  3050 ;;  ap              2    4[BANK0 ] PTR PTR void 
  3051 ;;		 -> sprintf@ap(2), 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  cfmt            2    6[BANK0 ] PTR unsigned char 
  3054 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  2    0[BANK0 ] int 
  3057 ;; Registers used:
  3058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3064 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3065 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3067 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3068 ;;Total ram usage:        8 bytes
  3069 ;; Hardware stack levels used: 1
  3070 ;; Hardware stack levels required when called: 8
  3071 ;; This function calls:
  3072 ;;		_vfpfcnvrt
  3073 ;; This function is called by:
  3074 ;;		_sprintf
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text23
  3079   002040                     __ptext23:
  3080                           	callstack 0
  3081   002040                     _vfprintf:
  3082                           	callstack 20
  3083   002040                     
  3084                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  3085   002040  C062  F066         	movff	vfprintf@fmt,vfprintf@cfmt
  3086   002044  C063  F067         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  3087                           
  3088                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  3089   002048  EF34  F010         	goto	l2902
  3090   00204C                     l2900:
  3091                           
  3092                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  3093   00204C  C060  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  3094   002050  C061  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  3095   002054  0E66               	movlw	low vfprintf@cfmt
  3096   002056  6E42               	movwf	vfpfcnvrt@fmt^0,c
  3097   002058  0E00               	movlw	high vfprintf@cfmt
  3098   00205A  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
  3099   00205C  C064  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  3100   002060  C065  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  3101   002064  EC18  F007         	call	_vfpfcnvrt	;wreg free
  3102   002068                     l2902:
  3103                           
  3104                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  3105   002068  C066  FFF6         	movff	vfprintf@cfmt,tblptrl
  3106   00206C  C067  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  3107   002070                     	if	0	;tblptru may be non-zero
  3108   002070                     	endif
  3109   002070                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3110   002070  0E00               	movlw	low (__mediumconst shr (0+16))
  3111   002072  6EF8               	movwf	tblptru,c
  3112   002074                     	endif
  3113   002074  0008               	tblrd		*
  3114   002076  50F5               	movf	tablat,w,c
  3115   002078  0900               	iorlw	0
  3116   00207A  A4D8               	btfss	status,2,c
  3117   00207C  EF42  F010         	goto	u2241
  3118   002080  EF44  F010         	goto	u2240
  3119   002084                     u2241:
  3120   002084  EF26  F010         	goto	l2900
  3121   002088                     u2240:
  3122   002088                     
  3123                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  3124   002088  0E00               	movlw	0
  3125   00208A  0100               	movlb	0	; () banked
  3126   00208C  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  3127   00208E  0E00               	movlw	0
  3128   002090  6F60               	movwf	?_vfprintf& (0+255),b
  3129   002092                     
  3130                           ; BSR set to: 0
  3131   002092  0012               	return		;funcret
  3132   002094                     __end_of_vfprintf:
  3133                           	callstack 0
  3134                           
  3135 ;; *************** function _vfpfcnvrt *****************
  3136 ;; Defined at:
  3137 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  3140 ;;		 -> sprintf@f(11), 
  3141 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  3142 ;;		 -> vfprintf@cfmt(2), 
  3143 ;;  ap              2   67[COMRAM] PTR PTR void 
  3144 ;;		 -> sprintf@ap(2), 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  convarg         8   73[COMRAM] struct .
  3147 ;;  cp              2   83[COMRAM] PTR unsigned char 
  3148 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  3149 ;;  done            2   81[COMRAM] int 
  3150 ;;  i               2    0        int 
  3151 ;;  c               1    0        unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3161 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3162 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3164 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3165 ;;Total ram usage:       22 bytes
  3166 ;; Hardware stack levels used: 1
  3167 ;; Hardware stack levels required when called: 7
  3168 ;; This function calls:
  3169 ;;		_atoi
  3170 ;;		_fputc
  3171 ;;		_isdigit
  3172 ;;		_utoa
  3173 ;; This function is called by:
  3174 ;;		_vfprintf
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text24
  3179   000E30                     __ptext24:
  3180                           	callstack 0
  3181   000E30                     _vfpfcnvrt:
  3182                           	callstack 20
  3183   000E30                     
  3184                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  3185   000E30  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3186   000E34  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3187   000E38  CFDE FFF6          	movff	postinc2,tblptrl
  3188   000E3C  CFDD FFF7          	movff	postdec2,tblptrh
  3189   000E40                     	if	0	;tblptru may be non-zero
  3190   000E40                     	endif
  3191   000E40                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3192   000E40  0E00               	movlw	low (__mediumconst shr (0+16))
  3193   000E42  6EF8               	movwf	tblptru,c
  3194   000E44                     	endif
  3195   000E44  0008               	tblrd		*
  3196   000E46  50F5               	movf	tablat,w,c
  3197   000E48  0A25               	xorlw	37
  3198   000E4A  A4D8               	btfss	status,2,c
  3199   000E4C  EF2A  F007         	goto	u2181
  3200   000E50  EF2C  F007         	goto	u2180
  3201   000E54                     u2181:
  3202   000E54  EF69  F008         	goto	l2884
  3203   000E58                     u2180:
  3204   000E58                     
  3205                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  3206   000E58  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3207   000E5C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3208   000E60  2ADE               	incf	postinc2,f,c
  3209   000E62  0E00               	movlw	0
  3210   000E64  22DD               	addwfc	postdec2,f,c
  3211   000E66                     
  3212                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  3213   000E66  0E00               	movlw	0
  3214   000E68  0100               	movlb	0	; () banked
  3215   000E6A  6FDD               	movwf	(_width+1)& (0+255),b
  3216   000E6C  0E00               	movlw	0
  3217   000E6E  6FDC               	movwf	_width& (0+255),b
  3218   000E70  C0DC  F058         	movff	_width,_flags
  3219   000E74                     
  3220                           ; BSR set to: 0
  3221                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  3222   000E74  69DE               	setf	_prec& (0+255),b
  3223   000E76  69DF               	setf	(_prec+1)& (0+255),b
  3224   000E78                     
  3225                           ; BSR set to: 0
  3226                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
  3227   000E78  0E00               	movlw	0
  3228   000E7A  6E53               	movwf	(vfpfcnvrt@done+1)^0,c
  3229   000E7C  0E00               	movlw	0
  3230   000E7E  6E52               	movwf	vfpfcnvrt@done^0,c
  3231                           
  3232                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
  3233   000E80  EF6E  F007         	goto	l2848
  3234   000E84                     l2838:
  3235                           
  3236                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
  3237   000E84  8258               	bsf	_flags^0,1,c
  3238   000E86                     
  3239                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
  3240   000E86  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3241   000E8A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3242   000E8E  2ADE               	incf	postinc2,f,c
  3243   000E90  0E00               	movlw	0
  3244   000E92  22DD               	addwfc	postdec2,f,c
  3245                           
  3246                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
  3247   000E94  EF6E  F007         	goto	l2848
  3248   000E98                     l2842:
  3249                           
  3250                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
  3251   000E98  0E00               	movlw	0
  3252   000E9A  6E53               	movwf	(vfpfcnvrt@done+1)^0,c
  3253   000E9C  0E01               	movlw	1
  3254   000E9E  6E52               	movwf	vfpfcnvrt@done^0,c
  3255                           
  3256                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
  3257   000EA0  EF6E  F007         	goto	l2848
  3258   000EA4                     l2846:
  3259   000EA4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3260   000EA8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3261   000EAC  CFDE FFF6          	movff	postinc2,tblptrl
  3262   000EB0  CFDD FFF7          	movff	postdec2,tblptrh
  3263   000EB4                     	if	0	;tblptru may be non-zero
  3264   000EB4                     	endif
  3265   000EB4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3266   000EB4  0E00               	movlw	low (__mediumconst shr (0+16))
  3267   000EB6  6EF8               	movwf	tblptru,c
  3268   000EB8                     	endif
  3269   000EB8  0008               	tblrd		*
  3270   000EBA  50F5               	movf	tablat,w,c
  3271   000EBC  6E46               	movwf	??_vfpfcnvrt^0,c
  3272   000EBE  6A47               	clrf	(??_vfpfcnvrt+1)^0,c
  3273                           
  3274                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3275                           ; Switch size 1, requested type "simple"
  3276                           ; Number of cases is 1, Range of values is 0 to 0
  3277                           ; switch strategies available:
  3278                           ; Name         Instructions Cycles
  3279                           ; simple_byte            4     3 (average)
  3280                           ;	Chosen strategy is simple_byte
  3281   000EC0  5047               	movf	(??_vfpfcnvrt+1)^0,w,c
  3282   000EC2  0A00               	xorlw	0	; case 0
  3283   000EC4  B4D8               	btfsc	status,2,c
  3284   000EC6  EF67  F007         	goto	l3046
  3285   000ECA  EF4C  F007         	goto	l2842
  3286   000ECE                     l3046:
  3287                           
  3288                           ; Switch size 1, requested type "simple"
  3289                           ; Number of cases is 1, Range of values is 48 to 48
  3290                           ; switch strategies available:
  3291                           ; Name         Instructions Cycles
  3292                           ; simple_byte            4     3 (average)
  3293                           ;	Chosen strategy is simple_byte
  3294   000ECE  5046               	movf	??_vfpfcnvrt^0,w,c
  3295   000ED0  0A30               	xorlw	48	; case 48
  3296   000ED2  B4D8               	btfsc	status,2,c
  3297   000ED4  EF42  F007         	goto	l2838
  3298   000ED8  EF4C  F007         	goto	l2842
  3299   000EDC                     l2848:
  3300                           
  3301                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
  3302   000EDC  5052               	movf	vfpfcnvrt@done^0,w,c
  3303   000EDE  1053               	iorwf	(vfpfcnvrt@done+1)^0,w,c
  3304   000EE0  B4D8               	btfsc	status,2,c
  3305   000EE2  EF75  F007         	goto	u2191
  3306   000EE6  EF77  F007         	goto	u2190
  3307   000EEA                     u2191:
  3308   000EEA  EF52  F007         	goto	l2846
  3309   000EEE                     u2190:
  3310   000EEE                     
  3311                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
  3312   000EEE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3313   000EF2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3314   000EF6  CFDE FFF6          	movff	postinc2,tblptrl
  3315   000EFA  CFDD FFF7          	movff	postdec2,tblptrh
  3316   000EFE                     	if	0	;tblptru may be non-zero
  3317   000EFE                     	endif
  3318   000EFE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3319   000EFE  0E00               	movlw	low (__mediumconst shr (0+16))
  3320   000F00  6EF8               	movwf	tblptru,c
  3321   000F02                     	endif
  3322   000F02  0008               	tblrd		*
  3323   000F04  50F5               	movf	tablat,w,c
  3324   000F06  0A2A               	xorlw	42
  3325   000F08  A4D8               	btfss	status,2,c
  3326   000F0A  EF89  F007         	goto	u2201
  3327   000F0E  EF8B  F007         	goto	u2200
  3328   000F12                     u2201:
  3329   000F12  EFB5  F007         	goto	l2858
  3330   000F16                     u2200:
  3331   000F16                     
  3332                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
  3333   000F16  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3334   000F1A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3335   000F1E  2ADE               	incf	postinc2,f,c
  3336   000F20  0E00               	movlw	0
  3337   000F22  22DD               	addwfc	postdec2,f,c
  3338                           
  3339                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
  3340   000F24  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3341   000F28  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3342   000F2C  CFDF F046          	movff	indf2,??_vfpfcnvrt
  3343   000F30  0E02               	movlw	2
  3344   000F32  26DE               	addwf	postinc2,f,c
  3345   000F34  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  3346   000F38  0E00               	movlw	0
  3347   000F3A  22DD               	addwfc	postdec2,f,c
  3348   000F3C  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  3349   000F40  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3350   000F44  CFDE F0DC          	movff	postinc2,_width
  3351   000F48  CFDD F0DD          	movff	postdec2,_width+1
  3352   000F4C                     
  3353                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
  3354   000F4C  0100               	movlb	0	; () banked
  3355   000F4E  BFDD               	btfsc	(_width+1)& (0+255),7,b
  3356   000F50  EFAE  F007         	goto	u2210
  3357   000F54  EFAC  F007         	goto	u2211
  3358   000F58                     u2211:
  3359   000F58  EFEA  F007         	goto	l2866
  3360   000F5C                     u2210:
  3361   000F5C                     
  3362                           ; BSR set to: 0
  3363                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
  3364   000F5C  8058               	bsf	_flags^0,0,c
  3365                           
  3366                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
  3367   000F5E  6DDC               	negf	_width& (0+255),b
  3368   000F60  1FDD               	comf	(_width+1)& (0+255),f,b
  3369   000F62  B0D8               	btfsc	status,0,c
  3370   000F64  2BDD               	incf	(_width+1)& (0+255),f,b
  3371   000F66  EFEA  F007         	goto	l2866
  3372   000F6A                     l2858:
  3373                           
  3374                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  3375   000F6A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3376   000F6E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3377   000F72  CFDE F00B          	movff	postinc2,atoi@s
  3378   000F76  CFDD F00C          	movff	postdec2,atoi@s+1
  3379   000F7A  EC22  F00B         	call	_atoi	;wreg free
  3380   000F7E  C00B  F0DC         	movff	?_atoi,_width
  3381   000F82  C00C  F0DD         	movff	?_atoi+1,_width+1
  3382                           
  3383                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  3384   000F86  EFCC  F007         	goto	l2864
  3385   000F8A                     l2860:
  3386                           
  3387                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  3388   000F8A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3389   000F8E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3390   000F92  2ADE               	incf	postinc2,f,c
  3391   000F94  0E00               	movlw	0
  3392   000F96  22DD               	addwfc	postdec2,f,c
  3393   000F98                     l2864:
  3394   000F98  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3395   000F9C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3396   000FA0  CFDE FFF6          	movff	postinc2,tblptrl
  3397   000FA4  CFDD FFF7          	movff	postdec2,tblptrh
  3398   000FA8                     	if	0	;tblptru may be non-zero
  3399   000FA8                     	endif
  3400   000FA8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3401   000FA8  0E00               	movlw	low (__mediumconst shr (0+16))
  3402   000FAA  6EF8               	movwf	tblptru,c
  3403   000FAC                     	endif
  3404   000FAC  0008               	tblrd		*
  3405   000FAE  CFF5 F046          	movff	tablat,??_vfpfcnvrt
  3406   000FB2  0ED0               	movlw	208
  3407   000FB4  2446               	addwf	??_vfpfcnvrt^0,w,c
  3408   000FB6  6E47               	movwf	(??_vfpfcnvrt+1)^0,c
  3409   000FB8  6A48               	clrf	(??_vfpfcnvrt+2)^0,c
  3410   000FBA  0EFF               	movlw	255
  3411   000FBC  2248               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  3412   000FBE  5048               	movf	(??_vfpfcnvrt+2)^0,w,c
  3413   000FC0  E109               	bnz	u2220
  3414   000FC2  0E0A               	movlw	10
  3415   000FC4  5C47               	subwf	(??_vfpfcnvrt+1)^0,w,c
  3416   000FC6  A0D8               	btfss	status,0,c
  3417   000FC8  EFE8  F007         	goto	u2221
  3418   000FCC  EFEA  F007         	goto	u2220
  3419   000FD0                     u2221:
  3420   000FD0  EFC5  F007         	goto	l2860
  3421   000FD4                     u2220:
  3422   000FD4                     l2866:
  3423                           
  3424                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1239:   if (0
  3425   000FD4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3426   000FD8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3427   000FDC  CFDE F054          	movff	postinc2,vfpfcnvrt@cp
  3428   000FE0  CFDD F055          	movff	postdec2,vfpfcnvrt@cp+1
  3429   000FE4  C054  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3430   000FE8  C055  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3431   000FEC                     	if	0	;tblptru may be non-zero
  3432   000FEC                     	endif
  3433   000FEC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3434   000FEC  0E00               	movlw	low (__mediumconst shr (0+16))
  3435   000FEE  6EF8               	movwf	tblptru,c
  3436   000FF0                     	endif
  3437   000FF0  0008               	tblrd		*
  3438   000FF2  50F5               	movf	tablat,w,c
  3439   000FF4  0A75               	xorlw	117
  3440   000FF6  A4D8               	btfss	status,2,c
  3441   000FF8  EF00  F008         	goto	u2231
  3442   000FFC  EF02  F008         	goto	u2230
  3443   001000                     u2231:
  3444   001000  EF60  F008         	goto	l2880
  3445   001004                     u2230:
  3446   001004                     
  3447                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1252:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1295:    convarg.llu 
      +                          = (unsigned long long)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (un
      +                          signed int)0));
  3448   001004  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3449   001008  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3450   00100C  CFDF F046          	movff	indf2,??_vfpfcnvrt
  3451   001010  0E02               	movlw	2
  3452   001012  26DE               	addwf	postinc2,f,c
  3453   001014  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  3454   001018  0E00               	movlw	0
  3455   00101A  22DD               	addwfc	postdec2,f,c
  3456   00101C  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  3457   001020  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3458   001024  CFDE F048          	movff	postinc2,??_vfpfcnvrt+2
  3459   001028  CFDD F049          	movff	postdec2,??_vfpfcnvrt+3
  3460   00102C  C048  F04A         	movff	??_vfpfcnvrt+2,vfpfcnvrt@convarg
  3461   001030  C049  F04B         	movff	??_vfpfcnvrt+3,vfpfcnvrt@convarg+1
  3462   001034  6A4C               	clrf	(vfpfcnvrt@convarg+2)^0,c
  3463   001036  6A4D               	clrf	(vfpfcnvrt@convarg+3)^0,c
  3464   001038  6A4E               	clrf	(vfpfcnvrt@convarg+4)^0,c
  3465   00103A  6A4F               	clrf	(vfpfcnvrt@convarg+5)^0,c
  3466   00103C  6A50               	clrf	(vfpfcnvrt@convarg+6)^0,c
  3467   00103E  6A51               	clrf	(vfpfcnvrt@convarg+7)^0,c
  3468                           
  3469                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1297:    *fmt = c
      +                          p+1;
  3470   001040  0E01               	movlw	1
  3471   001042  2454               	addwf	vfpfcnvrt@cp^0,w,c
  3472   001044  6E46               	movwf	??_vfpfcnvrt^0,c
  3473   001046  0E00               	movlw	0
  3474   001048  2055               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  3475   00104A  6E47               	movwf	(??_vfpfcnvrt+1)^0,c
  3476   00104C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3477   001050  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3478   001054  C046  FFDE         	movff	??_vfpfcnvrt,postinc2
  3479   001058  C047  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  3480                           
  3481                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1298:    switch (
      +                          *cp) {
  3482   00105C  EF48  F008         	goto	l2878
  3483   001060                     l2872:
  3484                           
  3485                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1305:      return
      +                           (void) utoa(fp, convarg.llu);;	Return value of _vfpfcnvrt is never used
  3486   001060  C040  F020         	movff	vfpfcnvrt@fp,utoa@fp
  3487   001064  C041  F021         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  3488   001068  C04A  F022         	movff	vfpfcnvrt@convarg,utoa@d
  3489   00106C  C04B  F023         	movff	vfpfcnvrt@convarg+1,utoa@d+1
  3490   001070  C04C  F024         	movff	vfpfcnvrt@convarg+2,utoa@d+2
  3491   001074  C04D  F025         	movff	vfpfcnvrt@convarg+3,utoa@d+3
  3492   001078  C04E  F026         	movff	vfpfcnvrt@convarg+4,utoa@d+4
  3493   00107C  C04F  F027         	movff	vfpfcnvrt@convarg+5,utoa@d+5
  3494   001080  C050  F028         	movff	vfpfcnvrt@convarg+6,utoa@d+6
  3495   001084  C051  F029         	movff	vfpfcnvrt@convarg+7,utoa@d+7
  3496   001088  EC80  F008         	call	_utoa	;wreg free
  3497   00108C  EF7F  F008         	goto	l1111
  3498   001090                     l2878:
  3499   001090  C054  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3500   001094  C055  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3501   001098                     	if	0	;tblptru may be non-zero
  3502   001098                     	endif
  3503   001098                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3504   001098  0E00               	movlw	low (__mediumconst shr (0+16))
  3505   00109A  6EF8               	movwf	tblptru,c
  3506   00109C                     	endif
  3507   00109C  0008               	tblrd		*
  3508   00109E  50F5               	movf	tablat,w,c
  3509   0010A0  6E46               	movwf	??_vfpfcnvrt^0,c
  3510   0010A2  6A47               	clrf	(??_vfpfcnvrt+1)^0,c
  3511                           
  3512                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3513                           ; Switch size 1, requested type "simple"
  3514                           ; Number of cases is 1, Range of values is 0 to 0
  3515                           ; switch strategies available:
  3516                           ; Name         Instructions Cycles
  3517                           ; simple_byte            4     3 (average)
  3518                           ;	Chosen strategy is simple_byte
  3519   0010A4  5047               	movf	(??_vfpfcnvrt+1)^0,w,c
  3520   0010A6  0A00               	xorlw	0	; case 0
  3521   0010A8  B4D8               	btfsc	status,2,c
  3522   0010AA  EF59  F008         	goto	l3048
  3523   0010AE  EF60  F008         	goto	l2880
  3524   0010B2                     l3048:
  3525                           
  3526                           ; Switch size 1, requested type "simple"
  3527                           ; Number of cases is 1, Range of values is 117 to 117
  3528                           ; switch strategies available:
  3529                           ; Name         Instructions Cycles
  3530                           ; simple_byte            4     3 (average)
  3531                           ;	Chosen strategy is simple_byte
  3532   0010B2  5046               	movf	??_vfpfcnvrt^0,w,c
  3533   0010B4  0A75               	xorlw	117	; case 117
  3534   0010B6  B4D8               	btfsc	status,2,c
  3535   0010B8  EF30  F008         	goto	l2872
  3536   0010BC  EF60  F008         	goto	l2880
  3537   0010C0                     l2880:
  3538                           
  3539                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  3540   0010C0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3541   0010C4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3542   0010C8  2ADE               	incf	postinc2,f,c
  3543   0010CA  0E00               	movlw	0
  3544   0010CC  22DD               	addwfc	postdec2,f,c
  3545   0010CE  EF7F  F008         	goto	l1111
  3546   0010D2                     l2884:
  3547                           
  3548                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  3549   0010D2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3550   0010D6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3551   0010DA  CFDE FFF6          	movff	postinc2,tblptrl
  3552   0010DE  CFDD FFF7          	movff	postdec2,tblptrh
  3553   0010E2                     	if	0	;tblptru may be non-zero
  3554   0010E2                     	endif
  3555   0010E2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3556   0010E2  0E00               	movlw	low (__mediumconst shr (0+16))
  3557   0010E4  6EF8               	movwf	tblptru,c
  3558   0010E6                     	endif
  3559   0010E6  0008               	tblrd		*
  3560   0010E8  50F5               	movf	tablat,w,c
  3561   0010EA  6E05               	movwf	fputc@c^0,c
  3562   0010EC  6A06               	clrf	(fputc@c+1)^0,c
  3563   0010EE  C040  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3564   0010F2  C041  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3565   0010F6  EC53  F00E         	call	_fputc	;wreg free
  3566   0010FA  EF60  F008         	goto	l2880
  3567   0010FE                     l1111:
  3568   0010FE  0012               	return		;funcret
  3569   001100                     __end_of_vfpfcnvrt:
  3570                           	callstack 0
  3571                           
  3572 ;; *************** function _utoa *****************
  3573 ;; Defined at:
  3574 ;;		line 894 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  3577 ;;		 -> sprintf@f(11), 
  3578 ;;  d               8   33[COMRAM] unsigned long long 
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  n               8   53[COMRAM] unsigned long long 
  3581 ;;  i               2   61[COMRAM] int 
  3582 ;;  w               2   51[COMRAM] int 
  3583 ;;  p               2   49[COMRAM] int 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3593 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3594 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3595 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3596 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3597 ;;Total ram usage:       32 bytes
  3598 ;; Hardware stack levels used: 1
  3599 ;; Hardware stack levels required when called: 6
  3600 ;; This function calls:
  3601 ;;		___lodiv
  3602 ;;		___lomod
  3603 ;;		_pad
  3604 ;; This function is called by:
  3605 ;;		_vfpfcnvrt
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           	psect	text25
  3610   001100                     __ptext25:
  3611                           	callstack 0
  3612   001100                     _utoa:
  3613                           	callstack 20
  3614   001100                     
  3615                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 894: static void 
      +                          utoa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c9
      +                          9\common\doprnt.c: 895: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\do
      +                          prnt.c: 896:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\commo
      +                          n\doprnt.c: 897:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sour
      +                          ces\c99\common\doprnt.c: 901:     if (!(prec < 0)) {
  3616   001100  0100               	movlb	0	; () banked
  3617   001102  BFDF               	btfsc	(_prec+1)& (0+255),7,b
  3618   001104  EF86  F008         	goto	u2071
  3619   001108  EF88  F008         	goto	u2070
  3620   00110C                     u2071:
  3621   00110C  EF89  F008         	goto	l2764
  3622   001110                     u2070:
  3623   001110                     
  3624                           ; BSR set to: 0
  3625                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 902:         flag
      +                          s &= ~(1 << 1);
  3626   001110  9258               	bcf	_flags^0,1,c
  3627   001112                     l2764:
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 905:     p = (0 <
      +                           prec) ? prec : 1;
  3631   001112  BFDF               	btfsc	(_prec+1)& (0+255),7,b
  3632   001114  EF96  F008         	goto	u2080
  3633   001118  51DF               	movf	(_prec+1)& (0+255),w,b
  3634   00111A  E106               	bnz	u2081
  3635   00111C  05DE               	decf	_prec& (0+255),w,b
  3636   00111E  B0D8               	btfsc	status,0,c
  3637   001120  EF94  F008         	goto	u2081
  3638   001124  EF96  F008         	goto	u2080
  3639   001128                     u2081:
  3640   001128  EF9C  F008         	goto	l1077
  3641   00112C                     u2080:
  3642   00112C                     
  3643                           ; BSR set to: 0
  3644   00112C  0E00               	movlw	0
  3645   00112E  6E33               	movwf	(utoa@p+1)^0,c
  3646   001130  0E01               	movlw	1
  3647   001132  6E32               	movwf	utoa@p^0,c
  3648   001134  EFA0  F008         	goto	l1079
  3649   001138                     l1077:
  3650                           
  3651                           ; BSR set to: 0
  3652   001138  C0DE  F032         	movff	_prec,utoa@p
  3653   00113C  C0DF  F033         	movff	_prec+1,utoa@p+1
  3654   001140                     l1079:
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 906:     w = widt
      +                          h;
  3658   001140  C0DC  F034         	movff	_width,utoa@w
  3659   001144  C0DD  F035         	movff	_width+1,utoa@w+1
  3660                           
  3661                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 909:     n = d;
  3662   001148  C022  F036         	movff	utoa@d,utoa@n
  3663   00114C  C023  F037         	movff	utoa@d+1,utoa@n+1
  3664   001150  C024  F038         	movff	utoa@d+2,utoa@n+2
  3665   001154  C025  F039         	movff	utoa@d+3,utoa@n+3
  3666   001158  C026  F03A         	movff	utoa@d+4,utoa@n+4
  3667   00115C  C027  F03B         	movff	utoa@d+5,utoa@n+5
  3668   001160  C028  F03C         	movff	utoa@d+6,utoa@n+6
  3669   001164  C029  F03D         	movff	utoa@d+7,utoa@n+7
  3670   001168                     
  3671                           ; BSR set to: 0
  3672                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 910:     i = size
      +                          of(dbuf) - 1;
  3673   001168  0E00               	movlw	0
  3674   00116A  6E3F               	movwf	(utoa@i+1)^0,c
  3675   00116C  0E1F               	movlw	31
  3676   00116E  6E3E               	movwf	utoa@i^0,c
  3677   001170                     
  3678                           ; BSR set to: 0
  3679                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 911:     dbuf[i] 
      +                          = '\0';
  3680   001170  0E00               	movlw	0
  3681   001172  0101               	movlb	1	; () banked
  3682   001174  6F1F               	movwf	(_dbuf+31)& (0+255),b
  3683                           
  3684                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 912:     while (i
      +                           && (n || (0 < p)
  3685   001176  EF33  F009         	goto	l2782
  3686   00117A                     l2772:
  3687                           
  3688                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 916:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 917:         --i;
  3689   00117A  063E               	decf	utoa@i^0,f,c
  3690   00117C  A0D8               	btfss	status,0,c
  3691   00117E  063F               	decf	(utoa@i+1)^0,f,c
  3692   001180                     
  3693                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 918:         dbuf
      +                          [i] = '0' + (n % 10);
  3694   001180  0E00               	movlw	low _dbuf
  3695   001182  243E               	addwf	utoa@i^0,w,c
  3696   001184  6ED9               	movwf	fsr2l,c
  3697   001186  0E01               	movlw	high _dbuf
  3698   001188  203F               	addwfc	(utoa@i+1)^0,w,c
  3699   00118A  6EDA               	movwf	fsr2h,c
  3700   00118C  C036  F005         	movff	utoa@n,___lomod@dividend
  3701   001190  C037  F006         	movff	utoa@n+1,___lomod@dividend+1
  3702   001194  C038  F007         	movff	utoa@n+2,___lomod@dividend+2
  3703   001198  C039  F008         	movff	utoa@n+3,___lomod@dividend+3
  3704   00119C  C03A  F009         	movff	utoa@n+4,___lomod@dividend+4
  3705   0011A0  C03B  F00A         	movff	utoa@n+5,___lomod@dividend+5
  3706   0011A4  C03C  F00B         	movff	utoa@n+6,___lomod@dividend+6
  3707   0011A8  C03D  F00C         	movff	utoa@n+7,___lomod@dividend+7
  3708   0011AC  0E0A               	movlw	10
  3709   0011AE  6E0D               	movwf	___lomod@divisor^0,c
  3710   0011B0  0E00               	movlw	0
  3711   0011B2  6E0E               	movwf	(___lomod@divisor+1)^0,c
  3712   0011B4  0E00               	movlw	0
  3713   0011B6  6E0F               	movwf	(___lomod@divisor+2)^0,c
  3714   0011B8  0E00               	movlw	0
  3715   0011BA  6E10               	movwf	(___lomod@divisor+3)^0,c
  3716   0011BC  0E00               	movlw	0
  3717   0011BE  6E11               	movwf	(___lomod@divisor+4)^0,c
  3718   0011C0  0E00               	movlw	0
  3719   0011C2  6E12               	movwf	(___lomod@divisor+5)^0,c
  3720   0011C4  0E00               	movlw	0
  3721   0011C6  6E13               	movwf	(___lomod@divisor+6)^0,c
  3722   0011C8  0E00               	movlw	0
  3723   0011CA  6E14               	movwf	(___lomod@divisor+7)^0,c
  3724   0011CC  ECEB  F00D         	call	___lomod	;wreg free
  3725   0011D0  C005  F02A         	movff	?___lomod,??_utoa
  3726   0011D4  C006  F02B         	movff	?___lomod+1,??_utoa+1
  3727   0011D8  C007  F02C         	movff	?___lomod+2,??_utoa+2
  3728   0011DC  C008  F02D         	movff	?___lomod+3,??_utoa+3
  3729   0011E0  C009  F02E         	movff	?___lomod+4,??_utoa+4
  3730   0011E4  C00A  F02F         	movff	?___lomod+5,??_utoa+5
  3731   0011E8  C00B  F030         	movff	?___lomod+6,??_utoa+6
  3732   0011EC  C00C  F031         	movff	?___lomod+7,??_utoa+7
  3733   0011F0  502A               	movf	??_utoa^0,w,c
  3734   0011F2  0F30               	addlw	48
  3735   0011F4  6EDF               	movwf	indf2,c
  3736   0011F6                     
  3737                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 919:         --p;
  3738   0011F6  0632               	decf	utoa@p^0,f,c
  3739   0011F8  A0D8               	btfss	status,0,c
  3740   0011FA  0633               	decf	(utoa@p+1)^0,f,c
  3741   0011FC                     
  3742                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 920:         --w;
  3743   0011FC  0634               	decf	utoa@w^0,f,c
  3744   0011FE  A0D8               	btfss	status,0,c
  3745   001200  0635               	decf	(utoa@w+1)^0,f,c
  3746   001202                     
  3747                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 921:         n = 
      +                          n / 10;
  3748   001202  C036  F005         	movff	utoa@n,___lodiv@dividend
  3749   001206  C037  F006         	movff	utoa@n+1,___lodiv@dividend+1
  3750   00120A  C038  F007         	movff	utoa@n+2,___lodiv@dividend+2
  3751   00120E  C039  F008         	movff	utoa@n+3,___lodiv@dividend+3
  3752   001212  C03A  F009         	movff	utoa@n+4,___lodiv@dividend+4
  3753   001216  C03B  F00A         	movff	utoa@n+5,___lodiv@dividend+5
  3754   00121A  C03C  F00B         	movff	utoa@n+6,___lodiv@dividend+6
  3755   00121E  C03D  F00C         	movff	utoa@n+7,___lodiv@dividend+7
  3756   001222  0E0A               	movlw	10
  3757   001224  6E0D               	movwf	___lodiv@divisor^0,c
  3758   001226  0E00               	movlw	0
  3759   001228  6E0E               	movwf	(___lodiv@divisor+1)^0,c
  3760   00122A  0E00               	movlw	0
  3761   00122C  6E0F               	movwf	(___lodiv@divisor+2)^0,c
  3762   00122E  0E00               	movlw	0
  3763   001230  6E10               	movwf	(___lodiv@divisor+3)^0,c
  3764   001232  0E00               	movlw	0
  3765   001234  6E11               	movwf	(___lodiv@divisor+4)^0,c
  3766   001236  0E00               	movlw	0
  3767   001238  6E12               	movwf	(___lodiv@divisor+5)^0,c
  3768   00123A  0E00               	movlw	0
  3769   00123C  6E13               	movwf	(___lodiv@divisor+6)^0,c
  3770   00123E  0E00               	movlw	0
  3771   001240  6E14               	movwf	(___lodiv@divisor+7)^0,c
  3772   001242  EC04  F00D         	call	___lodiv	;wreg free
  3773   001246  C005  F036         	movff	?___lodiv,utoa@n
  3774   00124A  C006  F037         	movff	?___lodiv+1,utoa@n+1
  3775   00124E  C007  F038         	movff	?___lodiv+2,utoa@n+2
  3776   001252  C008  F039         	movff	?___lodiv+3,utoa@n+3
  3777   001256  C009  F03A         	movff	?___lodiv+4,utoa@n+4
  3778   00125A  C00A  F03B         	movff	?___lodiv+5,utoa@n+5
  3779   00125E  C00B  F03C         	movff	?___lodiv+6,utoa@n+6
  3780   001262  C00C  F03D         	movff	?___lodiv+7,utoa@n+7
  3781   001266                     l2782:
  3782                           
  3783                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 912:     while (i
      +                           && (n || (0 < p)
  3784   001266  503E               	movf	utoa@i^0,w,c
  3785   001268  103F               	iorwf	(utoa@i+1)^0,w,c
  3786   00126A  B4D8               	btfsc	status,2,c
  3787   00126C  EF3A  F009         	goto	u2091
  3788   001270  EF3C  F009         	goto	u2090
  3789   001274                     u2091:
  3790   001274  EF6C  F009         	goto	l2792
  3791   001278                     u2090:
  3792   001278  5036               	movf	utoa@n^0,w,c
  3793   00127A  1037               	iorwf	(utoa@n+1)^0,w,c
  3794   00127C  1038               	iorwf	(utoa@n+2)^0,w,c
  3795   00127E  1039               	iorwf	(utoa@n+3)^0,w,c
  3796   001280  103A               	iorwf	(utoa@n+4)^0,w,c
  3797   001282  103B               	iorwf	(utoa@n+5)^0,w,c
  3798   001284  103C               	iorwf	(utoa@n+6)^0,w,c
  3799   001286  103D               	iorwf	(utoa@n+7)^0,w,c
  3800   001288  A4D8               	btfss	status,2,c
  3801   00128A  EF49  F009         	goto	u2101
  3802   00128E  EF4B  F009         	goto	u2100
  3803   001292                     u2101:
  3804   001292  EFBD  F008         	goto	l2772
  3805   001296                     u2100:
  3806   001296  BE33               	btfsc	(utoa@p+1)^0,7,c
  3807   001298  EF58  F009         	goto	u2110
  3808   00129C  5033               	movf	(utoa@p+1)^0,w,c
  3809   00129E  E106               	bnz	u2111
  3810   0012A0  0432               	decf	utoa@p^0,w,c
  3811   0012A2  B0D8               	btfsc	status,0,c
  3812   0012A4  EF56  F009         	goto	u2111
  3813   0012A8  EF58  F009         	goto	u2110
  3814   0012AC                     u2111:
  3815   0012AC  EFBD  F008         	goto	l2772
  3816   0012B0                     u2110:
  3817   0012B0  BE35               	btfsc	(utoa@w+1)^0,7,c
  3818   0012B2  EF63  F009         	goto	u2121
  3819   0012B6  5035               	movf	(utoa@w+1)^0,w,c
  3820   0012B8  E108               	bnz	u2120
  3821   0012BA  0434               	decf	utoa@w^0,w,c
  3822   0012BC  A0D8               	btfss	status,0,c
  3823   0012BE  EF63  F009         	goto	u2121
  3824   0012C2  EF65  F009         	goto	u2120
  3825   0012C6                     u2121:
  3826   0012C6  EF6C  F009         	goto	l2792
  3827   0012CA                     u2120:
  3828   0012CA  B258               	btfsc	_flags^0,1,c
  3829   0012CC  EF6A  F009         	goto	u2131
  3830   0012D0  EF6C  F009         	goto	u2130
  3831   0012D4                     u2131:
  3832   0012D4  EFBD  F008         	goto	l2772
  3833   0012D8                     u2130:
  3834   0012D8                     l2792:
  3835                           
  3836                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 925:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3837   0012D8  C020  F015         	movff	utoa@fp,pad@fp
  3838   0012DC  C021  F016         	movff	utoa@fp+1,pad@fp+1
  3839   0012E0  0E00               	movlw	low _dbuf
  3840   0012E2  243E               	addwf	utoa@i^0,w,c
  3841   0012E4  6E17               	movwf	pad@buf^0,c
  3842   0012E6  0E01               	movlw	high _dbuf
  3843   0012E8  203F               	addwfc	(utoa@i+1)^0,w,c
  3844   0012EA  6E18               	movwf	(pad@buf+1)^0,c
  3845   0012EC  C034  F019         	movff	utoa@w,pad@p
  3846   0012F0  C035  F01A         	movff	utoa@w+1,pad@p+1
  3847   0012F4  EC14  F00F         	call	_pad	;wreg free
  3848   0012F8  0012               	return		;funcret
  3849   0012FA                     __end_of_utoa:
  3850                           	callstack 0
  3851                           
  3852 ;; *************** function _pad *****************
  3853 ;; Defined at:
  3854 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  3857 ;;		 -> sprintf@f(11), 
  3858 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3859 ;;		 -> dbuf(32), 
  3860 ;;  p               2   24[COMRAM] int 
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  w               2   29[COMRAM] int 
  3863 ;;  i               2   27[COMRAM] int 
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3873 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3874 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3876 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3877 ;;Total ram usage:       11 bytes
  3878 ;; Hardware stack levels used: 1
  3879 ;; Hardware stack levels required when called: 5
  3880 ;; This function calls:
  3881 ;;		_fputc
  3882 ;;		_fputs
  3883 ;; This function is called by:
  3884 ;;		_utoa
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text26
  3889   001E28                     __ptext26:
  3890                           	callstack 0
  3891   001E28                     _pad:
  3892                           	callstack 20
  3893   001E28                     
  3894                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  3895   001E28  A058               	btfss	_flags^0,0,c
  3896   001E2A  EF19  F00F         	goto	u1991
  3897   001E2E  EF1B  F00F         	goto	u1990
  3898   001E32                     u1991:
  3899   001E32  EF25  F00F         	goto	l2730
  3900   001E36                     u1990:
  3901   001E36                     
  3902                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  3903   001E36  C017  F00E         	movff	pad@buf,fputs@s
  3904   001E3A  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3905   001E3E  C015  F010         	movff	pad@fp,fputs@fp
  3906   001E42  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3907   001E46  ECDF  F010         	call	_fputs	;wreg free
  3908   001E4A                     l2730:
  3909                           
  3910                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  3911   001E4A  BE1A               	btfsc	(pad@p+1)^0,7,c
  3912   001E4C  EF2A  F00F         	goto	u2001
  3913   001E50  EF2C  F00F         	goto	u2000
  3914   001E54                     u2001:
  3915   001E54  EF32  F00F         	goto	l2734
  3916   001E58                     u2000:
  3917   001E58  C019  F01E         	movff	pad@p,pad@w
  3918   001E5C  C01A  F01F         	movff	pad@p+1,pad@w+1
  3919   001E60  EF36  F00F         	goto	l1067
  3920   001E64                     l2734:
  3921   001E64  0E00               	movlw	0
  3922   001E66  6E1F               	movwf	(pad@w+1)^0,c
  3923   001E68  0E00               	movlw	0
  3924   001E6A  6E1E               	movwf	pad@w^0,c
  3925   001E6C                     l1067:
  3926                           
  3927                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3928   001E6C  0E00               	movlw	0
  3929   001E6E  6E1D               	movwf	(pad@i+1)^0,c
  3930   001E70  0E00               	movlw	0
  3931   001E72  6E1C               	movwf	pad@i^0,c
  3932                           
  3933                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3934   001E74  EF48  F00F         	goto	l2740
  3935   001E78                     l2736:
  3936                           
  3937                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3938   001E78  0E00               	movlw	0
  3939   001E7A  6E06               	movwf	(fputc@c+1)^0,c
  3940   001E7C  0E20               	movlw	32
  3941   001E7E  6E05               	movwf	fputc@c^0,c
  3942   001E80  C015  F007         	movff	pad@fp,fputc@fp
  3943   001E84  C016  F008         	movff	pad@fp+1,fputc@fp+1
  3944   001E88  EC53  F00E         	call	_fputc	;wreg free
  3945   001E8C                     
  3946                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3947   001E8C  4A1C               	infsnz	pad@i^0,f,c
  3948   001E8E  2A1D               	incf	(pad@i+1)^0,f,c
  3949   001E90                     l2740:
  3950                           
  3951                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3952   001E90  501E               	movf	pad@w^0,w,c
  3953   001E92  5C1C               	subwf	pad@i^0,w,c
  3954   001E94  501D               	movf	(pad@i+1)^0,w,c
  3955   001E96  0A80               	xorlw	128
  3956   001E98  6E1B               	movwf	??_pad^0,c
  3957   001E9A  501F               	movf	(pad@w+1)^0,w,c
  3958   001E9C  0A80               	xorlw	128
  3959   001E9E  581B               	subwfb	??_pad^0,w,c
  3960   001EA0  A0D8               	btfss	status,0,c
  3961   001EA2  EF55  F00F         	goto	u2011
  3962   001EA6  EF57  F00F         	goto	u2010
  3963   001EAA                     u2011:
  3964   001EAA  EF3C  F00F         	goto	l2736
  3965   001EAE                     u2010:
  3966   001EAE                     
  3967                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  3968   001EAE  B058               	btfsc	_flags^0,0,c
  3969   001EB0  EF5C  F00F         	goto	u2021
  3970   001EB4  EF5E  F00F         	goto	u2020
  3971   001EB8                     u2021:
  3972   001EB8  EF68  F00F         	goto	l1072
  3973   001EBC                     u2020:
  3974   001EBC                     
  3975                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3976   001EBC  C017  F00E         	movff	pad@buf,fputs@s
  3977   001EC0  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3978   001EC4  C015  F010         	movff	pad@fp,fputs@fp
  3979   001EC8  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3980   001ECC  ECDF  F010         	call	_fputs	;wreg free
  3981   001ED0                     l1072:
  3982   001ED0  0012               	return		;funcret
  3983   001ED2                     __end_of_pad:
  3984                           	callstack 0
  3985                           
  3986 ;; *************** function _fputs *****************
  3987 ;; Defined at:
  3988 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3989 ;; Parameters:    Size  Location     Type
  3990 ;;  s               2   13[COMRAM] PTR const unsigned char 
  3991 ;;		 -> dbuf(32), 
  3992 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  3993 ;;		 -> sprintf@f(11), 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  i               2   18[COMRAM] int 
  3996 ;;  c               1   17[COMRAM] unsigned char 
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  2   13[COMRAM] int 
  3999 ;; Registers used:
  4000 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4006 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4007 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4009 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4010 ;;Total ram usage:        7 bytes
  4011 ;; Hardware stack levels used: 1
  4012 ;; Hardware stack levels required when called: 4
  4013 ;; This function calls:
  4014 ;;		_fputc
  4015 ;; This function is called by:
  4016 ;;		_pad
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           	psect	text27
  4021   0021BE                     __ptext27:
  4022                           	callstack 0
  4023   0021BE                     _fputs:
  4024                           	callstack 20
  4025   0021BE  0E00               	movlw	0
  4026   0021C0  6E14               	movwf	(fputs@i+1)^0,c
  4027   0021C2  0E00               	movlw	0
  4028   0021C4  6E13               	movwf	fputs@i^0,c
  4029   0021C6  EFF0  F010         	goto	l2680
  4030   0021CA                     l2676:
  4031   0021CA  C012  F005         	movff	fputs@c,fputc@c
  4032   0021CE  6A06               	clrf	(fputc@c+1)^0,c
  4033   0021D0  C010  F007         	movff	fputs@fp,fputc@fp
  4034   0021D4  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  4035   0021D8  EC53  F00E         	call	_fputc	;wreg free
  4036   0021DC  4A13               	infsnz	fputs@i^0,f,c
  4037   0021DE  2A14               	incf	(fputs@i+1)^0,f,c
  4038   0021E0                     l2680:
  4039   0021E0  5013               	movf	fputs@i^0,w,c
  4040   0021E2  240E               	addwf	fputs@s^0,w,c
  4041   0021E4  6ED9               	movwf	fsr2l,c
  4042   0021E6  5014               	movf	(fputs@i+1)^0,w,c
  4043   0021E8  200F               	addwfc	(fputs@s+1)^0,w,c
  4044   0021EA  6EDA               	movwf	fsr2h,c
  4045   0021EC  50DF               	movf	indf2,w,c
  4046   0021EE  6E12               	movwf	fputs@c^0,c
  4047   0021F0  5012               	movf	fputs@c^0,w,c
  4048   0021F2  A4D8               	btfss	status,2,c
  4049   0021F4  EFFE  F010         	goto	u1911
  4050   0021F8  EF00  F011         	goto	u1910
  4051   0021FC                     u1911:
  4052   0021FC  EFE5  F010         	goto	l2676
  4053   002200                     u1910:
  4054   002200  0012               	return		;funcret
  4055   002202                     __end_of_fputs:
  4056                           	callstack 0
  4057                           
  4058 ;; *************** function _fputc *****************
  4059 ;; Defined at:
  4060 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  c               2    4[COMRAM] int 
  4063 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  4064 ;;		 -> sprintf@f(11), 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;		None
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  2    4[COMRAM] int 
  4069 ;; Registers used:
  4070 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4076 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4078 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4079 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4080 ;;Total ram usage:        9 bytes
  4081 ;; Hardware stack levels used: 1
  4082 ;; Hardware stack levels required when called: 3
  4083 ;; This function calls:
  4084 ;;		_putch
  4085 ;; This function is called by:
  4086 ;;		_pad
  4087 ;;		_vfpfcnvrt
  4088 ;;		_fputs
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text28
  4093   001CA6                     __ptext28:
  4094                           	callstack 0
  4095   001CA6                     _fputc:
  4096                           	callstack 20
  4097   001CA6  5007               	movf	fputc@fp^0,w,c
  4098   001CA8  1008               	iorwf	(fputc@fp+1)^0,w,c
  4099   001CAA  B4D8               	btfsc	status,2,c
  4100   001CAC  EF5A  F00E         	goto	u1871
  4101   001CB0  EF5C  F00E         	goto	u1870
  4102   001CB4                     u1871:
  4103   001CB4  EF65  F00E         	goto	l2664
  4104   001CB8                     u1870:
  4105   001CB8  5007               	movf	fputc@fp^0,w,c
  4106   001CBA  1008               	iorwf	(fputc@fp+1)^0,w,c
  4107   001CBC  A4D8               	btfss	status,2,c
  4108   001CBE  EF63  F00E         	goto	u1881
  4109   001CC2  EF65  F00E         	goto	u1880
  4110   001CC6                     u1881:
  4111   001CC6  EF6A  F00E         	goto	l2666
  4112   001CCA                     u1880:
  4113   001CCA                     l2664:
  4114   001CCA  5005               	movf	fputc@c^0,w,c
  4115   001CCC  ECC1  F011         	call	_putch
  4116   001CD0  EFB7  F00E         	goto	l1169
  4117   001CD4                     l2666:
  4118   001CD4  EE20 F009          	lfsr	2,9
  4119   001CD8  5007               	movf	fputc@fp^0,w,c
  4120   001CDA  26D9               	addwf	fsr2l,f,c
  4121   001CDC  5008               	movf	(fputc@fp+1)^0,w,c
  4122   001CDE  22DA               	addwfc	fsr2h,f,c
  4123   001CE0  50DE               	movf	postinc2,w,c
  4124   001CE2  10DE               	iorwf	postinc2,w,c
  4125   001CE4  B4D8               	btfsc	status,2,c
  4126   001CE6  EF77  F00E         	goto	u1891
  4127   001CEA  EF79  F00E         	goto	u1890
  4128   001CEE                     u1891:
  4129   001CEE  EF94  F00E         	goto	l2670
  4130   001CF2                     u1890:
  4131   001CF2  EE20 F009          	lfsr	2,9
  4132   001CF6  5007               	movf	fputc@fp^0,w,c
  4133   001CF8  26D9               	addwf	fsr2l,f,c
  4134   001CFA  5008               	movf	(fputc@fp+1)^0,w,c
  4135   001CFC  22DA               	addwfc	fsr2h,f,c
  4136   001CFE  EE10 F003          	lfsr	1,3
  4137   001D02  5007               	movf	fputc@fp^0,w,c
  4138   001D04  26E1               	addwf	fsr1l,f,c
  4139   001D06  5008               	movf	(fputc@fp+1)^0,w,c
  4140   001D08  22E2               	addwfc	fsr1h,f,c
  4141   001D0A  50DE               	movf	postinc2,w,c
  4142   001D0C  5CE6               	subwf	postinc1,w,c
  4143   001D0E  50E6               	movf	postinc1,w,c
  4144   001D10  0A80               	xorlw	128
  4145   001D12  6E0D               	movwf	(??_fputc+4)^0,c
  4146   001D14  50DE               	movf	postinc2,w,c
  4147   001D16  0A80               	xorlw	128
  4148   001D18  580D               	subwfb	(??_fputc+4)^0,w,c
  4149   001D1A  B0D8               	btfsc	status,0,c
  4150   001D1C  EF92  F00E         	goto	u1901
  4151   001D20  EF94  F00E         	goto	u1900
  4152   001D24                     u1901:
  4153   001D24  EFB7  F00E         	goto	l1169
  4154   001D28                     u1900:
  4155   001D28                     l2670:
  4156   001D28  EE20 F003          	lfsr	2,3
  4157   001D2C  5007               	movf	fputc@fp^0,w,c
  4158   001D2E  26D9               	addwf	fsr2l,f,c
  4159   001D30  5008               	movf	(fputc@fp+1)^0,w,c
  4160   001D32  22DA               	addwfc	fsr2h,f,c
  4161   001D34  CFDE F009          	movff	postinc2,??_fputc
  4162   001D38  CFDD F00A          	movff	postdec2,??_fputc+1
  4163   001D3C  C007  FFD9         	movff	fputc@fp,fsr2l
  4164   001D40  C008  FFDA         	movff	fputc@fp+1,fsr2h
  4165   001D44  CFDE F00B          	movff	postinc2,??_fputc+2
  4166   001D48  CFDD F00C          	movff	postdec2,??_fputc+3
  4167   001D4C  5009               	movf	??_fputc^0,w,c
  4168   001D4E  240B               	addwf	(??_fputc+2)^0,w,c
  4169   001D50  6ED9               	movwf	fsr2l,c
  4170   001D52  500A               	movf	(??_fputc+1)^0,w,c
  4171   001D54  200C               	addwfc	(??_fputc+3)^0,w,c
  4172   001D56  6EDA               	movwf	fsr2h,c
  4173   001D58  C005  FFDF         	movff	fputc@c,indf2
  4174   001D5C  EE20 F003          	lfsr	2,3
  4175   001D60  5007               	movf	fputc@fp^0,w,c
  4176   001D62  26D9               	addwf	fsr2l,f,c
  4177   001D64  5008               	movf	(fputc@fp+1)^0,w,c
  4178   001D66  22DA               	addwfc	fsr2h,f,c
  4179   001D68  2ADE               	incf	postinc2,f,c
  4180   001D6A  0E00               	movlw	0
  4181   001D6C  22DD               	addwfc	postdec2,f,c
  4182   001D6E                     l1169:
  4183   001D6E  0012               	return		;funcret
  4184   001D70                     __end_of_fputc:
  4185                           	callstack 0
  4186                           
  4187 ;; *************** function _putch *****************
  4188 ;; Defined at:
  4189 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  c               1    wreg     unsigned char 
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;  c               1    0[COMRAM] unsigned char 
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;Total ram usage:        0 bytes
  4208 ;; Hardware stack levels used: 1
  4209 ;; Hardware stack levels required when called: 2
  4210 ;; This function calls:
  4211 ;;		Nothing
  4212 ;; This function is called by:
  4213 ;;		_fputc
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           	psect	text29
  4218   002382                     __ptext29:
  4219                           	callstack 0
  4220   002382                     _putch:
  4221                           	callstack 20
  4222   002382  0012               	return		;funcret
  4223   002384                     __end_of_putch:
  4224                           	callstack 0
  4225                           
  4226 ;; *************** function ___lomod *****************
  4227 ;; Defined at:
  4228 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lomod.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  dividend        8    4[COMRAM] unsigned long long 
  4231 ;;  divisor         8   12[COMRAM] unsigned long long 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  counter         1   20[COMRAM] unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  8    4[COMRAM] unsigned long long 
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4243 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4246 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4247 ;;Total ram usage:       17 bytes
  4248 ;; Hardware stack levels used: 1
  4249 ;; Hardware stack levels required when called: 2
  4250 ;; This function calls:
  4251 ;;		Nothing
  4252 ;; This function is called by:
  4253 ;;		_utoa
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text30
  4258   001BD6                     __ptext30:
  4259                           	callstack 0
  4260   001BD6                     ___lomod:
  4261                           	callstack 23
  4262   001BD6  500D               	movf	___lomod@divisor^0,w,c
  4263   001BD8  100E               	iorwf	(___lomod@divisor+1)^0,w,c
  4264   001BDA  100F               	iorwf	(___lomod@divisor+2)^0,w,c
  4265   001BDC  1010               	iorwf	(___lomod@divisor+3)^0,w,c
  4266   001BDE  1011               	iorwf	(___lomod@divisor+4)^0,w,c
  4267   001BE0  1012               	iorwf	(___lomod@divisor+5)^0,w,c
  4268   001BE2  1013               	iorwf	(___lomod@divisor+6)^0,w,c
  4269   001BE4  1014               	iorwf	(___lomod@divisor+7)^0,w,c
  4270   001BE6  B4D8               	btfsc	status,2,c
  4271   001BE8  EFF8  F00D         	goto	u1961
  4272   001BEC  EFFA  F00D         	goto	u1960
  4273   001BF0                     u1961:
  4274   001BF0  EF42  F00E         	goto	l812
  4275   001BF4                     u1960:
  4276   001BF4  0E01               	movlw	1
  4277   001BF6  6E15               	movwf	___lomod@counter^0,c
  4278   001BF8  EF08  F00E         	goto	l2716
  4279   001BFC                     l2714:
  4280   001BFC  90D8               	bcf	status,0,c
  4281   001BFE  360D               	rlcf	___lomod@divisor^0,f,c
  4282   001C00  360E               	rlcf	(___lomod@divisor+1)^0,f,c
  4283   001C02  360F               	rlcf	(___lomod@divisor+2)^0,f,c
  4284   001C04  3610               	rlcf	(___lomod@divisor+3)^0,f,c
  4285   001C06  3611               	rlcf	(___lomod@divisor+4)^0,f,c
  4286   001C08  3612               	rlcf	(___lomod@divisor+5)^0,f,c
  4287   001C0A  3613               	rlcf	(___lomod@divisor+6)^0,f,c
  4288   001C0C  3614               	rlcf	(___lomod@divisor+7)^0,f,c
  4289   001C0E  2A15               	incf	___lomod@counter^0,f,c
  4290   001C10                     l2716:
  4291   001C10  AE14               	btfss	(___lomod@divisor+7)^0,7,c
  4292   001C12  EF0D  F00E         	goto	u1971
  4293   001C16  EF0F  F00E         	goto	u1970
  4294   001C1A                     u1971:
  4295   001C1A  EFFE  F00D         	goto	l2714
  4296   001C1E                     u1970:
  4297   001C1E                     l2718:
  4298   001C1E  500D               	movf	___lomod@divisor^0,w,c
  4299   001C20  5C05               	subwf	___lomod@dividend^0,w,c
  4300   001C22  500E               	movf	(___lomod@divisor+1)^0,w,c
  4301   001C24  5806               	subwfb	(___lomod@dividend+1)^0,w,c
  4302   001C26  500F               	movf	(___lomod@divisor+2)^0,w,c
  4303   001C28  5807               	subwfb	(___lomod@dividend+2)^0,w,c
  4304   001C2A  5010               	movf	(___lomod@divisor+3)^0,w,c
  4305   001C2C  5808               	subwfb	(___lomod@dividend+3)^0,w,c
  4306   001C2E  5011               	movf	(___lomod@divisor+4)^0,w,c
  4307   001C30  5809               	subwfb	(___lomod@dividend+4)^0,w,c
  4308   001C32  5012               	movf	(___lomod@divisor+5)^0,w,c
  4309   001C34  580A               	subwfb	(___lomod@dividend+5)^0,w,c
  4310   001C36  5013               	movf	(___lomod@divisor+6)^0,w,c
  4311   001C38  580B               	subwfb	(___lomod@dividend+6)^0,w,c
  4312   001C3A  5014               	movf	(___lomod@divisor+7)^0,w,c
  4313   001C3C  580C               	subwfb	(___lomod@dividend+7)^0,w,c
  4314   001C3E  A0D8               	btfss	status,0,c
  4315   001C40  EF24  F00E         	goto	u1981
  4316   001C44  EF26  F00E         	goto	u1980
  4317   001C48                     u1981:
  4318   001C48  EF36  F00E         	goto	l2722
  4319   001C4C                     u1980:
  4320   001C4C  500D               	movf	___lomod@divisor^0,w,c
  4321   001C4E  5E05               	subwf	___lomod@dividend^0,f,c
  4322   001C50  500E               	movf	(___lomod@divisor+1)^0,w,c
  4323   001C52  5A06               	subwfb	(___lomod@dividend+1)^0,f,c
  4324   001C54  500F               	movf	(___lomod@divisor+2)^0,w,c
  4325   001C56  5A07               	subwfb	(___lomod@dividend+2)^0,f,c
  4326   001C58  5010               	movf	(___lomod@divisor+3)^0,w,c
  4327   001C5A  5A08               	subwfb	(___lomod@dividend+3)^0,f,c
  4328   001C5C  5011               	movf	(___lomod@divisor+4)^0,w,c
  4329   001C5E  5A09               	subwfb	(___lomod@dividend+4)^0,f,c
  4330   001C60  5012               	movf	(___lomod@divisor+5)^0,w,c
  4331   001C62  5A0A               	subwfb	(___lomod@dividend+5)^0,f,c
  4332   001C64  5013               	movf	(___lomod@divisor+6)^0,w,c
  4333   001C66  5A0B               	subwfb	(___lomod@dividend+6)^0,f,c
  4334   001C68  5014               	movf	(___lomod@divisor+7)^0,w,c
  4335   001C6A  5A0C               	subwfb	(___lomod@dividend+7)^0,f,c
  4336   001C6C                     l2722:
  4337   001C6C  90D8               	bcf	status,0,c
  4338   001C6E  3214               	rrcf	(___lomod@divisor+7)^0,f,c
  4339   001C70  3213               	rrcf	(___lomod@divisor+6)^0,f,c
  4340   001C72  3212               	rrcf	(___lomod@divisor+5)^0,f,c
  4341   001C74  3211               	rrcf	(___lomod@divisor+4)^0,f,c
  4342   001C76  3210               	rrcf	(___lomod@divisor+3)^0,f,c
  4343   001C78  320F               	rrcf	(___lomod@divisor+2)^0,f,c
  4344   001C7A  320E               	rrcf	(___lomod@divisor+1)^0,f,c
  4345   001C7C  320D               	rrcf	___lomod@divisor^0,f,c
  4346   001C7E  2E15               	decfsz	___lomod@counter^0,f,c
  4347   001C80  EF0F  F00E         	goto	l2718
  4348   001C84                     l812:
  4349   001C84  C005  F005         	movff	___lomod@dividend,?___lomod
  4350   001C88  C006  F006         	movff	___lomod@dividend+1,?___lomod+1
  4351   001C8C  C007  F007         	movff	___lomod@dividend+2,?___lomod+2
  4352   001C90  C008  F008         	movff	___lomod@dividend+3,?___lomod+3
  4353   001C94  C009  F009         	movff	___lomod@dividend+4,?___lomod+4
  4354   001C98  C00A  F00A         	movff	___lomod@dividend+5,?___lomod+5
  4355   001C9C  C00B  F00B         	movff	___lomod@dividend+6,?___lomod+6
  4356   001CA0  C00C  F00C         	movff	___lomod@dividend+7,?___lomod+7
  4357   001CA4  0012               	return		;funcret
  4358   001CA6                     __end_of___lomod:
  4359                           	callstack 0
  4360                           
  4361 ;; *************** function ___lodiv *****************
  4362 ;; Defined at:
  4363 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lodiv.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  dividend        8    4[COMRAM] unsigned long long 
  4366 ;;  divisor         8   12[COMRAM] unsigned long long 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  quotient        8   20[COMRAM] unsigned long long 
  4369 ;;  counter         1   28[COMRAM] unsigned char 
  4370 ;; Return value:  Size  Location     Type
  4371 ;;                  8    4[COMRAM] unsigned long long 
  4372 ;; Registers used:
  4373 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 0/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4379 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4380 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4382 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4383 ;;Total ram usage:       25 bytes
  4384 ;; Hardware stack levels used: 1
  4385 ;; Hardware stack levels required when called: 2
  4386 ;; This function calls:
  4387 ;;		Nothing
  4388 ;; This function is called by:
  4389 ;;		_utoa
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           	psect	text31
  4394   001A08                     __ptext31:
  4395                           	callstack 0
  4396   001A08                     ___lodiv:
  4397                           	callstack 23
  4398   001A08  EE20  F015         	lfsr	2,___lodiv@quotient
  4399   001A0C  0E07               	movlw	7
  4400   001A0E                     u1921:
  4401   001A0E  6ADE               	clrf	postinc2,c
  4402   001A10  06E8               	decf	wreg,f,c
  4403   001A12  E2FD               	bc	u1921
  4404   001A14  500D               	movf	___lodiv@divisor^0,w,c
  4405   001A16  100E               	iorwf	(___lodiv@divisor+1)^0,w,c
  4406   001A18  100F               	iorwf	(___lodiv@divisor+2)^0,w,c
  4407   001A1A  1010               	iorwf	(___lodiv@divisor+3)^0,w,c
  4408   001A1C  1011               	iorwf	(___lodiv@divisor+4)^0,w,c
  4409   001A1E  1012               	iorwf	(___lodiv@divisor+5)^0,w,c
  4410   001A20  1013               	iorwf	(___lodiv@divisor+6)^0,w,c
  4411   001A22  1014               	iorwf	(___lodiv@divisor+7)^0,w,c
  4412   001A24  B4D8               	btfsc	status,2,c
  4413   001A26  EF17  F00D         	goto	u1931
  4414   001A2A  EF19  F00D         	goto	u1930
  4415   001A2E                     u1931:
  4416   001A2E  EF6B  F00D         	goto	l802
  4417   001A32                     u1930:
  4418   001A32  0E01               	movlw	1
  4419   001A34  6E1D               	movwf	___lodiv@counter^0,c
  4420   001A36  EF27  F00D         	goto	l2696
  4421   001A3A                     l2694:
  4422   001A3A  90D8               	bcf	status,0,c
  4423   001A3C  360D               	rlcf	___lodiv@divisor^0,f,c
  4424   001A3E  360E               	rlcf	(___lodiv@divisor+1)^0,f,c
  4425   001A40  360F               	rlcf	(___lodiv@divisor+2)^0,f,c
  4426   001A42  3610               	rlcf	(___lodiv@divisor+3)^0,f,c
  4427   001A44  3611               	rlcf	(___lodiv@divisor+4)^0,f,c
  4428   001A46  3612               	rlcf	(___lodiv@divisor+5)^0,f,c
  4429   001A48  3613               	rlcf	(___lodiv@divisor+6)^0,f,c
  4430   001A4A  3614               	rlcf	(___lodiv@divisor+7)^0,f,c
  4431   001A4C  2A1D               	incf	___lodiv@counter^0,f,c
  4432   001A4E                     l2696:
  4433   001A4E  AE14               	btfss	(___lodiv@divisor+7)^0,7,c
  4434   001A50  EF2C  F00D         	goto	u1941
  4435   001A54  EF2E  F00D         	goto	u1940
  4436   001A58                     u1941:
  4437   001A58  EF1D  F00D         	goto	l2694
  4438   001A5C                     u1940:
  4439   001A5C                     l2698:
  4440   001A5C  90D8               	bcf	status,0,c
  4441   001A5E  3615               	rlcf	___lodiv@quotient^0,f,c
  4442   001A60  3616               	rlcf	(___lodiv@quotient+1)^0,f,c
  4443   001A62  3617               	rlcf	(___lodiv@quotient+2)^0,f,c
  4444   001A64  3618               	rlcf	(___lodiv@quotient+3)^0,f,c
  4445   001A66  3619               	rlcf	(___lodiv@quotient+4)^0,f,c
  4446   001A68  361A               	rlcf	(___lodiv@quotient+5)^0,f,c
  4447   001A6A  361B               	rlcf	(___lodiv@quotient+6)^0,f,c
  4448   001A6C  361C               	rlcf	(___lodiv@quotient+7)^0,f,c
  4449   001A6E  500D               	movf	___lodiv@divisor^0,w,c
  4450   001A70  5C05               	subwf	___lodiv@dividend^0,w,c
  4451   001A72  500E               	movf	(___lodiv@divisor+1)^0,w,c
  4452   001A74  5806               	subwfb	(___lodiv@dividend+1)^0,w,c
  4453   001A76  500F               	movf	(___lodiv@divisor+2)^0,w,c
  4454   001A78  5807               	subwfb	(___lodiv@dividend+2)^0,w,c
  4455   001A7A  5010               	movf	(___lodiv@divisor+3)^0,w,c
  4456   001A7C  5808               	subwfb	(___lodiv@dividend+3)^0,w,c
  4457   001A7E  5011               	movf	(___lodiv@divisor+4)^0,w,c
  4458   001A80  5809               	subwfb	(___lodiv@dividend+4)^0,w,c
  4459   001A82  5012               	movf	(___lodiv@divisor+5)^0,w,c
  4460   001A84  580A               	subwfb	(___lodiv@dividend+5)^0,w,c
  4461   001A86  5013               	movf	(___lodiv@divisor+6)^0,w,c
  4462   001A88  580B               	subwfb	(___lodiv@dividend+6)^0,w,c
  4463   001A8A  5014               	movf	(___lodiv@divisor+7)^0,w,c
  4464   001A8C  580C               	subwfb	(___lodiv@dividend+7)^0,w,c
  4465   001A8E  A0D8               	btfss	status,0,c
  4466   001A90  EF4C  F00D         	goto	u1951
  4467   001A94  EF4E  F00D         	goto	u1950
  4468   001A98                     u1951:
  4469   001A98  EF5F  F00D         	goto	l2706
  4470   001A9C                     u1950:
  4471   001A9C  500D               	movf	___lodiv@divisor^0,w,c
  4472   001A9E  5E05               	subwf	___lodiv@dividend^0,f,c
  4473   001AA0  500E               	movf	(___lodiv@divisor+1)^0,w,c
  4474   001AA2  5A06               	subwfb	(___lodiv@dividend+1)^0,f,c
  4475   001AA4  500F               	movf	(___lodiv@divisor+2)^0,w,c
  4476   001AA6  5A07               	subwfb	(___lodiv@dividend+2)^0,f,c
  4477   001AA8  5010               	movf	(___lodiv@divisor+3)^0,w,c
  4478   001AAA  5A08               	subwfb	(___lodiv@dividend+3)^0,f,c
  4479   001AAC  5011               	movf	(___lodiv@divisor+4)^0,w,c
  4480   001AAE  5A09               	subwfb	(___lodiv@dividend+4)^0,f,c
  4481   001AB0  5012               	movf	(___lodiv@divisor+5)^0,w,c
  4482   001AB2  5A0A               	subwfb	(___lodiv@dividend+5)^0,f,c
  4483   001AB4  5013               	movf	(___lodiv@divisor+6)^0,w,c
  4484   001AB6  5A0B               	subwfb	(___lodiv@dividend+6)^0,f,c
  4485   001AB8  5014               	movf	(___lodiv@divisor+7)^0,w,c
  4486   001ABA  5A0C               	subwfb	(___lodiv@dividend+7)^0,f,c
  4487   001ABC  8015               	bsf	___lodiv@quotient^0,0,c
  4488   001ABE                     l2706:
  4489   001ABE  90D8               	bcf	status,0,c
  4490   001AC0  3214               	rrcf	(___lodiv@divisor+7)^0,f,c
  4491   001AC2  3213               	rrcf	(___lodiv@divisor+6)^0,f,c
  4492   001AC4  3212               	rrcf	(___lodiv@divisor+5)^0,f,c
  4493   001AC6  3211               	rrcf	(___lodiv@divisor+4)^0,f,c
  4494   001AC8  3210               	rrcf	(___lodiv@divisor+3)^0,f,c
  4495   001ACA  320F               	rrcf	(___lodiv@divisor+2)^0,f,c
  4496   001ACC  320E               	rrcf	(___lodiv@divisor+1)^0,f,c
  4497   001ACE  320D               	rrcf	___lodiv@divisor^0,f,c
  4498   001AD0  2E1D               	decfsz	___lodiv@counter^0,f,c
  4499   001AD2  EF2E  F00D         	goto	l2698
  4500   001AD6                     l802:
  4501   001AD6  C015  F005         	movff	___lodiv@quotient,?___lodiv
  4502   001ADA  C016  F006         	movff	___lodiv@quotient+1,?___lodiv+1
  4503   001ADE  C017  F007         	movff	___lodiv@quotient+2,?___lodiv+2
  4504   001AE2  C018  F008         	movff	___lodiv@quotient+3,?___lodiv+3
  4505   001AE6  C019  F009         	movff	___lodiv@quotient+4,?___lodiv+4
  4506   001AEA  C01A  F00A         	movff	___lodiv@quotient+5,?___lodiv+5
  4507   001AEE  C01B  F00B         	movff	___lodiv@quotient+6,?___lodiv+6
  4508   001AF2  C01C  F00C         	movff	___lodiv@quotient+7,?___lodiv+7
  4509   001AF6  0012               	return		;funcret
  4510   001AF8                     __end_of___lodiv:
  4511                           	callstack 0
  4512                           
  4513 ;; *************** function _atoi *****************
  4514 ;; Defined at:
  4515 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4518 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  n               2   17[COMRAM] int 
  4521 ;;  neg             2   15[COMRAM] int 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  2   10[COMRAM] int 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4531 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4532 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4533 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4534 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4535 ;;Total ram usage:        9 bytes
  4536 ;; Hardware stack levels used: 1
  4537 ;; Hardware stack levels required when called: 3
  4538 ;; This function calls:
  4539 ;;		___wmul
  4540 ;;		_isdigit
  4541 ;;		_isspace
  4542 ;; This function is called by:
  4543 ;;		_vfpfcnvrt
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           	psect	text32
  4548   001644                     __ptext32:
  4549                           	callstack 0
  4550   001644                     _atoi:
  4551                           	callstack 23
  4552   001644  0E00               	movlw	0
  4553   001646  6E13               	movwf	(atoi@n+1)^0,c
  4554   001648  0E00               	movlw	0
  4555   00164A  6E12               	movwf	atoi@n^0,c
  4556   00164C  0E00               	movlw	0
  4557   00164E  6E11               	movwf	(atoi@neg+1)^0,c
  4558   001650  0E00               	movlw	0
  4559   001652  6E10               	movwf	atoi@neg^0,c
  4560   001654  EF2E  F00B         	goto	l2802
  4561   001658                     l2798:
  4562   001658  4A0B               	infsnz	atoi@s^0,f,c
  4563   00165A  2A0C               	incf	(atoi@s+1)^0,f,c
  4564   00165C                     l2802:
  4565   00165C  C00B  FFF6         	movff	atoi@s,tblptrl
  4566   001660  C00C  FFF7         	movff	atoi@s+1,tblptrh
  4567   001664                     	if	0	;tblptru may be non-zero
  4568   001664                     	endif
  4569   001664                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4570   001664  0E00               	movlw	low (__mediumconst shr (0+16))
  4571   001666  6EF8               	movwf	tblptru,c
  4572   001668                     	endif
  4573   001668  0008               	tblrd		*
  4574   00166A  50F5               	movf	tablat,w,c
  4575   00166C  0A20               	xorlw	32
  4576   00166E  B4D8               	btfsc	status,2,c
  4577   001670  EF3C  F00B         	goto	u2141
  4578   001674  EF3E  F00B         	goto	u2140
  4579   001678                     u2141:
  4580   001678  EF2C  F00B         	goto	l2798
  4581   00167C                     u2140:
  4582   00167C  C00B  FFF6         	movff	atoi@s,tblptrl
  4583   001680  C00C  FFF7         	movff	atoi@s+1,tblptrh
  4584   001684                     	if	0	;tblptru may be non-zero
  4585   001684                     	endif
  4586   001684                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4587   001684  0E00               	movlw	low (__mediumconst shr (0+16))
  4588   001686  6EF8               	movwf	tblptru,c
  4589   001688                     	endif
  4590   001688  0008               	tblrd		*
  4591   00168A  CFF5 F00D          	movff	tablat,??_atoi
  4592   00168E  0EF7               	movlw	247
  4593   001690  240D               	addwf	??_atoi^0,w,c
  4594   001692  6E0E               	movwf	(??_atoi+1)^0,c
  4595   001694  6A0F               	clrf	(??_atoi+2)^0,c
  4596   001696  0EFF               	movlw	255
  4597   001698  220F               	addwfc	(??_atoi+2)^0,f,c
  4598   00169A  500F               	movf	(??_atoi+2)^0,w,c
  4599   00169C  E109               	bnz	u2150
  4600   00169E  0E05               	movlw	5
  4601   0016A0  5C0E               	subwf	(??_atoi+1)^0,w,c
  4602   0016A2  A0D8               	btfss	status,0,c
  4603   0016A4  EF56  F00B         	goto	u2151
  4604   0016A8  EF58  F00B         	goto	u2150
  4605   0016AC                     u2151:
  4606   0016AC  EF2C  F00B         	goto	l2798
  4607   0016B0                     u2150:
  4608   0016B0  EF62  F00B         	goto	l2810
  4609   0016B4                     l2806:
  4610   0016B4  0E00               	movlw	0
  4611   0016B6  6E11               	movwf	(atoi@neg+1)^0,c
  4612   0016B8  0E01               	movlw	1
  4613   0016BA  6E10               	movwf	atoi@neg^0,c
  4614   0016BC                     l2808:
  4615   0016BC  4A0B               	infsnz	atoi@s^0,f,c
  4616   0016BE  2A0C               	incf	(atoi@s+1)^0,f,c
  4617   0016C0  EF9B  F00B         	goto	l2818
  4618   0016C4                     l2810:
  4619   0016C4  C00B  FFF6         	movff	atoi@s,tblptrl
  4620   0016C8  C00C  FFF7         	movff	atoi@s+1,tblptrh
  4621   0016CC                     	if	0	;tblptru may be non-zero
  4622   0016CC                     	endif
  4623   0016CC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4624   0016CC  0E00               	movlw	low (__mediumconst shr (0+16))
  4625   0016CE  6EF8               	movwf	tblptru,c
  4626   0016D0                     	endif
  4627   0016D0  0008               	tblrd		*
  4628   0016D2  50F5               	movf	tablat,w,c
  4629   0016D4  6E0D               	movwf	??_atoi^0,c
  4630   0016D6  6A0E               	clrf	(??_atoi+1)^0,c
  4631                           
  4632                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4633                           ; Switch size 1, requested type "simple"
  4634                           ; Number of cases is 1, Range of values is 0 to 0
  4635                           ; switch strategies available:
  4636                           ; Name         Instructions Cycles
  4637                           ; simple_byte            4     3 (average)
  4638                           ;	Chosen strategy is simple_byte
  4639   0016D8  500E               	movf	(??_atoi+1)^0,w,c
  4640   0016DA  0A00               	xorlw	0	; case 0
  4641   0016DC  B4D8               	btfsc	status,2,c
  4642   0016DE  EF73  F00B         	goto	l3050
  4643   0016E2  EF9B  F00B         	goto	l2818
  4644   0016E6                     l3050:
  4645                           
  4646                           ; Switch size 1, requested type "simple"
  4647                           ; Number of cases is 2, Range of values is 43 to 45
  4648                           ; switch strategies available:
  4649                           ; Name         Instructions Cycles
  4650                           ; simple_byte            7     4 (average)
  4651                           ;	Chosen strategy is simple_byte
  4652   0016E6  500D               	movf	??_atoi^0,w,c
  4653   0016E8  0A2B               	xorlw	43	; case 43
  4654   0016EA  B4D8               	btfsc	status,2,c
  4655   0016EC  EF5E  F00B         	goto	l2808
  4656   0016F0  0A06               	xorlw	6	; case 45
  4657   0016F2  B4D8               	btfsc	status,2,c
  4658   0016F4  EF5A  F00B         	goto	l2806
  4659   0016F8  EF9B  F00B         	goto	l2818
  4660   0016FC                     l2812:
  4661   0016FC  C012  F005         	movff	atoi@n,___wmul@multiplier
  4662   001700  C013  F006         	movff	atoi@n+1,___wmul@multiplier+1
  4663   001704  0E00               	movlw	0
  4664   001706  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  4665   001708  0E0A               	movlw	10
  4666   00170A  6E07               	movwf	___wmul@multiplicand^0,c
  4667   00170C  EC4F  F011         	call	___wmul	;wreg free
  4668   001710  C00B  FFF6         	movff	atoi@s,tblptrl
  4669   001714  C00C  FFF7         	movff	atoi@s+1,tblptrh
  4670   001718                     	if	0	;tblptru may be non-zero
  4671   001718                     	endif
  4672   001718                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4673   001718  0E00               	movlw	low (__mediumconst shr (0+16))
  4674   00171A  6EF8               	movwf	tblptru,c
  4675   00171C                     	endif
  4676   00171C  0008               	tblrd		*
  4677   00171E  50F5               	movf	tablat,w,c
  4678   001720  5E05               	subwf	?___wmul^0,f,c
  4679   001722  0E00               	movlw	0
  4680   001724  5A06               	subwfb	(?___wmul+1)^0,f,c
  4681   001726  0E30               	movlw	48
  4682   001728  2405               	addwf	?___wmul^0,w,c
  4683   00172A  6E12               	movwf	atoi@n^0,c
  4684   00172C  0E00               	movlw	0
  4685   00172E  2006               	addwfc	(?___wmul+1)^0,w,c
  4686   001730  6E13               	movwf	(atoi@n+1)^0,c
  4687   001732  EF5E  F00B         	goto	l2808
  4688   001736                     l2818:
  4689   001736  C00B  FFF6         	movff	atoi@s,tblptrl
  4690   00173A  C00C  FFF7         	movff	atoi@s+1,tblptrh
  4691   00173E                     	if	0	;tblptru may be non-zero
  4692   00173E                     	endif
  4693   00173E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4694   00173E  0E00               	movlw	low (__mediumconst shr (0+16))
  4695   001740  6EF8               	movwf	tblptru,c
  4696   001742                     	endif
  4697   001742  0008               	tblrd		*
  4698   001744  CFF5 F00D          	movff	tablat,??_atoi
  4699   001748  0ED0               	movlw	208
  4700   00174A  240D               	addwf	??_atoi^0,w,c
  4701   00174C  6E0E               	movwf	(??_atoi+1)^0,c
  4702   00174E  6A0F               	clrf	(??_atoi+2)^0,c
  4703   001750  0EFF               	movlw	255
  4704   001752  220F               	addwfc	(??_atoi+2)^0,f,c
  4705   001754  500F               	movf	(??_atoi+2)^0,w,c
  4706   001756  E109               	bnz	u2160
  4707   001758  0E0A               	movlw	10
  4708   00175A  5C0E               	subwf	(??_atoi+1)^0,w,c
  4709   00175C  A0D8               	btfss	status,0,c
  4710   00175E  EFB3  F00B         	goto	u2161
  4711   001762  EFB5  F00B         	goto	u2160
  4712   001766                     u2161:
  4713   001766  EF7E  F00B         	goto	l2812
  4714   00176A                     u2160:
  4715   00176A  5010               	movf	atoi@neg^0,w,c
  4716   00176C  1011               	iorwf	(atoi@neg+1)^0,w,c
  4717   00176E  A4D8               	btfss	status,2,c
  4718   001770  EFBC  F00B         	goto	u2171
  4719   001774  EFBE  F00B         	goto	u2170
  4720   001778                     u2171:
  4721   001778  EFCC  F00B         	goto	l1140
  4722   00177C                     u2170:
  4723   00177C  C012  F00D         	movff	atoi@n,??_atoi
  4724   001780  C013  F00E         	movff	atoi@n+1,??_atoi+1
  4725   001784  1E0D               	comf	??_atoi^0,f,c
  4726   001786  1E0E               	comf	(??_atoi+1)^0,f,c
  4727   001788  4A0D               	infsnz	??_atoi^0,f,c
  4728   00178A  2A0E               	incf	(??_atoi+1)^0,f,c
  4729   00178C  C00D  F00B         	movff	??_atoi,?_atoi
  4730   001790  C00E  F00C         	movff	??_atoi+1,?_atoi+1
  4731   001794  EFD0  F00B         	goto	l1143
  4732   001798                     l1140:
  4733   001798  C012  F00B         	movff	atoi@n,?_atoi
  4734   00179C  C013  F00C         	movff	atoi@n+1,?_atoi+1
  4735   0017A0                     l1143:
  4736   0017A0  0012               	return		;funcret
  4737   0017A2                     __end_of_atoi:
  4738                           	callstack 0
  4739                           
  4740 ;; *************** function _isspace *****************
  4741 ;; Defined at:
  4742 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;  c               2    4[COMRAM] int 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;		None
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  2    4[COMRAM] int 
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4756 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4758 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4759 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4760 ;;Total ram usage:        5 bytes
  4761 ;; Hardware stack levels used: 1
  4762 ;; Hardware stack levels required when called: 2
  4763 ;; This function calls:
  4764 ;;		Nothing
  4765 ;; This function is called by:
  4766 ;;		_atoi
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text33
  4771   002134                     __ptext33:
  4772                           	callstack 0
  4773   002134                     _isspace:
  4774                           	callstack 23
  4775   002134  0E01               	movlw	1
  4776   002136  6E09               	movwf	_isspace$2047^0,c
  4777   002138  0E20               	movlw	32
  4778   00213A  1805               	xorwf	isspace@c^0,w,c
  4779   00213C  1006               	iorwf	(isspace@c+1)^0,w,c
  4780   00213E  B4D8               	btfsc	status,2,c
  4781   002140  EFA4  F010         	goto	u2051
  4782   002144  EFA6  F010         	goto	u2050
  4783   002148                     u2051:
  4784   002148  EFB9  F010         	goto	l2756
  4785   00214C                     u2050:
  4786   00214C  0EF7               	movlw	247
  4787   00214E  2405               	addwf	isspace@c^0,w,c
  4788   002150  6E07               	movwf	??_isspace^0,c
  4789   002152  0EFF               	movlw	255
  4790   002154  2006               	addwfc	(isspace@c+1)^0,w,c
  4791   002156  6E08               	movwf	(??_isspace+1)^0,c
  4792   002158  5008               	movf	(??_isspace+1)^0,w,c
  4793   00215A  E109               	bnz	u2060
  4794   00215C  0E05               	movlw	5
  4795   00215E  5C07               	subwf	??_isspace^0,w,c
  4796   002160  A0D8               	btfss	status,0,c
  4797   002162  EFB5  F010         	goto	u2061
  4798   002166  EFB7  F010         	goto	u2060
  4799   00216A                     u2061:
  4800   00216A  EFB9  F010         	goto	l2756
  4801   00216E                     u2060:
  4802   00216E  0E00               	movlw	0
  4803   002170  6E09               	movwf	_isspace$2047^0,c
  4804   002172                     l2756:
  4805   002172  C009  F005         	movff	_isspace$2047,?_isspace
  4806   002176  6A06               	clrf	(?_isspace+1)^0,c
  4807   002178  0012               	return		;funcret
  4808   00217A                     __end_of_isspace:
  4809                           	callstack 0
  4810                           
  4811 ;; *************** function _isdigit *****************
  4812 ;; Defined at:
  4813 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  c               2    4[COMRAM] int 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  2    4[COMRAM] int 
  4820 ;; Registers used:
  4821 ;;		wreg, status,2, status,0
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4830 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4831 ;;Total ram usage:        4 bytes
  4832 ;; Hardware stack levels used: 1
  4833 ;; Hardware stack levels required when called: 2
  4834 ;; This function calls:
  4835 ;;		Nothing
  4836 ;; This function is called by:
  4837 ;;		_vfpfcnvrt
  4838 ;;		_atoi
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text34
  4843   002272                     __ptext34:
  4844                           	callstack 0
  4845   002272                     _isdigit:
  4846                           	callstack 24
  4847   002272  0ED0               	movlw	208
  4848   002274  2405               	addwf	isdigit@c^0,w,c
  4849   002276  6E07               	movwf	??_isdigit^0,c
  4850   002278  0EFF               	movlw	255
  4851   00227A  2006               	addwfc	(isdigit@c+1)^0,w,c
  4852   00227C  6E08               	movwf	(??_isdigit+1)^0,c
  4853   00227E  5008               	movf	(??_isdigit+1)^0,w,c
  4854   002280  E10A               	bnz	u2030
  4855   002282  0E0A               	movlw	10
  4856   002284  5C07               	subwf	??_isdigit^0,w,c
  4857   002286  A0D8               	btfss	status,0,c
  4858   002288  EF48  F011         	goto	u2031
  4859   00228C  EF4B  F011         	goto	u2030
  4860   002290                     u2031:
  4861   002290  0E01               	movlw	1
  4862   002292  EF4C  F011         	goto	u2040
  4863   002296                     u2030:
  4864   002296  0E00               	movlw	0
  4865   002298                     u2040:
  4866   002298  6E05               	movwf	?_isdigit^0,c
  4867   00229A  6A06               	clrf	(?_isdigit+1)^0,c
  4868   00229C  0012               	return		;funcret
  4869   00229E                     __end_of_isdigit:
  4870                           	callstack 0
  4871                           
  4872 ;; *************** function ___wmul *****************
  4873 ;; Defined at:
  4874 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  multiplier      2    4[COMRAM] unsigned int 
  4877 ;;  multiplicand    2    6[COMRAM] unsigned int 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;  product         2    8[COMRAM] unsigned int 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  2    4[COMRAM] unsigned int 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0, prodl, prodh
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4889 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4890 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4892 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4893 ;;Total ram usage:        6 bytes
  4894 ;; Hardware stack levels used: 1
  4895 ;; Hardware stack levels required when called: 2
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_atoi
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           	psect	text35
  4904   00229E                     __ptext35:
  4905                           	callstack 0
  4906   00229E                     ___wmul:
  4907                           	callstack 23
  4908   00229E  5005               	movf	___wmul@multiplier^0,w,c
  4909   0022A0  0207               	mulwf	___wmul@multiplicand^0,c
  4910   0022A2  CFF3 F009          	movff	prodl,___wmul@product
  4911   0022A6  CFF4 F00A          	movff	prodh,___wmul@product+1
  4912   0022AA  5005               	movf	___wmul@multiplier^0,w,c
  4913   0022AC  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  4914   0022AE  50F3               	movf	243,w,c
  4915   0022B0  260A               	addwf	(___wmul@product+1)^0,f,c
  4916   0022B2  5006               	movf	(___wmul@multiplier+1)^0,w,c
  4917   0022B4  0207               	mulwf	___wmul@multiplicand^0,c
  4918   0022B6  50F3               	movf	243,w,c
  4919   0022B8  260A               	addwf	(___wmul@product+1)^0,f,c
  4920   0022BA  C009  F005         	movff	___wmul@product,?___wmul
  4921   0022BE  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  4922   0022C2  0012               	return		;funcret
  4923   0022C4                     __end_of___wmul:
  4924                           	callstack 0
  4925                           
  4926 ;; *************** function _HighISR *****************
  4927 ;; Defined at:
  4928 ;;		line 22 in file "interrupts.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;		None
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;		None
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  1    wreg      void 
  4935 ;; Registers used:
  4936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4944 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4946 ;;Total ram usage:        2 bytes
  4947 ;; Hardware stack levels used: 1
  4948 ;; Hardware stack levels required when called: 1
  4949 ;; This function calls:
  4950 ;;		_increment_seconds
  4951 ;; This function is called by:
  4952 ;;		Interrupt level 2
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	intcode
  4957   000008                     __pintcode:
  4958                           	callstack 0
  4959   000008                     _HighISR:
  4960                           	callstack 20
  4961                           
  4962                           ;incstack = 0
  4963   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4964   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  4965   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  4966   000012                     
  4967                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  4968   000012  010E               	movlb	14	; () banked
  4969   000014  AB33               	btfss	51,5,b	;volatile
  4970   000016  EF0F  F000         	goto	i2u182_41
  4971   00001A  EF11  F000         	goto	i2u182_40
  4972   00001E                     i2u182_41:
  4973   00001E  EF29  F000         	goto	i2l159
  4974   000022                     i2u182_40:
  4975   000022                     
  4976                           ; BSR set to: 14
  4977                           ;interrupts.c: 25:     increment_seconds();
  4978   000022  ECD1  F00B         	call	_increment_seconds	;wreg free
  4979   000026                     
  4980                           ;interrupts.c: 26:     if(test_mode == 0){
  4981   000026  0100               	movlb	0	; () banked
  4982   000028  51CA               	movf	_test_mode& (0+255),w,b
  4983   00002A  11CB               	iorwf	(_test_mode+1)& (0+255),w,b
  4984   00002C  A4D8               	btfss	status,2,c
  4985   00002E  EF1B  F000         	goto	i2u183_41
  4986   000032  EF1D  F000         	goto	i2u183_40
  4987   000036                     i2u183_41:
  4988   000036  EF23  F000         	goto	i2l2574
  4989   00003A                     i2u183_40:
  4990   00003A                     
  4991                           ; BSR set to: 0
  4992                           ;interrupts.c: 27:             TMR0H=0b00001011;
  4993   00003A  0E0B               	movlw	11
  4994   00003C  6ED4               	movwf	212,c	;volatile
  4995                           
  4996                           ;interrupts.c: 28:             TMR0L=0b11011011;
  4997   00003E  0EDB               	movlw	219
  4998   000040  6ED3               	movwf	211,c	;volatile
  4999                           
  5000                           ;interrupts.c: 29:     }else{
  5001   000042  EF27  F000         	goto	i2l2576
  5002   000046                     i2l2574:
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;interrupts.c: 30:             TMR0H=0;
  5006   000046  0E00               	movlw	0
  5007   000048  6ED4               	movwf	212,c	;volatile
  5008                           
  5009                           ;interrupts.c: 31:             TMR0L=0;
  5010   00004A  0E00               	movlw	0
  5011   00004C  6ED3               	movwf	211,c	;volatile
  5012   00004E                     i2l2576:
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;interrupts.c: 33:         PIR0bits.TMR0IF = 0;
  5016   00004E  010E               	movlb	14	; () banked
  5017   000050  9B33               	bcf	51,5,b	;volatile
  5018   000052                     i2l159:
  5019                           
  5020                           ; BSR set to: 14
  5021   000052  C004  FFDA         	movff	??_HighISR+1,fsr2h
  5022   000056  C003  FFD9         	movff	??_HighISR,fsr2l
  5023   00005A  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5024   00005C  0011               	retfie		f
  5025   00005E                     __end_of_HighISR:
  5026                           	callstack 0
  5027                           
  5028 ;; *************** function _increment_seconds *****************
  5029 ;; Defined at:
  5030 ;;		line 46 in file "timers.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;		None
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;		None
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5046 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5047 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5048 ;;Total ram usage:        2 bytes
  5049 ;; Hardware stack levels used: 1
  5050 ;; This function calls:
  5051 ;;		Nothing
  5052 ;; This function is called by:
  5053 ;;		_HighISR
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           	psect	text37
  5058   0017A2                     __ptext37:
  5059                           	callstack 0
  5060   0017A2                     _increment_seconds:
  5061                           	callstack 20
  5062   0017A2                     
  5063                           ;timers.c: 47:     if(test_mode == 0){
  5064   0017A2  0100               	movlb	0	; () banked
  5065   0017A4  51CA               	movf	_test_mode& (0+255),w,b
  5066   0017A6  11CB               	iorwf	(_test_mode+1)& (0+255),w,b
  5067   0017A8  A4D8               	btfss	status,2,c
  5068   0017AA  EFD9  F00B         	goto	i2u171_41
  5069   0017AE  EFDB  F00B         	goto	i2u171_40
  5070   0017B2                     i2u171_41:
  5071   0017B2  EFDF  F00B         	goto	i2l2468
  5072   0017B6                     i2u171_40:
  5073   0017B6                     
  5074                           ; BSR set to: 0
  5075                           ;timers.c: 48:     seconds += 1 ;
  5076   0017B6  4BE4               	infsnz	_seconds& (0+255),f,b
  5077   0017B8  2BE5               	incf	(_seconds+1)& (0+255),f,b
  5078                           
  5079                           ;timers.c: 49:     }else{
  5080   0017BA  EFE3  F00B         	goto	i2l199
  5081   0017BE                     i2l2468:
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;timers.c: 50:         seconds += 15;
  5085   0017BE  0E0F               	movlw	15
  5086   0017C0  27E4               	addwf	_seconds& (0+255),f,b
  5087   0017C2  0E00               	movlw	0
  5088   0017C4  23E5               	addwfc	(_seconds+1)& (0+255),f,b
  5089   0017C6                     i2l199:
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;timers.c: 52:     if (seconds == 60){
  5093   0017C6  0E3C               	movlw	60
  5094   0017C8  19E4               	xorwf	_seconds& (0+255),w,b
  5095   0017CA  11E5               	iorwf	(_seconds+1)& (0+255),w,b
  5096   0017CC  A4D8               	btfss	status,2,c
  5097   0017CE  EFEB  F00B         	goto	i2u172_41
  5098   0017D2  EFED  F00B         	goto	i2u172_40
  5099   0017D6                     i2u172_41:
  5100   0017D6  EFF3  F00B         	goto	i2l2474
  5101   0017DA                     i2u172_40:
  5102   0017DA                     
  5103                           ; BSR set to: 0
  5104                           ;timers.c: 53:         seconds = 0;
  5105   0017DA  0E00               	movlw	0
  5106   0017DC  6FE5               	movwf	(_seconds+1)& (0+255),b
  5107   0017DE  0E00               	movlw	0
  5108   0017E0  6FE4               	movwf	_seconds& (0+255),b
  5109   0017E2                     
  5110                           ; BSR set to: 0
  5111                           ;timers.c: 54:         minutes ++ ;
  5112   0017E2  4BE2               	infsnz	_minutes& (0+255),f,b
  5113   0017E4  2BE3               	incf	(_minutes+1)& (0+255),f,b
  5114   0017E6                     i2l2474:
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;timers.c: 56:     if (minutes == 60){
  5118   0017E6  0E3C               	movlw	60
  5119   0017E8  19E2               	xorwf	_minutes& (0+255),w,b
  5120   0017EA  11E3               	iorwf	(_minutes+1)& (0+255),w,b
  5121   0017EC  A4D8               	btfss	status,2,c
  5122   0017EE  EFFB  F00B         	goto	i2u173_41
  5123   0017F2  EFFD  F00B         	goto	i2u173_40
  5124   0017F6                     i2u173_41:
  5125   0017F6  EF03  F00C         	goto	i2l2480
  5126   0017FA                     i2u173_40:
  5127   0017FA                     
  5128                           ; BSR set to: 0
  5129                           ;timers.c: 57:         minutes = 0;
  5130   0017FA  0E00               	movlw	0
  5131   0017FC  6FE3               	movwf	(_minutes+1)& (0+255),b
  5132   0017FE  0E00               	movlw	0
  5133   001800  6FE2               	movwf	_minutes& (0+255),b
  5134   001802                     
  5135                           ; BSR set to: 0
  5136                           ;timers.c: 58:         hours ++ ;
  5137   001802  4BE0               	infsnz	_hours& (0+255),f,b
  5138   001804  2BE1               	incf	(_hours+1)& (0+255),f,b
  5139   001806                     i2l2480:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;timers.c: 60:     if (hours == 24){
  5143   001806  0E18               	movlw	24
  5144   001808  19E0               	xorwf	_hours& (0+255),w,b
  5145   00180A  11E1               	iorwf	(_hours+1)& (0+255),w,b
  5146   00180C  A4D8               	btfss	status,2,c
  5147   00180E  EF0B  F00C         	goto	i2u174_41
  5148   001812  EF0D  F00C         	goto	i2u174_40
  5149   001816                     i2u174_41:
  5150   001816  EF15  F00C         	goto	i2l2488
  5151   00181A                     i2u174_40:
  5152   00181A                     
  5153                           ; BSR set to: 0
  5154                           ;timers.c: 61:         hours = 0;
  5155   00181A  0E00               	movlw	0
  5156   00181C  6FE1               	movwf	(_hours+1)& (0+255),b
  5157   00181E  0E00               	movlw	0
  5158   001820  6FE0               	movwf	_hours& (0+255),b
  5159   001822                     
  5160                           ; BSR set to: 0
  5161                           ;timers.c: 62:         day ++ ;
  5162   001822  4BC8               	infsnz	_day& (0+255),f,b
  5163   001824  2BC9               	incf	(_day+1)& (0+255),f,b
  5164   001826                     
  5165                           ; BSR set to: 0
  5166                           ;timers.c: 63:         week_day ++;
  5167   001826  4A59               	infsnz	_week_day^0,f,c
  5168   001828  2A5A               	incf	(_week_day+1)^0,f,c
  5169   00182A                     i2l2488:
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;timers.c: 65:     if (week_day == 7){
  5173   00182A  0E07               	movlw	7
  5174   00182C  1859               	xorwf	_week_day^0,w,c
  5175   00182E  105A               	iorwf	(_week_day+1)^0,w,c
  5176   001830  A4D8               	btfss	status,2,c
  5177   001832  EF1D  F00C         	goto	i2u175_41
  5178   001836  EF1F  F00C         	goto	i2u175_40
  5179   00183A                     i2u175_41:
  5180   00183A  EF23  F00C         	goto	i2l2492
  5181   00183E                     i2u175_40:
  5182   00183E                     
  5183                           ; BSR set to: 0
  5184                           ;timers.c: 66:         week_day = 0;
  5185   00183E  0E00               	movlw	0
  5186   001840  6E5A               	movwf	(_week_day+1)^0,c
  5187   001842  0E00               	movlw	0
  5188   001844  6E59               	movwf	_week_day^0,c
  5189   001846                     i2l2492:
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;timers.c: 68:     if (month == 1 && year%4 == 0){
  5193   001846  0456               	decf	_month^0,w,c
  5194   001848  1057               	iorwf	(_month+1)^0,w,c
  5195   00184A  A4D8               	btfss	status,2,c
  5196   00184C  EF2A  F00C         	goto	i2u176_41
  5197   001850  EF2C  F00C         	goto	i2u176_40
  5198   001854                     i2u176_41:
  5199   001854  EF4D  F00C         	goto	i2l2502
  5200   001858                     i2u176_40:
  5201   001858                     
  5202                           ; BSR set to: 0
  5203   001858  0E03               	movlw	3
  5204   00185A  15C6               	andwf	_year& (0+255),w,b
  5205   00185C  6E01               	movwf	??_increment_seconds^0,c
  5206   00185E  0E00               	movlw	0
  5207   001860  15C7               	andwf	(_year+1)& (0+255),w,b
  5208   001862  6E02               	movwf	(??_increment_seconds+1)^0,c
  5209   001864  5001               	movf	??_increment_seconds^0,w,c
  5210   001866  1002               	iorwf	(??_increment_seconds+1)^0,w,c
  5211   001868  A4D8               	btfss	status,2,c
  5212   00186A  EF39  F00C         	goto	i2u177_41
  5213   00186E  EF3B  F00C         	goto	i2u177_40
  5214   001872                     i2u177_41:
  5215   001872  EF4D  F00C         	goto	i2l2502
  5216   001876                     i2u177_40:
  5217   001876                     
  5218                           ; BSR set to: 0
  5219                           ;timers.c: 69:         if (day == 30)
  5220   001876  0E1E               	movlw	30
  5221   001878  19C8               	xorwf	_day& (0+255),w,b
  5222   00187A  11C9               	iorwf	(_day+1)& (0+255),w,b
  5223   00187C  A4D8               	btfss	status,2,c
  5224   00187E  EF43  F00C         	goto	i2u178_41
  5225   001882  EF45  F00C         	goto	i2u178_40
  5226   001886                     i2u178_41:
  5227   001886  EF6C  F00C         	goto	i2l2508
  5228   00188A                     i2u178_40:
  5229   00188A                     i2l2498:
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;timers.c: 70:         {;timers.c: 71:             day = 1;
  5233   00188A  0E00               	movlw	0
  5234   00188C  6FC9               	movwf	(_day+1)& (0+255),b
  5235   00188E  0E01               	movlw	1
  5236   001890  6FC8               	movwf	_day& (0+255),b
  5237   001892                     
  5238                           ; BSR set to: 0
  5239                           ;timers.c: 72:             month += 1;
  5240   001892  4A56               	infsnz	_month^0,f,c
  5241   001894  2A57               	incf	(_month+1)^0,f,c
  5242   001896  EF6C  F00C         	goto	i2l2508
  5243   00189A                     i2l2502:
  5244                           
  5245                           ; BSR set to: 0
  5246   00189A  90D8               	bcf	status,0,c
  5247   00189C  3456               	rlcf	_month^0,w,c
  5248   00189E  6ED9               	movwf	fsr2l,c
  5249   0018A0  3457               	rlcf	(_month+1)^0,w,c
  5250   0018A2  6EDA               	movwf	fsr2h,c
  5251   0018A4  0EAA               	movlw	low (_month_days+2)
  5252   0018A6  26D9               	addwf	fsr2l,f,c
  5253   0018A8  0E00               	movlw	high (_month_days+2)
  5254   0018AA  22DA               	addwfc	fsr2h,f,c
  5255   0018AC  CFDE F001          	movff	postinc2,??_increment_seconds
  5256   0018B0  CFDD F002          	movff	postdec2,??_increment_seconds+1
  5257   0018B4  0E01               	movlw	1
  5258   0018B6  2601               	addwf	??_increment_seconds^0,f,c
  5259   0018B8  0E00               	movlw	0
  5260   0018BA  2202               	addwfc	(??_increment_seconds+1)^0,f,c
  5261   0018BC  51C8               	movf	_day& (0+255),w,b
  5262   0018BE  1801               	xorwf	??_increment_seconds^0,w,c
  5263   0018C0  E107               	bnz	i2u179_41
  5264   0018C2  51C9               	movf	(_day+1)& (0+255),w,b
  5265   0018C4  1802               	xorwf	(??_increment_seconds+1)^0,w,c
  5266   0018C6  A4D8               	btfss	status,2,c
  5267   0018C8  EF68  F00C         	goto	i2u179_41
  5268   0018CC  EF6A  F00C         	goto	i2u179_40
  5269   0018D0                     i2u179_41:
  5270   0018D0  EF6C  F00C         	goto	i2l2508
  5271   0018D4                     i2u179_40:
  5272   0018D4  EF45  F00C         	goto	i2l2498
  5273   0018D8                     i2l2508:
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;timers.c: 80:     if (month == 12)
  5277   0018D8  0E0C               	movlw	12
  5278   0018DA  1856               	xorwf	_month^0,w,c
  5279   0018DC  1057               	iorwf	(_month+1)^0,w,c
  5280   0018DE  A4D8               	btfss	status,2,c
  5281   0018E0  EF74  F00C         	goto	i2u180_41
  5282   0018E4  EF76  F00C         	goto	i2u180_40
  5283   0018E8                     i2u180_41:
  5284   0018E8  EF7C  F00C         	goto	i2l209
  5285   0018EC                     i2u180_40:
  5286   0018EC                     
  5287                           ; BSR set to: 0
  5288                           ;timers.c: 81:     {;timers.c: 82:         month = 0;
  5289   0018EC  0E00               	movlw	0
  5290   0018EE  6E57               	movwf	(_month+1)^0,c
  5291   0018F0  0E00               	movlw	0
  5292   0018F2  6E56               	movwf	_month^0,c
  5293   0018F4                     
  5294                           ; BSR set to: 0
  5295                           ;timers.c: 83:         year += 1;
  5296   0018F4  4BC6               	infsnz	_year& (0+255),f,b
  5297   0018F6  2BC7               	incf	(_year+1)& (0+255),f,b
  5298   0018F8                     i2l209:
  5299                           
  5300                           ; BSR set to: 0
  5301   0018F8  0012               	return		;funcret
  5302   0018FA                     __end_of_increment_seconds:
  5303                           	callstack 0
  5304                           
  5305                           	psect	rparam
  5306   000000                     
  5307                           	psect	temp
  5308   00005B                     btemp:
  5309                           	callstack 0
  5310   00005B                     	ds	1
  5311   000000                     int$flags	set	btemp
  5312   000000                     wtemp8	set	btemp+1
  5313   000000                     ttemp5	set	btemp+1
  5314   000000                     ttemp6	set	btemp+4
  5315   000000                     ttemp7	set	btemp+8
  5316                           
  5317                           	psect	idloc
  5318                           
  5319                           ;Config register IDLOC0 @ 0x200000
  5320                           ;	unspecified, using default values
  5321   200000                     	org	2097152
  5322   200000  0FFF               	dw	4095
  5323                           
  5324                           ;Config register IDLOC1 @ 0x200002
  5325                           ;	unspecified, using default values
  5326   200002                     	org	2097154
  5327   200002  0FFF               	dw	4095
  5328                           
  5329                           ;Config register IDLOC2 @ 0x200004
  5330                           ;	unspecified, using default values
  5331   200004                     	org	2097156
  5332   200004  0FFF               	dw	4095
  5333                           
  5334                           ;Config register IDLOC3 @ 0x200006
  5335                           ;	unspecified, using default values
  5336   200006                     	org	2097158
  5337   200006  0FFF               	dw	4095
  5338                           
  5339                           ;Config register IDLOC4 @ 0x200008
  5340                           ;	unspecified, using default values
  5341   200008                     	org	2097160
  5342   200008  0FFF               	dw	4095
  5343                           
  5344                           ;Config register IDLOC5 @ 0x20000A
  5345                           ;	unspecified, using default values
  5346   20000A                     	org	2097162
  5347   20000A  0FFF               	dw	4095
  5348                           
  5349                           ;Config register IDLOC6 @ 0x20000C
  5350                           ;	unspecified, using default values
  5351   20000C                     	org	2097164
  5352   20000C  0FFF               	dw	4095
  5353                           
  5354                           ;Config register IDLOC7 @ 0x20000E
  5355                           ;	unspecified, using default values
  5356   20000E                     	org	2097166
  5357   20000E  0FFF               	dw	4095
  5358                           
  5359                           	psect	config
  5360                           
  5361                           ;Config register CONFIG1L @ 0x300000
  5362                           ;	External Oscillator mode Selection bits
  5363                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5364                           ;	Power-up default value for COSC bits
  5365                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5366   300000                     	org	3145728
  5367   300000  AA                 	db	170
  5368                           
  5369                           ;Config register CONFIG1H @ 0x300001
  5370                           ;	unspecified, using default values
  5371                           ;	Clock Out Enable bit
  5372                           ;	CLKOUTEN = 0x1, unprogrammed default
  5373                           ;	Clock Switch Enable bit
  5374                           ;	CSWEN = 0x1, unprogrammed default
  5375                           ;	Fail-Safe Clock Monitor Enable bit
  5376                           ;	FCMEN = 0x1, unprogrammed default
  5377   300001                     	org	3145729
  5378   300001  FF                 	db	255
  5379                           
  5380                           ;Config register CONFIG2L @ 0x300002
  5381                           ;	unspecified, using default values
  5382                           ;	Master Clear Enable bit
  5383                           ;	MCLRE = 0x1, unprogrammed default
  5384                           ;	Power-up Timer Enable bit
  5385                           ;	PWRTE = 0x1, unprogrammed default
  5386                           ;	Low-power BOR enable bit
  5387                           ;	LPBOREN = 0x1, unprogrammed default
  5388                           ;	Brown-out Reset Enable bits
  5389                           ;	BOREN = 0x3, unprogrammed default
  5390   300002                     	org	3145730
  5391   300002  FF                 	db	255
  5392                           
  5393                           ;Config register CONFIG2H @ 0x300003
  5394                           ;	unspecified, using default values
  5395                           ;	Brown Out Reset Voltage selection bits
  5396                           ;	BORV = 0x3, unprogrammed default
  5397                           ;	ZCD Disable bit
  5398                           ;	ZCD = 0x1, unprogrammed default
  5399                           ;	PPSLOCK bit One-Way Set Enable bit
  5400                           ;	PPS1WAY = 0x1, unprogrammed default
  5401                           ;	Stack Full/Underflow Reset Enable bit
  5402                           ;	STVREN = 0x1, unprogrammed default
  5403                           ;	Debugger Enable bit
  5404                           ;	DEBUG = 0x1, unprogrammed default
  5405                           ;	Extended Instruction Set Enable bit
  5406                           ;	XINST = 0x1, unprogrammed default
  5407   300003                     	org	3145731
  5408   300003  FF                 	db	255
  5409                           
  5410                           ;Config register CONFIG3L @ 0x300004
  5411                           ;	WDT Period Select bits
  5412                           ;	WDTCPS = 0x1F, unprogrammed default
  5413                           ;	WDT operating mode
  5414                           ;	WDTE = OFF, WDT Disabled
  5415   300004                     	org	3145732
  5416   300004  9F                 	db	159
  5417                           
  5418                           ;Config register CONFIG3H @ 0x300005
  5419                           ;	unspecified, using default values
  5420                           ;	WDT Window Select bits
  5421                           ;	WDTCWS = 0x7, unprogrammed default
  5422                           ;	WDT input clock selector
  5423                           ;	WDTCCS = 0x7, unprogrammed default
  5424   300005                     	org	3145733
  5425   300005  FF                 	db	255
  5426                           
  5427                           ;Config register CONFIG4L @ 0x300006
  5428                           ;	unspecified, using default values
  5429                           ;	Write Protection Block 0
  5430                           ;	WRT0 = 0x1, unprogrammed default
  5431                           ;	Write Protection Block 1
  5432                           ;	WRT1 = 0x1, unprogrammed default
  5433                           ;	Write Protection Block 2
  5434                           ;	WRT2 = 0x1, unprogrammed default
  5435                           ;	Write Protection Block 3
  5436                           ;	WRT3 = 0x1, unprogrammed default
  5437                           ;	Write Protection Block 3
  5438                           ;	WRT4 = 0x1, unprogrammed default
  5439                           ;	Write Protection Block 3
  5440                           ;	WRT5 = 0x1, unprogrammed default
  5441                           ;	Write Protection Block 3
  5442                           ;	WRT6 = 0x1, unprogrammed default
  5443                           ;	Write Protection Block 3
  5444                           ;	WRT7 = 0x1, unprogrammed default
  5445   300006                     	org	3145734
  5446   300006  FF                 	db	255
  5447                           
  5448                           ;Config register CONFIG4H @ 0x300007
  5449                           ;	unspecified, using default values
  5450                           ;	Configuration Register Write Protection bit
  5451                           ;	WRTC = 0x1, unprogrammed default
  5452                           ;	Boot Block Write Protection bit
  5453                           ;	WRTB = 0x1, unprogrammed default
  5454                           ;	Data EEPROM Write Protection bit
  5455                           ;	WRTD = 0x1, unprogrammed default
  5456                           ;	Scanner Enable bit
  5457                           ;	SCANE = 0x1, unprogrammed default
  5458                           ;	Low Voltage Programming Enable bit
  5459                           ;	LVP = 0x1, unprogrammed default
  5460   300007                     	org	3145735
  5461   300007  FF                 	db	255
  5462                           
  5463                           ;Config register CONFIG5L @ 0x300008
  5464                           ;	unspecified, using default values
  5465                           ;	UserNVM Program Memory Code Protection bit
  5466                           ;	CP = 0x1, unprogrammed default
  5467                           ;	DataNVM Memory Code Protection bit
  5468                           ;	CPD = 0x1, unprogrammed default
  5469   300008                     	org	3145736
  5470   300008  FF                 	db	255
  5471                           
  5472                           ;Config register CONFIG5H @ 0x300009
  5473                           ;	unspecified, using default values
  5474   300009                     	org	3145737
  5475   300009  FF                 	db	255
  5476                           
  5477                           ;Config register CONFIG6L @ 0x30000A
  5478                           ;	unspecified, using default values
  5479                           ;	Table Read Protection Block 0
  5480                           ;	EBTR0 = 0x1, unprogrammed default
  5481                           ;	Table Read Protection Block 1
  5482                           ;	EBTR1 = 0x1, unprogrammed default
  5483                           ;	Table Read Protection Block 2
  5484                           ;	EBTR2 = 0x1, unprogrammed default
  5485                           ;	Table Read Protection Block 3
  5486                           ;	EBTR3 = 0x1, unprogrammed default
  5487                           ;	Table Read Protection Block 4
  5488                           ;	EBTR4 = 0x1, unprogrammed default
  5489                           ;	Table Read Protection Block 5
  5490                           ;	EBTR5 = 0x1, unprogrammed default
  5491                           ;	Table Read Protection Block 6
  5492                           ;	EBTR6 = 0x1, unprogrammed default
  5493                           ;	Table Read Protection Block 7
  5494                           ;	EBTR7 = 0x1, unprogrammed default
  5495   30000A                     	org	3145738
  5496   30000A  FF                 	db	255
  5497                           
  5498                           ;Config register CONFIG6H @ 0x30000B
  5499                           ;	unspecified, using default values
  5500                           ;	Boot Block Table Read Protection bit
  5501                           ;	EBTRB = 0x1, unprogrammed default
  5502   30000B                     	org	3145739
  5503   30000B  FF                 	db	255
  5504                           tosu	equ	0xFFF
  5505                           tosh	equ	0xFFE
  5506                           tosl	equ	0xFFD
  5507                           stkptr	equ	0xFFC
  5508                           pclatu	equ	0xFFB
  5509                           pclath	equ	0xFFA
  5510                           pcl	equ	0xFF9
  5511                           tblptru	equ	0xFF8
  5512                           tblptrh	equ	0xFF7
  5513                           tblptrl	equ	0xFF6
  5514                           tablat	equ	0xFF5
  5515                           prodh	equ	0xFF4
  5516                           prodl	equ	0xFF3
  5517                           indf0	equ	0xFEF
  5518                           postinc0	equ	0xFEE
  5519                           postdec0	equ	0xFED
  5520                           preinc0	equ	0xFEC
  5521                           plusw0	equ	0xFEB
  5522                           fsr0h	equ	0xFEA
  5523                           fsr0l	equ	0xFE9
  5524                           wreg	equ	0xFE8
  5525                           indf1	equ	0xFE7
  5526                           postinc1	equ	0xFE6
  5527                           postdec1	equ	0xFE5
  5528                           preinc1	equ	0xFE4
  5529                           plusw1	equ	0xFE3
  5530                           fsr1h	equ	0xFE2
  5531                           fsr1l	equ	0xFE1
  5532                           bsr	equ	0xFE0
  5533                           indf2	equ	0xFDF
  5534                           postinc2	equ	0xFDE
  5535                           postdec2	equ	0xFDD
  5536                           preinc2	equ	0xFDC
  5537                           plusw2	equ	0xFDB
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8

Data Sizes:
    Strings     46
    Constant    0
    Data        38
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     85      90
    BANK0           160     72     134
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    S1964$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 4
		 -> main@ADC(BANK0[3]), main@Yea(BANK0[4]), main@Mon(BANK0[2]), main@Day(BANK0[2]), 
		 -> main@Hou(BANK0[2]), main@Min(BANK0[2]), main@Sec(BANK0[2]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1916$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S1916$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    ADC2String@buf	PTR unsigned char  size(2) Largest target is 4
		 -> main@ADC(BANK0[3]), main@Yea(BANK0[4]), main@Mon(BANK0[2]), main@Day(BANK0[2]), 
		 -> main@Hou(BANK0[2]), main@Min(BANK0[2]), main@Sec(BANK0[2]), 

    LCD_sendstring@strlst	PTR PTR unsigned char  size(2) Largest target is 16
		 -> main@lst(BANK0[16]), 

    sp__get_week_day	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    main@lst	PTR unsigned char [8] size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), NULL(NULL[0]), 
		 -> main@ADC(BANK0[3]), main@Yea(BANK0[4]), main@Mon(BANK0[2]), main@Day(BANK0[2]), 
		 -> main@Hou(BANK0[2]), main@Min(BANK0[2]), main@Sec(BANK0[2]), 

    main@F14264	PTR unsigned char [8] size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _set_light->_ADC_getval
    _LCD_sendstring->_LCD_setline
    _LCD_setline->_LCD_sendbyte
    _LCD_clear->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _atoi->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_increment_seconds

Critical Paths under _main in BANK0

    _main->_ADC2String
    _ADC2String->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0   26458
                                             33 BANK0     39    39      0
                         _ADC2String
                         _ADC_getval
                           _ADC_init
                    _Interrupts_init
                           _LCD_Init
                          _LCD_clear
                     _LCD_sendstring
                         _Light_init
                        _Timer0_init
                            _get_day
                          _get_hours
                        _get_minutes
                          _get_month
                        _get_seconds
                       _get_week_day
                           _get_year
                          _set_light
 ---------------------------------------------------------------------------------
 (1) _set_light                                            4     0      4     218
                                              8 COMRAM     4     0      4
                         _ADC_getval (ARG)
                          _get_hours (ARG)
 ---------------------------------------------------------------------------------
 (1) _get_year                                             2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_week_day                                         2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_seconds                                          2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_month                                            2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_minutes                                          2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_hours                                            2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Light_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_sendstring                                       6     4      2    6720
                                              9 COMRAM     6     4      2
                       _LCD_sendbyte
                        _LCD_setline
 ---------------------------------------------------------------------------------
 (2) _LCD_setline                                          2     0      2    3370
                                              7 COMRAM     2     0      2
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            1     1      0    3118
                                              7 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0    3206
                                              7 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendbyte                                         2     1      1    3118
                                              5 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (4) _LCD_sendnibble                                       1     1      0      88
                                              4 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (5) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC2String                                           6     0      6   12282
                                             27 BANK0      6     0      6
                         _ADC_getval (ARG)
                            _get_day (ARG)
                          _get_hours (ARG)
                        _get_minutes (ARG)
                          _get_month (ARG)
                        _get_seconds (ARG)
                           _get_year (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10051
                                              8 BANK0     19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    9019
                                              0 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           25    19      6    8525
                                             63 COMRAM    22    16      6
                               _atoi
                              _fputc
                            _isdigit
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                32    22     10    4187
                                             31 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2775
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1357
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) ___lomod                                             17     1     16     412
                                              4 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (6) ___lodiv                                             25     9     16     421
                                              4 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (5) _atoi                                                 9     7      2    2174
                                             10 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              5     3      2     259
                                              4 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              4     2      2     281
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1182
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0       0
                                              2 COMRAM     2     2      0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (11) _increment_seconds                                   2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC2String
     _ADC_getval (ARG)
     _get_day (ARG)
     _get_hours (ARG)
     _get_minutes (ARG)
     _get_month (ARG)
     _get_seconds (ARG)
     _get_year (ARG)
     _sprintf (ARG)
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _fputc
             _putch
           _isdigit
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
               _fputs
                 _fputc
   _ADC_getval
   _ADC_init
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LCD_clear
     _LCD_sendbyte
   _LCD_sendstring
     _LCD_sendbyte
     _LCD_setline
       _LCD_sendbyte
   _Light_init
   _Timer0_init
   _get_day
   _get_hours
   _get_minutes
   _get_month
   _get_seconds
   _get_week_day
   _get_year
   _set_light
     _ADC_getval (ARG)
     _get_hours (ARG)

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      49        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      20       7       12.5%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     48      86       5       83.8%
BITBIGSFRllllhh     84      0       0      41        0.0%
BITBIGSFRlllllh     5E      0       0      44        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     55      5A       1       95.7%
BITBIGSFRhhll       43      0       0      34        0.0%
BITBIGSFRllllll     3A      0       0      47        0.0%
BITBIGSFRlllllh     33      0       0      43        0.0%
BITBIGSFRhhlhh      1B      0       0      33        0.0%
BITBIGSFRllllhh     14      0       0      38        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllhl      8      0       0      42        0.0%
BITBIGSFRlllllh      7      0       0      45        0.0%
BITBIGSFRllllhh      6      0       0      40        0.0%
BITBIGSFRllllhh      3      0       0      39        0.0%
BITBIGSFRhlh         3      0       0      35        0.0%
BITBIGSFRlllllh      1      0       0      46        0.0%
BITBIGSFRlllh        1      0       0      37        0.0%
BITBIGSFRlh          1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     100      48        0.0%
DATA                 0      0     100       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Nov 09 16:56:56 2022

             ?_get_minutes 0005               ?_get_seconds 0005              ?_get_week_day 0005  
      ___wmul@multiplicand 0007          ??_Interrupts_init 0005                        l300 1F76  
                      l212 2352                        l221 237A                        l151 233E  
                      l303 2240                        l215 2366                        l240 235C  
                      l232 1BD4                        l321 1A06                        l225 1BD4  
                      l218 2370                        l315 1A06                        l243 2348  
                      l261 2244                        l263 2252                        l264 2270  
                      l192 21BC                        l360 2130                        l329 1642  
                      l258 2324                        l290 1FBA                        l283 2332  
                      l355 237E                        l364 22C2                        l348 1E26  
                      l292 1FD0                        l294 1FDE                        l286 1F8E  
                      l359 2132                        l288 1FA4                        l297 230A  
                      l802 1AD6                        l812 1C84                        l809 1AF6  
                      l819 1CA4                        _day 00C8                        _pad 1E28  
                      wreg 000FE8                       l1111 10FE                       l1042 20E4  
                     l1140 1798                       l1070 1EAE                       l1118 2092  
                     l1143 17A0                       l1072 1ED0                       l1146 229C  
                     l1154 2178                       l1067 1E6C                       l1180 2382  
                     l2300 2334                       l2060 2326                       l2140 1F9E  
                     l1077 1138                       l2062 2328                       l2150 1FD2  
                     l2142 1FA6                       l2134 1F7A                       l2230 2302  
                     l2310 1F14                       l2302 1ED2                       l1087 12F8  
                     l1079 1140                       l2064 2330                       l2152 1FD6  
                     l2144 1FB4                       l2136 1F88                       l2224 22EA  
                     l2320 1F40                       l2312 1F1C                       l2304 1EEA  
                     l2400 1B48                       l1169 1D6E                       l1177 2200  
                     l3050 16E6                       l2330 230C                       l2146 1FBC  
                     l2138 1F90                       l2226 22F4                       l2322 1F4A  
                     l2314 1F26                       l2306 1F00                       l2250 193A  
                     l2242 18FA                       l2332 2316                       l2148 1FCA  
                     l2228 22FC                       l2324 1F58                       l2316 1F2E  
                     l2308 1F06                       l2260 1992                       l2252 194E  
                     l2244 190C                       l2340 237C                       l3046 0ECE  
                     l2334 231E                       l2326 1F62                       l2318 1F38  
                     l2342 2202                       l2270 19E4                       l2262 19A0  
                     l2254 195C                       l2246 191A                       l2430 1BB4  
                     l2422 1B94                       l2414 1B74                       l2406 1B54  
                     l3048 10B2                       l2336 2320                       l2328 1F6C  
                     l2344 220A                       l2272 19F8                       l2264 19B4  
                     l2256 1970                       l2248 192C                       l2432 1BC8  
                     l2424 1BA8                       l2416 1B88                       l2408 1B68  
                     l2338 2322                       l2346 2214                       l2266 19C2  
                     l2258 197E                       l2450 1622                       l2442 14C6  
                     l2290 2184                       l2370 2354                       l2700 1A6E  
                     l2268 19D6                       l2452 1626                       l2444 14D6  
                     l2436 14BE                       l2292 2198                       l2364 235E  
                     l2348 234A                       l2372 2340                       l2460 2114  
                     l2702 1A9C                       l2710 1BD6                       l2374 2242  
                     l2446 1522                       l2294 21AC                       l2286 217A  
                     l2366 2368                       l2390 1B16                       l2382 1AF8  
                     l2462 212A                       l2454 20E6                       l2704 1ABC  
                     l2720 1C4C                       l2712 1BF4                       l2376 2258  
                     l2448 156E                       l2296 21B8                       l2288 2182  
                     l2368 2372                       l2392 1B28                       l2384 1B0A  
                     l2456 20F8                       l2810 16C4                       l2802 165C  
                     l2706 1ABE                       l2722 1C6C                       l2714 1BFC  
                     l2730 1E4A                       l2378 2268                       l2298 21BA  
                     l2458 210E                       l2820 176A                       l2812 16FC  
                     l2804 167C                       l2708 1AD0                       l2724 1C7E  
                     l2716 1C10                       l2660 1CA6                       l2740 1E90  
                     l2732 1E58                       l2900 204C                       l2750 2138  
                     l2822 177C                       l2806 16B4                       l2718 1C1E  
                     l2670 1D28                       l2662 1CB8                       l2742 1EBC  
                     l2734 1E64                       l2726 1E28                       l2830 0E58  
                     l2902 2068                       l2910 20A6                       l2398 1B34  
                     l2744 2272                       l2752 214C                       l2808 16BC  
                     l2664 1CCA                       l2680 21E0                       l2736 1E78  
                     l2728 1E36                       l2760 1100                       l2840 0E86  
                     l2832 0E66                       l2904 2088                       l2912 20AE  
                     l2920 1D70                       l2682 229E                       l2754 216E  
                     l2818 1736                       l2690 1A14                       l2666 1CD4  
                     l2674 21BE                       l2738 1E8C                       l2770 1170  
                     l2762 1110                       l2850 0EEE                       l2842 0E98  
                     l2834 0E74                       l2914 20B6                       l2930 1DEA  
                     l2922 1D84                       l2684 22BA                       l2756 2172  
                     l2748 2134                       l2692 1A32                       l2668 1CF2  
                     l2676 21CA                       l2780 1202                       l2772 117A  
                     l2764 1112                       l2860 0F8A                       l2852 0F16  
                     l2836 0E78                       l2828 0E30                       l2916 20D2  
                     l2908 2094                       l2932 1E0A                       l2924 1DA4  
                     l2940 1306                       l2694 1A3A                       l2678 21DC  
                     l2790 12CA                       l2774 1180                       l2782 1266  
                     l2766 112C                       l2870 1004                       l2854 0F4C  
                     l2846 0EA4                       l2838 0E84                       l2926 1DB6  
                     l2950 1346                       l2942 130A                       l2934 12FA  
                     ?_pad 0015                       l2696 1A4E                       l2688 1A08  
                     l2784 1278                       l2792 12D8                       l2776 11F6  
                     l2768 1168                       l2872 1060                       l2880 10C0  
                     l2864 0F98                       l2856 0F5C                       l2848 0EDC  
                     l2928 1DD6                       l2960 13FE                       l2952 136A  
                     l2944 130E                       l2936 12FE                       l2698 1A5C  
                     l2786 1296                       l2778 11FC                       l2866 0FD4  
                     l2858 0F6A                       l2970 144C                       l2962 1422  
                     l2954 138E                       l2946 131E                       l2938 1302  
                     l2796 1644                       l2788 12B0                       l2868 0FE4  
                     l2884 10D2                       l2980 1474                       l2972 1454  
                     l2964 142E                       l2956 13B2                       l2948 1322  
                     l2798 1658                       l2878 1090                       l2982 1480  
                     l2974 145C                       l2966 143A                       l2958 13DA  
                     l2984 149C                       l2976 1464                       l2968 1444  
                     l2898 2040                       l2978 146C                       STR_1 0E1C  
                     STR_2 0E14                       STR_3 0E10                       STR_4 0E28  
                     STR_5 0E18                       STR_6 0E24                       STR_7 0E20  
                     STR_8 0E2C                       STR_9 0E01                       u2000 1E58  
                     u2001 1E54                       u2010 1EAE                       u2011 1EAA  
                     u2020 1EBC                       u2100 1296                       u2021 1EB8  
                     u2101 1292                       u2030 2296                       u2110 12B0  
                     u2031 2290                       u2111 12AC                       u2040 2298  
                     u2120 12CA                       u2200 0F16                       u1320 1F88  
                     u2121 12C6                       u2201 0F12                       u1321 1F84  
                     u2050 214C                       u2130 12D8                       u2210 0F5C  
                     u1330 1F9E                       u2051 2148                       u2131 12D4  
                     u2211 0F58                       u1331 1F9A                       u2060 216E  
                     u2140 167C                       u2220 0FD4                       u1340 1FB4  
                     u1500 19D6                       u2061 216A                       u2141 1678  
                     u2221 0FD0                       u1341 1FB0                       u1501 19D2  
                     u2150 16B0                       u2070 1110                       u2230 1004  
                     u1350 1FCA                       u1510 19F8                       u2151 16AC  
                     u2071 110C                       u2231 1000                       u1351 1FC6  
                     u1511 19F4                       u2160 176A                       u2080 112C  
                     u2240 2088                       u1440 190C                       u1520 2198  
                     u1600 1B68                       u2161 1766                       u2081 1128  
                     u2241 2084                       u1425 22F2                       u1441 1908  
                     u1521 2194                       u1601 1B64                       u2170 177C  
                     u2090 1278                       u2250 1D84                       u1426 22F4  
                     u1450 192C                       u1610 1B88                       u2171 1778  
                     u2091 1274                       u2251 1D80                       u2307 2204  
                     u1451 1928                       u1611 1B84                       u2180 0E58  
                     u2260 1DB6                       u1460 194E                       u1620 1BA8  
                     u1700 212A                       u2181 0E54                       u2261 1DB2  
                     u2317 221A                       u1461 194A                       u1621 1BA4  
                     u1701 2126                       u2190 0EEE                       u2270 1DEA  
                     u1470 1970                       u1630 1BC8                       u2191 0EEA  
                     u2271 1DE6                       u2407 232A                       u2327 1EF4  
                     u1471 196C                       u1631 1BC4                       u1560 2252  
                     u1480 1992                       u1640 151E                       u1561 224E  
                     u2337 1F08                       u1481 198E                       u2281 1428  
                     u1490 19B4                       u1650 155E                       u1570 1B0A  
                     u2347 1F16                       u1491 19B0                       u1571 1B06  
                     u1900 1D28                       u1660 156E                       u1580 1B28  
                     u1901 1D24                       u2357 1F28                       u1661 156A  
                     u1581 1B24                       u1910 2200                       u1670 1642  
                     u1590 1B48                       u1911 21FC                       u2367 1F3A  
                     u1671 163E                       u1647 1514                       u1591 1B44  
                     u1680 20F8                       u1921 1A0E                       u2377 1F50  
                     u1657 1554                       u1681 20F4                       u2297 14A8  
                     u1930 1A32                       u1690 210E                       u1931 1A2E  
                     u2387 2304                       u1691 210A                       u1940 1A5C  
                     u1941 1A58                       u2397 1FD8                       u1950 1A9C  
                     u1870 1CB8                       u1951 1A98                       u1871 1CB4  
                     u1960 1BF4                       u1880 1CCA                       u1961 1BF0  
                     u1881 1CC6                       u1970 1C1E                       u1890 1CF2  
                     u1971 1C1A                       u1891 1CEE                       u1980 1C4C  
                     u1981 1C48                       u1990 1E36                       u1991 1E32  
                     _dbuf 0100                       _atoi 1644                       _main 12FA  
                     _prec 00DE                       _year 00C6                       pad@i 001C  
                     pad@p 0019                       fsr0h 000FEA                       fsr1h 000FE2  
                     indf0 000FEF                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       pad@w 001E  
                     fsr2l 000FD9                       btemp 005B                       _utoa 1100  
             ?_LCD_setline 0008                       prodh 000FF4                       prodl 000FF3  
                     start 005E           __end_of_ADC_init 2326            __end_of_HighISR 005E  
             ___param_bank 000000             ??_get_week_day 0007                      ??_pad 001B  
         __end_of_LCD_Init 1F78                      ?_atoi 000B                      ?_main 0001  
                    _ADPCH 000F5F                      STR_10 0E06                      STR_11 0E0B  
                    ?_utoa 0020            __end_of___lodiv 1AF8            __end_of___lomod 1CA6  
                    i2l209 18F8                      i2l159 0052                      i2l199 17C6  
             vfpfcnvrt@fmt 0042                      _TMR0H 000FD4                      _TMR0L 000FD3  
          __end_of_get_day 237C                      _flags 0058                      _fputc 1CA6  
                    _fputs 21BE            __end_of_isdigit 229E                      _hours 00E0  
                    _month 0056                      atoi@n 0012                      pad@fp 0015  
                    atoi@s 000B                      _width 00DC                      _putch 2382  
          __end_of_isspace 217A              ?_LCD_sendbyte 0006                      tablat 000FF5  
                    ttemp5 005C                      ttemp6 005F                      ttemp7 0063  
                    utoa@d 0022                      utoa@i 003E                      utoa@n 0036  
                    utoa@p 0032                      utoa@w 0034                      status 000FD8  
                    wtemp8 005C            __end_of_sprintf 20E6           ___lodiv@dividend 0005  
          __initialization 1FE0               __end_of_atoi 17A2               __end_of_main 14BE  
               _Light_init 237C               __end_of_utoa 12FA               ??_ADC2String 0056  
        __end_of_LCD_E_TOG 2334                     ??_atoi 000D                     ??_main 0081  
                   ??_utoa 002A              __activetblptr 000003           ___lodiv@quotient 0015  
        __end_of_LCD_clear 2242                     ?_fputc 0005                     ?_fputs 000E  
                   _ADRESH 000F64              ADC2String@buf 007B             ??_LCD_sendbyte 0007  
                   ?_putch 0001                     i2l2500 1892                     i2l2510 18EC  
                   i2l2502 189A                     i2l2512 18F4                     i2l2508 18D8  
                   i2l2470 17DA                     i2l2480 1806                     i2l2472 17E2  
                   i2l2464 17A2                     i2l2490 183E                     i2l2482 181A  
                   i2l2474 17E6                     i2l2466 17B6                     i2l2570 0026  
                   i2l2492 1846                     i2l2484 1822                     i2l2476 17FA  
                   i2l2468 17BE                     i2l2572 003A                     i2l2494 1858  
                   i2l2486 1826                     i2l2478 1802                     i2l2574 0046  
                   i2l2566 0012                     i2l2496 1876                     i2l2488 182A  
                   i2l2576 004E                     i2l2568 0022                     i2l2498 188A  
            vfpfcnvrt@done 0052                  ??_HighISR 0003         __end_of_ADC2String 1E28  
             ??_ADC_getval 0007              ??_Timer0_init 0005               vfprintf@cfmt 0066  
         __end_of_get_year 234A                     ___wmul 229E                  ??___lodiv 0015  
                ??___lomod 0015                     clear_0 201E                     clear_1 202A  
                   isa$std 000001                     pad@buf 0017                  ??_get_day 0007  
                   fputc@c 0005                     fputs@c 0012                     fputs@i 0013  
             __pdataCOMRAM 0059                     fputs@s 000E                  ??_isdigit 0007  
             __mediumconst 0000                  ??_isspace 0007                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ?_ADC_init 0001  
                   putch@c 0001           __end_of_vfprintf 2094                     utoa@fp 0020  
                ??_sprintf 0056         __end_of_ADC_getval 2272       __end_of_get_week_day 1BD6  
               __accesstop 0060    __end_of__initialization 2036                  ?_LCD_Init 0001  
            ___rparam_used 000001            _Interrupts_init 2334             __pcstackCOMRAM 0001  
              ?_Light_init 0001               __pidataBANK0 22C4              __end_of_fputc 1D70  
            __end_of_fputs 2202              __end_of_putch 2384        __end_of_Timer0_init 21BE  
               ??_ADC_init 0005                    ??_fputc 0009                    ??_fputs 0012  
                  ??_putch 0005                 __pbssBANK0 00CC                 __pbssBANK1 0100  
               ??_LCD_Init 0008             _LCD_sendnibble 1F78             _LCD_sendstring 14BE  
                  ?___wmul 0005       __end_of_LCD_sendbyte 230C                  ?_get_year 0005  
         ___lomod@dividend 0005     __end_of_LCD_sendnibble 1FE0    __end_of_Interrupts_init 2340  
                  _HighISR 0008     __end_of_LCD_sendstring 1644                  _ADREFbits 000F58  
          LCD_sendstring@i 000E                    __Hparam 0000                    __Lparam 0000  
              _Timer0_init 217A          __end_of_get_hours 2372          __end_of_get_month 235E  
                  ___lodiv 1A08                    ___lomod 1BD6                  ?_vfprintf 0060  
             __psmallconst 0E00                    __pcinit 1FE0                    __ramtop 0E00  
                  __ptext0 12FA                    __ptext1 20E6                    __ptext2 2340  
                  __ptext3 1AF8                    __ptext4 234A                    __ptext5 2354  
                  __ptext6 235E                    __ptext7 2368                    __ptext8 2372  
                  __ptext9 217A                    _get_day 2372                    _isdigit 2272  
                  _minutes 00E2                    _seconds 00E4                    _isspace 2134  
                _LCD_E_TOG 2326            LCD_setline@line 0008                    main@ADC 008B  
                  atoi@neg 0010                    main@Day 00A4                    main@Hou 00A2  
                  main@Min 00A0                    main@Sec 009E                    main@Mon 00A6  
                  main@Yea 0087                    _sprintf 2094                    main@lst 008E  
               ??_get_year 0007                  _LCD_clear 2202       end_of_initialization 2036  
      set_light@luminosity 000B            ?_LCD_sendnibble 0001           ADC_getval@tmpval 0007  
                  fputc@fp 0007                    fputs@fp 0010          __end_of_set_light 2134  
          ?_LCD_sendstring 000A                 _month_days 00A8          __end_of_vfpfcnvrt 1100  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE           vfpfcnvrt@convarg 004A  
               main@F14262 00C2                 main@F14264 00CC                 ??_vfprintf 0056  
             _get_week_day 1AF8                  _PORTAbits 000F89                  _PORTBbits 000F8A  
                _PORTFbits 000F8E                  _PORTGbits 000F8F                 ?_LCD_E_TOG 0001  
                _TRISAbits 000F81                  _TRISBbits 000F82                  _TRISCbits 000F83  
                _TRISEbits 000F85                  _TRISFbits 000F86                  _TRISGbits 000F87  
                _TRISHbits 000F88                 ?_LCD_clear 0001                _CM1CON0bits 000ED0  
              _CM1CON1bits 000ED1           ?_Interrupts_init 0001          _increment_seconds 17A2  
       ?_increment_seconds 0001              ??_get_minutes 0007              ??_get_seconds 0007  
             ??_Light_init 0005                ADC2String@x 007D        ??_increment_seconds 0001  
              vfpfcnvrt@ap 0044                vfpfcnvrt@cp 0054                vfpfcnvrt@fp 0040  
           __end_of___wmul 22C4       LCD_sendnibble@number 0005              __pidataCOMRAM 2380  
      start_initialization 1FE0            ___lodiv@divisor 000D            ___lodiv@counter 001D  
              __end_of_pad 1ED2  __end_of_increment_seconds 18FA         __end_of_Light_init 2380  
             _LCD_sendbyte 22E8              ??_LCD_setline 000A                vfprintf@fmt 0062  
                 ??___wmul 0009       LCD_sendstring@strlst 000A                __pdataBANK0 00A8  
      __end_of_get_minutes 2368        __end_of_get_seconds 2354        main@day_of_the_week 0083  
              __pbssCOMRAM 0056                ??_LCD_E_TOG 0005              __pcstackBANK0 0060  
              ??_LCD_clear 0008                   ?_HighISR 0001               ?_Timer0_init 0001  
                __pintcode 0008        __end_of_LCD_setline 1A08                   ?___lodiv 0005  
                 ?___lomod 0005                  _get_hours 2368                  _get_month 2354  
                 ?_get_day 0005         set_light@curr_hour 0009            ___lomod@divisor 000D  
              __smallconst 0E00            ___lomod@counter 0015                   ?_isdigit 0005  
                 ?_isspace 0005           ??_LCD_sendnibble 0005                   _ADC_init 230C  
         ??_LCD_sendstring 000C                   ?_sprintf 0068           LCD_sendbyte@Byte 0007  
                 _LCD_Init 1ED2           LCD_sendbyte@type 0006             ___wmul@product 0009  
                 _LATAbits 000F79                   _LATBbits 000F7A                   _LATCbits 000F7B  
                 _LATEbits 000F7D                   _LATFbits 000F7E                   _LATGbits 000F7F  
                 _LATHbits 000F80                   _PIE0bits 000E29                   _PIE2bits 000E2B  
                 i2u171_40 17B6                   i2u171_41 17B2                   i2u180_40 18EC  
                 i2u172_40 17DA                   i2u180_41 18E8                   i2u172_41 17D6  
                 i2u173_40 17FA                   i2u173_41 17F6                   i2u174_40 181A  
                 i2u182_40 0022                   i2u174_41 1816                   i2u182_41 001E  
                 i2u175_40 183E                   i2u183_40 003A                   i2u175_41 183A  
                 i2u183_41 0036                   _PIR0bits 000E33                   i2u176_40 1858  
                 i2u176_41 1854                   i2u177_40 1876                   i2u177_41 1872  
                 i2u178_40 188A                   i2u178_41 1886                   i2u179_40 18D4  
                 i2u179_41 18D0                  _set_light 20E6                _get_minutes 235E  
              _get_seconds 234A                 _ADC2String 1D70                  _test_mode 00CA  
                _vfpfcnvrt 0E30                 ?_get_hours 0005                 ?_get_month 0005  
               _ADCON0bits 000F60          ___wmul@multiplier 0005               _isspace$2047 0009  
               _CM1NCHbits 000ED2                 _CM1PCHbits 000ED3                  copy_data0 1FF4  
              _LCD_setline 18FA                   __Hrparam 0000                 _ADC_getval 2242  
               ?_set_light 0009                 vfprintf@ap 0064                   __Lrparam 0000  
               vfprintf@fp 0060                 ?_vfpfcnvrt 0040                 _ANSELAbits 000E92  
               sprintf@fmt 006A                 _T0CON0bits 000FD5                 _T0CON1bits 000FD6  
                 __ptext10 237C                   __ptext11 14BE                   __ptext20 2242  
                 __ptext12 18FA                   __ptext21 1D70                   __ptext13 2202  
                 __ptext30 1BD6                   __ptext22 2094                   __ptext14 1ED2  
                 __ptext31 1A08                   __ptext23 2040                   __ptext15 22E8  
                 __ptext32 1644                   __ptext24 0E30                   __ptext16 1F78  
                 __ptext33 2134                   __ptext25 1100                   __ptext17 2326  
                 __ptext34 2272                   __ptext26 1E28                   __ptext18 2334  
                 __ptext35 229E                   __ptext27 21BE                   __ptext19 230C  
                 __ptext28 1CA6                   __ptext37 17A2                   __ptext29 2382  
                 _get_year 2340                   _week_day 0059                   isa$xinst 000000  
                 int$flags 005B                ?_ADC2String 007B                   _vfprintf 2040  
              ??_get_hours 0007                ??_get_month 0007    ADC2String@leading_zeros 007F  
               _INTCONbits 000FF2                   isdigit@c 0005                   intlevel2 0000  
                sprintf@ap 006E               _DAC1CON0bits 000EC6               _DAC1CON1bits 000EC7  
                 isspace@c 0005                ?_ADC_getval 0005                ??_set_light 000D  
              ??_vfpfcnvrt 0046                   sprintf@f 0070                   sprintf@s 0068  
