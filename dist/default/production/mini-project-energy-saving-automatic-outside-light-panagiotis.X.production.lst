

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Nov 09 20:08:29 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=3
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=3
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=3
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=3
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=3
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=3
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=3
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    63                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    64   000000                     
    65                           ; Version 2.35
    66                           ; Generated 05/05/2021 GMT
    67                           ; 
    68                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   0027E2                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _week_day
   106   0027E2  0002               	dw	2
   107                           
   108                           	psect	idataBANK0
   109   002668                     __pidataBANK0:
   110                           	callstack 0
   111                           
   112                           ;initializer for _sunrise_list
   113   002668  0008               	dw	8
   114   00266A  0007               	dw	7
   115   00266C  0006               	dw	6
   116   00266E  0007               	dw	7
   117   002670  0006               	dw	6
   118   002672  0004               	dw	4
   119   002674  0004               	dw	4
   120   002676  0005               	dw	5
   121   002678  0006               	dw	6
   122   00267A  0007               	dw	7
   123   00267C  0006               	dw	6
   124   00267E  0008               	dw	8
   125                           
   126                           ;initializer for _sunset_list
   127   002680  0010               	dw	16
   128   002682  0011               	dw	17
   129   002684  0012               	dw	18
   130   002686  0014               	dw	20
   131   002688  0014               	dw	20
   132   00268A  0015               	dw	21
   133   00268C  0015               	dw	21
   134   00268E  0014               	dw	20
   135   002690  0013               	dw	19
   136   002692  0012               	dw	18
   137   002694  0010               	dw	16
   138   002696  0010               	dw	16
   139                           
   140                           ;initializer for main@F14267
   141   002698  4D                 	db	77
   142   002699  4F                 	db	79
   143   00269A  4E                 	db	78
   144   00269B  00                 	db	0
   145                           
   146                           ;initializer for _year
   147   00269C  07E4               	dw	2020
   148                           
   149                           ;initializer for _day
   150   00269E  0001               	dw	1
   151                           
   152                           ;initializer for _test_mode
   153   0026A0  0001               	dw	1
   154                           
   155                           	psect	idataBANK1
   156   002748                     __pidataBANK1:
   157                           	callstack 0
   158                           
   159                           ;initializer for _month_days
   160   002748  0000               	dw	0
   161   00274A  001F               	dw	31
   162   00274C  001C               	dw	28
   163   00274E  001F               	dw	31
   164   002750  001E               	dw	30
   165   002752  001F               	dw	31
   166   002754  001E               	dw	30
   167   002756  001F               	dw	31
   168   002758  001F               	dw	31
   169   00275A  001E               	dw	30
   170   00275C  001F               	dw	31
   171   00275E  001E               	dw	30
   172   002760  001F               	dw	31
   173   000000                     _LATDbits	set	3964
   174   000000                     _LATHbits	set	3968
   175   000000                     _TRISHbits	set	3976
   176   000000                     _LATEbits	set	3965
   177   000000                     _LATCbits	set	3963
   178   000000                     _T0CON0bits	set	4053
   179   000000                     _T0CON1bits	set	4054
   180   000000                     _CM1CON1bits	set	3793
   181   000000                     _LATBbits	set	3962
   182   000000                     _LATFbits	set	3966
   183   000000                     _PORTAbits	set	3977
   184   000000                     _PORTGbits	set	3983
   185   000000                     _PIE0bits	set	3625
   186   000000                     _DAC1CON0bits	set	3782
   187   000000                     _LATAbits	set	3961
   188   000000                     _LATGbits	set	3967
   189   000000                     _TRISAbits	set	3969
   190   000000                     _TRISGbits	set	3975
   191   000000                     _TRISEbits	set	3973
   192   000000                     _TRISCbits	set	3971
   193   000000                     _TRISBbits	set	3970
   194   000000                     _TRISFbits	set	3974
   195   000000                     _TMR0L	set	4051
   196   000000                     _TMR0H	set	4052
   197   000000                     _INTCONbits	set	4082
   198   000000                     _PORTBbits	set	3978
   199   000000                     _PORTFbits	set	3982
   200   000000                     _CM1CON0bits	set	3792
   201   000000                     _CM1NCHbits	set	3794
   202   000000                     _DAC1CON1bits	set	3783
   203   000000                     _ADREFbits	set	3928
   204   000000                     _CM1PCHbits	set	3795
   205   000000                     _PIE2bits	set	3627
   206   000000                     _PIR0bits	set	3635
   207   000000                     _ANSELAbits	set	3730
   208   000000                     _ADPCH	set	3935
   209   000000                     _ADRESH	set	3940
   210   000000                     _ADCON0bits	set	3936
   211                           
   212                           	psect	smallconst
   213   000E00                     __psmallconst:
   214                           	callstack 0
   215   000E00  00                 	db	0
   216   000E01                     STR_9:
   217                           
   218                           ; BSR set to: 0
   219   000E01  25                 	db	37
   220   000E02  30                 	db	48	;'0'
   221   000E03  31                 	db	49	;'1'
   222   000E04  75                 	db	117	;'u'
   223   000E05  00                 	db	0
   224   000E06                     STR_10:
   225                           
   226                           ; BSR set to: 0
   227   000E06  25                 	db	37
   228   000E07  30                 	db	48	;'0'
   229   000E08  32                 	db	50	;'2'
   230   000E09  75                 	db	117	;'u'
   231   000E0A  00                 	db	0
   232   000E0B                     STR_11:
   233                           
   234                           ; BSR set to: 0
   235   000E0B  25                 	db	37
   236   000E0C  30                 	db	48	;'0'
   237   000E0D  33                 	db	51	;'3'
   238   000E0E  75                 	db	117	;'u'
   239   000E0F  00                 	db	0
   240   000E10                     STR_3:
   241                           
   242                           ; BSR set to: 0
   243   000E10  57                 	db	87	;'W'
   244   000E11  45                 	db	69	;'E'
   245   000E12  44                 	db	68	;'D'
   246   000E13  00                 	db	0
   247   000E14                     STR_2:
   248                           
   249                           ; BSR set to: 0
   250   000E14  54                 	db	84	;'T'
   251   000E15  55                 	db	85	;'U'
   252   000E16  45                 	db	69	;'E'
   253   000E17  00                 	db	0
   254   000E18                     STR_5:
   255                           
   256                           ; BSR set to: 0
   257   000E18  46                 	db	70	;'F'
   258   000E19  52                 	db	82	;'R'
   259   000E1A  49                 	db	73	;'I'
   260   000E1B  00                 	db	0
   261   000E1C                     STR_1:
   262                           
   263                           ; BSR set to: 0
   264   000E1C  4D                 	db	77	;'M'
   265   000E1D  4F                 	db	79	;'O'
   266   000E1E  4E                 	db	78	;'N'
   267   000E1F  00                 	db	0
   268   000E20                     STR_7:
   269                           
   270                           ; BSR set to: 0
   271   000E20  53                 	db	83	;'S'
   272   000E21  55                 	db	85	;'U'
   273   000E22  4E                 	db	78	;'N'
   274   000E23  00                 	db	0
   275   000E24                     STR_6:
   276                           
   277                           ; BSR set to: 0
   278   000E24  53                 	db	83	;'S'
   279   000E25  41                 	db	65	;'A'
   280   000E26  54                 	db	84	;'T'
   281   000E27  00                 	db	0
   282   000E28                     STR_4:
   283                           
   284                           ; BSR set to: 0
   285   000E28  54                 	db	84	;'T'
   286   000E29  48                 	db	72	;'H'
   287   000E2A  55                 	db	85	;'U'
   288   000E2B  00                 	db	0
   289   000E2C                     STR_8:
   290                           
   291                           ; BSR set to: 0
   292   000E2C  25                 	db	37
   293   000E2D  75                 	db	117	;'u'
   294   000E2E  00                 	db	0
   295   000E2F  00                 	db	0	; dummy byte at the end
   296   000000                     
   297                           ; #config settings
   298                           
   299                           	psect	cinit
   300   0023C2                     __pcinit:
   301                           	callstack 0
   302   0023C2                     start_initialization:
   303                           	callstack 0
   304   0023C2                     __initialization:
   305                           	callstack 0
   306                           
   307                           ; Initialize objects allocated to BANK1 (26 bytes)
   308                           ; load TBLPTR registers with __pidataBANK1
   309   0023C2  0E48               	movlw	low __pidataBANK1
   310   0023C4  6EF6               	movwf	tblptrl,c
   311   0023C6  0E27               	movlw	high __pidataBANK1
   312   0023C8  6EF7               	movwf	tblptrh,c
   313   0023CA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   314   0023CC  6EF8               	movwf	tblptru,c
   315   0023CE  EE01  F09C         	lfsr	0,__pdataBANK1
   316   0023D2  EE10 F01A          	lfsr	1,26
   317   0023D6                     copy_data0:
   318   0023D6  0009               	tblrd		*+
   319   0023D8  CFF5 FFEE          	movff	tablat,postinc0
   320   0023DC  50E5               	movf	postdec1,w,c
   321   0023DE  50E1               	movf	fsr1l,w,c
   322   0023E0  E1FA               	bnz	copy_data0
   323                           
   324                           ; Initialize objects allocated to BANK0 (58 bytes)
   325                           ; load TBLPTR registers with __pidataBANK0
   326   0023E2  0E68               	movlw	low __pidataBANK0
   327   0023E4  6EF6               	movwf	tblptrl,c
   328   0023E6  0E26               	movlw	high __pidataBANK0
   329   0023E8  6EF7               	movwf	tblptrh,c
   330   0023EA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   331   0023EC  6EF8               	movwf	tblptru,c
   332   0023EE  EE00  F0A8         	lfsr	0,__pdataBANK0
   333   0023F2  EE10 F03A          	lfsr	1,58
   334   0023F6                     copy_data1:
   335   0023F6  0009               	tblrd		*+
   336   0023F8  CFF5 FFEE          	movff	tablat,postinc0
   337   0023FC  50E5               	movf	postdec1,w,c
   338   0023FE  50E1               	movf	fsr1l,w,c
   339   002400  E1FA               	bnz	copy_data1
   340                           
   341                           ; Initialize objects allocated to COMRAM (2 bytes)
   342                           ; load TBLPTR registers with __pidataCOMRAM
   343   002402  0EE2               	movlw	low __pidataCOMRAM
   344   002404  6EF6               	movwf	tblptrl,c
   345   002406  0E27               	movlw	high __pidataCOMRAM
   346   002408  6EF7               	movwf	tblptrh,c
   347   00240A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   348   00240C  6EF8               	movwf	tblptru,c
   349   00240E  0009               	tblrd		*+	;fetch initializer
   350   002410  CFF5 F058          	movff	tablat,__pdataCOMRAM
   351   002414  0009               	tblrd		*+	;fetch initializer
   352   002416  CFF5 F059          	movff	tablat,__pdataCOMRAM+1
   353                           
   354                           ; Clear objects allocated to BANK2 (124 bytes)
   355   00241A  EE02  F000         	lfsr	0,__pbssBANK2
   356   00241E  0E7C               	movlw	124
   357   002420                     clear_0:
   358   002420  6AEE               	clrf	postinc0,c
   359   002422  06E8               	decf	wreg,f,c
   360   002424  E1FD               	bnz	clear_0
   361                           
   362                           ; Clear objects allocated to BANK1 (156 bytes)
   363   002426  EE01  F000         	lfsr	0,__pbssBANK1
   364   00242A  0E9C               	movlw	156
   365   00242C                     clear_1:
   366   00242C  6AEE               	clrf	postinc0,c
   367   00242E  06E8               	decf	wreg,f,c
   368   002430  E1FD               	bnz	clear_1
   369                           
   370                           ; Clear objects allocated to BANK0 (28 bytes)
   371   002432  EE00  F0E2         	lfsr	0,__pbssBANK0
   372   002436  0E1C               	movlw	28
   373   002438                     clear_2:
   374   002438  6AEE               	clrf	postinc0,c
   375   00243A  06E8               	decf	wreg,f,c
   376   00243C  E1FD               	bnz	clear_2
   377                           
   378                           ; Clear objects allocated to COMRAM (2 bytes)
   379   00243E  6A57               	clrf	(__pbssCOMRAM+1)& (0+255),c
   380   002440  6A56               	clrf	__pbssCOMRAM& (0+255),c
   381   002442                     end_of_initialization:
   382                           	callstack 0
   383   002442                     __end_of__initialization:
   384                           	callstack 0
   385   002442  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   386   002444  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   387   002446  0100               	movlb	0
   388   002448  EF30  F00B         	goto	_main	;jump to C main() function
   389                           
   390                           	psect	bssCOMRAM
   391   000056                     __pbssCOMRAM:
   392                           	callstack 0
   393   000056                     _flags:
   394                           	callstack 0
   395   000056                     	ds	1
   396   000057                     _flag:
   397                           	callstack 0
   398   000057                     	ds	1
   399                           
   400                           	psect	dataCOMRAM
   401   000058                     __pdataCOMRAM:
   402                           	callstack 0
   403   000058                     _week_day:
   404                           	callstack 0
   405   000058                     	ds	2
   406                           
   407                           	psect	bssBANK0
   408   0000E2                     __pbssBANK0:
   409                           	callstack 0
   410   0000E2                     	ds	16
   411   0000F2                     _width:
   412                           	callstack 0
   413   0000F2                     	ds	2
   414   0000F4                     _prec:
   415                           	callstack 0
   416   0000F4                     	ds	2
   417   0000F6                     _month:
   418                           	callstack 0
   419   0000F6                     	ds	2
   420   0000F8                     _hours:
   421                           	callstack 0
   422   0000F8                     	ds	2
   423   0000FA                     _minutes:
   424                           	callstack 0
   425   0000FA                     	ds	2
   426   0000FC                     _seconds:
   427                           	callstack 0
   428   0000FC                     	ds	2
   429                           
   430                           	psect	dataBANK0
   431   0000A8                     __pdataBANK0:
   432                           	callstack 0
   433   0000A8                     _sunrise_list:
   434                           	callstack 0
   435   0000A8                     	ds	24
   436   0000C0                     _sunset_list:
   437                           	callstack 0
   438   0000C0                     	ds	24
   439   0000D8                     main@F14267:
   440                           	callstack 0
   441   0000D8                     	ds	4
   442   0000DC                     _year:
   443                           	callstack 0
   444   0000DC                     	ds	2
   445   0000DE                     _day:
   446                           	callstack 0
   447   0000DE                     	ds	2
   448   0000E0                     _test_mode:
   449                           	callstack 0
   450   0000E0                     	ds	2
   451                           
   452                           	psect	bssBANK1
   453   000100                     __pbssBANK1:
   454                           	callstack 0
   455   000100                     _sunrise_records:
   456                           	callstack 0
   457   000100                     	ds	124
   458   00017C                     _dbuf:
   459                           	callstack 0
   460   00017C                     	ds	32
   461                           
   462                           	psect	dataBANK1
   463   00019C                     __pdataBANK1:
   464                           	callstack 0
   465   00019C                     _month_days:
   466                           	callstack 0
   467   00019C                     	ds	26
   468                           
   469                           	psect	bssBANK2
   470   000200                     __pbssBANK2:
   471                           	callstack 0
   472   000200                     _sunset_records:
   473                           	callstack 0
   474   000200                     	ds	124
   475                           
   476                           	psect	cstackBANK0
   477   000060                     __pcstackBANK0:
   478                           	callstack 0
   479   000060                     ?_vfprintf:
   480                           	callstack 0
   481   000060                     vfprintf@fp:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x0
   485   000060                     	ds	2
   486   000062                     vfprintf@fmt:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x2
   490   000062                     	ds	2
   491   000064                     vfprintf@ap:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x4
   495   000064                     	ds	2
   496   000066                     vfprintf@cfmt:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x6
   500   000066                     	ds	2
   501   000068                     ?_sprintf:
   502                           	callstack 0
   503   000068                     sprintf@s:
   504                           	callstack 0
   505                           
   506                           ; 2 bytes @ 0x8
   507   000068                     	ds	2
   508   00006A                     sprintf@fmt:
   509                           	callstack 0
   510                           
   511                           ; 2 bytes @ 0xA
   512   00006A                     	ds	4
   513   00006E                     sprintf@ap:
   514                           	callstack 0
   515                           
   516                           ; 2 bytes @ 0xE
   517   00006E                     	ds	2
   518   000070                     sprintf@f:
   519                           	callstack 0
   520                           
   521                           ; 11 bytes @ 0x10
   522   000070                     	ds	11
   523   00007B                     ADC2String@buf:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x1B
   527   00007B                     	ds	2
   528   00007D                     ADC2String@x:
   529                           	callstack 0
   530                           
   531                           ; 2 bytes @ 0x1D
   532   00007D                     	ds	2
   533   00007F                     ADC2String@leading_zeros:
   534                           	callstack 0
   535                           
   536                           ; 2 bytes @ 0x1F
   537   00007F                     	ds	2
   538   000081                     ??_main:
   539                           
   540                           ; 1 bytes @ 0x21
   541   000081                     	ds	2
   542   000083                     main@day_of_the_week:
   543                           	callstack 0
   544                           
   545                           ; 4 bytes @ 0x23
   546   000083                     	ds	4
   547   000087                     main@Yea:
   548                           	callstack 0
   549                           
   550                           ; 4 bytes @ 0x27
   551   000087                     	ds	4
   552   00008B                     main@ADC:
   553                           	callstack 0
   554                           
   555                           ; 3 bytes @ 0x2B
   556   00008B                     	ds	3
   557   00008E                     main@lst:
   558                           	callstack 0
   559                           
   560                           ; 16 bytes @ 0x2E
   561   00008E                     	ds	16
   562   00009E                     main@Sec:
   563                           	callstack 0
   564                           
   565                           ; 2 bytes @ 0x3E
   566   00009E                     	ds	2
   567   0000A0                     main@Min:
   568                           	callstack 0
   569                           
   570                           ; 2 bytes @ 0x40
   571   0000A0                     	ds	2
   572   0000A2                     main@Hou:
   573                           	callstack 0
   574                           
   575                           ; 2 bytes @ 0x42
   576   0000A2                     	ds	2
   577   0000A4                     main@Day:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0x44
   581   0000A4                     	ds	2
   582   0000A6                     main@Mon:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0x46
   586   0000A6                     	ds	2
   587                           
   588                           	psect	cstackCOMRAM
   589   000001                     __pcstackCOMRAM:
   590                           	callstack 0
   591   000001                     ??_increment_seconds:
   592   000001                     
   593                           ; 1 bytes @ 0x0
   594   000001                     	ds	2
   595   000003                     ??_HighISR:
   596                           
   597                           ; 1 bytes @ 0x2
   598   000003                     	ds	2
   599   000005                     ?_get_seconds:
   600                           	callstack 0
   601   000005                     ?_get_minutes:
   602                           	callstack 0
   603   000005                     ?_get_hours:
   604                           	callstack 0
   605   000005                     ?_get_day:
   606                           	callstack 0
   607   000005                     ?_get_month:
   608                           	callstack 0
   609   000005                     ?_get_year:
   610                           	callstack 0
   611   000005                     ?_ADC_getval:
   612                           	callstack 0
   613   000005                     ?_get_week_day:
   614                           	callstack 0
   615   000005                     ?_isdigit:
   616                           	callstack 0
   617   000005                     ?_isspace:
   618                           	callstack 0
   619   000005                     ?___wmul:
   620                           	callstack 0
   621   000005                     ?___awdiv:
   622                           	callstack 0
   623   000005                     ?___lodiv:
   624                           	callstack 0
   625   000005                     ?___lomod:
   626                           	callstack 0
   627   000005                     LCD_sendnibble@number:
   628                           	callstack 0
   629   000005                     increment_hours@value:
   630                           	callstack 0
   631   000005                     ___wmul@multiplier:
   632                           	callstack 0
   633   000005                     ___awdiv@dividend:
   634                           	callstack 0
   635   000005                     isdigit@c:
   636                           	callstack 0
   637   000005                     isspace@c:
   638                           	callstack 0
   639   000005                     fputc@c:
   640                           	callstack 0
   641   000005                     ___lodiv@dividend:
   642                           	callstack 0
   643   000005                     ___lomod@dividend:
   644                           	callstack 0
   645                           
   646                           ; 8 bytes @ 0x4
   647   000005                     	ds	1
   648   000006                     LCD_sendbyte@type:
   649                           	callstack 0
   650                           
   651                           ; 1 bytes @ 0x5
   652   000006                     	ds	1
   653   000007                     ??_isdigit:
   654   000007                     ??_isspace:
   655   000007                     LCD_sendbyte@Byte:
   656                           	callstack 0
   657   000007                     ADC_getval@tmpval:
   658                           	callstack 0
   659   000007                     ___wmul@multiplicand:
   660                           	callstack 0
   661   000007                     ___awdiv@divisor:
   662                           	callstack 0
   663   000007                     fputc@fp:
   664                           	callstack 0
   665                           
   666                           ; 2 bytes @ 0x6
   667   000007                     	ds	1
   668   000008                     ??_LCD_Init:
   669   000008                     ??_LCD_clear:
   670   000008                     LCD_setline@line:
   671                           	callstack 0
   672                           
   673                           ; 2 bytes @ 0x7
   674   000008                     	ds	1
   675   000009                     ??_fputc:
   676   000009                     ___awdiv@counter:
   677                           	callstack 0
   678   000009                     _isspace$2115:
   679                           	callstack 0
   680   000009                     ___wmul@product:
   681                           	callstack 0
   682                           
   683                           ; 2 bytes @ 0x8
   684   000009                     	ds	1
   685   00000A                     ___awdiv@sign:
   686                           	callstack 0
   687   00000A                     LCD_sendstring@strlst:
   688                           	callstack 0
   689                           
   690                           ; 2 bytes @ 0x9
   691   00000A                     	ds	1
   692   00000B                     ?_atoi:
   693                           	callstack 0
   694   00000B                     ___awdiv@quotient:
   695                           	callstack 0
   696   00000B                     atoi@s:
   697                           	callstack 0
   698                           
   699                           ; 2 bytes @ 0xA
   700   00000B                     	ds	1
   701   00000C                     ??_LCD_sendstring:
   702                           
   703                           ; 1 bytes @ 0xB
   704   00000C                     	ds	1
   705   00000D                     ??_atoi:
   706   00000D                     set_light@curr_hour:
   707                           	callstack 0
   708   00000D                     ___lodiv@divisor:
   709                           	callstack 0
   710   00000D                     ___lomod@divisor:
   711                           	callstack 0
   712                           
   713                           ; 8 bytes @ 0xC
   714   00000D                     	ds	1
   715   00000E                     LCD_sendstring@i:
   716                           	callstack 0
   717   00000E                     fputs@s:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0xD
   721   00000E                     	ds	1
   722   00000F                     set_light@curr_day:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0xE
   726   00000F                     	ds	1
   727   000010                     atoi@neg:
   728                           	callstack 0
   729   000010                     fputs@fp:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0xF
   733   000010                     	ds	1
   734   000011                     set_light@curr_month:
   735                           	callstack 0
   736                           
   737                           ; 2 bytes @ 0x10
   738   000011                     	ds	1
   739   000012                     fputs@c:
   740                           	callstack 0
   741   000012                     atoi@n:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x11
   745   000012                     	ds	1
   746   000013                     set_light@luminosity:
   747                           	callstack 0
   748   000013                     fputs@i:
   749                           	callstack 0
   750                           
   751                           ; 2 bytes @ 0x12
   752   000013                     	ds	2
   753   000015                     ___lomod@counter:
   754                           	callstack 0
   755   000015                     set_light@state:
   756                           	callstack 0
   757   000015                     pad@fp:
   758                           	callstack 0
   759   000015                     ___lodiv@quotient:
   760                           	callstack 0
   761                           
   762                           ; 8 bytes @ 0x14
   763   000015                     	ds	2
   764   000017                     ??_set_light:
   765   000017                     pad@buf:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x16
   769   000017                     	ds	2
   770   000019                     pad@p:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0x18
   774   000019                     	ds	2
   775   00001B                     ??_pad:
   776                           
   777                           ; 1 bytes @ 0x1A
   778   00001B                     	ds	1
   779   00001C                     pad@i:
   780                           	callstack 0
   781                           
   782                           ; 2 bytes @ 0x1B
   783   00001C                     	ds	1
   784   00001D                     ___lodiv@counter:
   785                           	callstack 0
   786   00001D                     set_light@midnight_approx:
   787                           	callstack 0
   788                           
   789                           ; 2 bytes @ 0x1C
   790   00001D                     	ds	1
   791   00001E                     pad@w:
   792                           	callstack 0
   793                           
   794                           ; 2 bytes @ 0x1D
   795   00001E                     	ds	1
   796   00001F                     set_light@record_index:
   797                           	callstack 0
   798                           
   799                           ; 2 bytes @ 0x1E
   800   00001F                     	ds	1
   801   000020                     utoa@fp:
   802                           	callstack 0
   803                           
   804                           ; 2 bytes @ 0x1F
   805   000020                     	ds	1
   806   000021                     set_light@i:
   807                           	callstack 0
   808                           
   809                           ; 2 bytes @ 0x20
   810   000021                     	ds	1
   811   000022                     utoa@d:
   812                           	callstack 0
   813                           
   814                           ; 8 bytes @ 0x21
   815   000022                     	ds	1
   816   000023                     set_light@i_1545:
   817                           	callstack 0
   818                           
   819                           ; 2 bytes @ 0x22
   820   000023                     	ds	7
   821   00002A                     ??_utoa:
   822                           
   823                           ; 1 bytes @ 0x29
   824   00002A                     	ds	8
   825   000032                     utoa@p:
   826                           	callstack 0
   827                           
   828                           ; 2 bytes @ 0x31
   829   000032                     	ds	2
   830   000034                     utoa@w:
   831                           	callstack 0
   832                           
   833                           ; 2 bytes @ 0x33
   834   000034                     	ds	2
   835   000036                     utoa@n:
   836                           	callstack 0
   837                           
   838                           ; 8 bytes @ 0x35
   839   000036                     	ds	8
   840   00003E                     utoa@i:
   841                           	callstack 0
   842                           
   843                           ; 2 bytes @ 0x3D
   844   00003E                     	ds	2
   845   000040                     vfpfcnvrt@fp:
   846                           	callstack 0
   847                           
   848                           ; 2 bytes @ 0x3F
   849   000040                     	ds	2
   850   000042                     vfpfcnvrt@fmt:
   851                           	callstack 0
   852                           
   853                           ; 2 bytes @ 0x41
   854   000042                     	ds	2
   855   000044                     vfpfcnvrt@ap:
   856                           	callstack 0
   857                           
   858                           ; 2 bytes @ 0x43
   859   000044                     	ds	2
   860   000046                     ??_vfpfcnvrt:
   861                           
   862                           ; 1 bytes @ 0x45
   863   000046                     	ds	4
   864   00004A                     vfpfcnvrt@convarg:
   865                           	callstack 0
   866                           
   867                           ; 8 bytes @ 0x49
   868   00004A                     	ds	8
   869   000052                     vfpfcnvrt@done:
   870                           	callstack 0
   871                           
   872                           ; 2 bytes @ 0x51
   873   000052                     	ds	2
   874   000054                     vfpfcnvrt@cp:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x53
   878   000054                     	ds	2
   879   000056                     
   880                           ; 1 bytes @ 0x55
   881 ;;
   882 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   883 ;;
   884 ;; *************** function _main *****************
   885 ;; Defined at:
   886 ;;		line 20 in file "main.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;		None
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  lst            16   46[BANK0 ] PTR unsigned char [8]
   891 ;;		 -> STR_7(4), STR_6(4), STR_5(4), STR_4(4), 
   892 ;;		 -> STR_3(4), STR_2(4), STR_1(4), NULL(0), 
   893 ;;		 -> main@ADC(3), main@Yea(4), main@Mon(2), main@Day(2), 
   894 ;;		 -> main@Hou(2), main@Min(2), main@Sec(2), 
   895 ;;  Yea             4   39[BANK0 ] unsigned char [4]
   896 ;;  day_of_the_w    4   35[BANK0 ] unsigned char [4]
   897 ;;  ADC             3   43[BANK0 ] unsigned char [3]
   898 ;;  Mon             2   70[BANK0 ] unsigned char [2]
   899 ;;  Day             2   68[BANK0 ] unsigned char [2]
   900 ;;  Hou             2   66[BANK0 ] unsigned char [2]
   901 ;;  Min             2   64[BANK0 ] unsigned char [2]
   902 ;;  Sec             2   62[BANK0 ] unsigned char [2]
   903 ;; Return value:  Size  Location     Type
   904 ;;                  1    wreg      void 
   905 ;; Registers used:
   906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   907 ;; Tracked objects:
   908 ;;		On entry : 0/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   913 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   914 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   915 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   916 ;;Total ram usage:       39 bytes
   917 ;; Hardware stack levels required when called: 11
   918 ;; This function calls:
   919 ;;		_ADC2String
   920 ;;		_ADC_getval
   921 ;;		_ADC_init
   922 ;;		_Interrupts_init
   923 ;;		_LCD_Init
   924 ;;		_LCD_clear
   925 ;;		_LCD_sendstring
   926 ;;		_Light_init
   927 ;;		_Timer0_init
   928 ;;		_get_day
   929 ;;		_get_hours
   930 ;;		_get_minutes
   931 ;;		_get_month
   932 ;;		_get_seconds
   933 ;;		_get_week_day
   934 ;;		_get_year
   935 ;;		_set_light
   936 ;; This function is called by:
   937 ;;		Startup code after reset
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text0
   942   001660                     __ptext0:
   943                           	callstack 0
   944   001660                     _main:
   945                           	callstack 20
   946   001660                     
   947                           ;main.c: 23:     Timer0_init();
   948   001660  ECD0  F012         	call	_Timer0_init	;wreg free
   949   001664                     
   950                           ;main.c: 24:     Interrupts_init();
   951   001664  ECCB  F013         	call	_Interrupts_init	;wreg free
   952   001668                     
   953                           ;main.c: 25:     LCD_Init();
   954   001668  EC8E  F011         	call	_LCD_Init	;wreg free
   955   00166C                     
   956                           ;main.c: 26:     ADC_init();
   957   00166C  ECB1  F013         	call	_ADC_init	;wreg free
   958   001670                     
   959                           ;main.c: 27:     Light_init();
   960   001670  ECEF  F013         	call	_Light_init	;wreg free
   961   001674                     
   962                           ;main.c: 29:     char Sec[2];;main.c: 30:     char Min[2];;main.c: 31:     char Hou[2];;
      +                          main.c: 32:     char Day[2];;main.c: 33:     char Mon[2];;main.c: 34:     char Yea[4];;m
      +                          ain.c: 35:     char ADC[3];;main.c: 36:     char day_of_the_week[] = {"MON","TUE","WED",
      +                          "THU","FRI","SAT","SUN"};
   963   001674  C0D8  F083         	movff	main@F14267,main@day_of_the_week
   964   001678  C0D9  F084         	movff	main@F14267+1,main@day_of_the_week+1
   965   00167C  C0DA  F085         	movff	main@F14267+2,main@day_of_the_week+2
   966   001680  C0DB  F086         	movff	main@F14267+3,main@day_of_the_week+3
   967   001684                     l3315:
   968                           
   969                           ;main.c: 38:         LCD_clear();
   970   001684  EC14  F013         	call	_LCD_clear	;wreg free
   971   001688                     
   972                           ;main.c: 40:         ADC2String(Sec, get_seconds(), 2);
   973   001688  0E9E               	movlw	low main@Sec
   974   00168A  0100               	movlb	0	; () banked
   975   00168C  6F7B               	movwf	ADC2String@buf& (0+255),b
   976   00168E  0E00               	movlw	high main@Sec
   977   001690  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
   978   001692  ECD6  F013         	call	_get_seconds	;wreg free
   979   001696  C005  F07D         	movff	?_get_seconds,ADC2String@x
   980   00169A  C006  F07E         	movff	?_get_seconds+1,ADC2String@x+1
   981   00169E  0E00               	movlw	0
   982   0016A0  0100               	movlb	0	; () banked
   983   0016A2  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   984   0016A4  0E02               	movlw	2
   985   0016A6  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
   986   0016A8  ECDD  F010         	call	_ADC2String	;wreg free
   987   0016AC                     
   988                           ;main.c: 41:         ADC2String(Min, get_minutes(), 2);
   989   0016AC  0EA0               	movlw	low main@Min
   990   0016AE  0100               	movlb	0	; () banked
   991   0016B0  6F7B               	movwf	ADC2String@buf& (0+255),b
   992   0016B2  0E00               	movlw	high main@Min
   993   0016B4  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
   994   0016B6  ECE0  F013         	call	_get_minutes	;wreg free
   995   0016BA  C005  F07D         	movff	?_get_minutes,ADC2String@x
   996   0016BE  C006  F07E         	movff	?_get_minutes+1,ADC2String@x+1
   997   0016C2  0E00               	movlw	0
   998   0016C4  0100               	movlb	0	; () banked
   999   0016C6  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
  1000   0016C8  0E02               	movlw	2
  1001   0016CA  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
  1002   0016CC  ECDD  F010         	call	_ADC2String	;wreg free
  1003   0016D0                     
  1004                           ;main.c: 42:         ADC2String(Hou, get_hours(), 2);
  1005   0016D0  0EA2               	movlw	low main@Hou
  1006   0016D2  0100               	movlb	0	; () banked
  1007   0016D4  6F7B               	movwf	ADC2String@buf& (0+255),b
  1008   0016D6  0E00               	movlw	high main@Hou
  1009   0016D8  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
  1010   0016DA  ECE5  F013         	call	_get_hours	;wreg free
  1011   0016DE  C005  F07D         	movff	?_get_hours,ADC2String@x
  1012   0016E2  C006  F07E         	movff	?_get_hours+1,ADC2String@x+1
  1013   0016E6  0E00               	movlw	0
  1014   0016E8  0100               	movlb	0	; () banked
  1015   0016EA  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
  1016   0016EC  0E02               	movlw	2
  1017   0016EE  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
  1018   0016F0  ECDD  F010         	call	_ADC2String	;wreg free
  1019   0016F4                     
  1020                           ;main.c: 43:         ADC2String(Day, get_day(), 2);
  1021   0016F4  0EA4               	movlw	low main@Day
  1022   0016F6  0100               	movlb	0	; () banked
  1023   0016F8  6F7B               	movwf	ADC2String@buf& (0+255),b
  1024   0016FA  0E00               	movlw	high main@Day
  1025   0016FC  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
  1026   0016FE  ECEA  F013         	call	_get_day	;wreg free
  1027   001702  C005  F07D         	movff	?_get_day,ADC2String@x
  1028   001706  C006  F07E         	movff	?_get_day+1,ADC2String@x+1
  1029   00170A  0E00               	movlw	0
  1030   00170C  0100               	movlb	0	; () banked
  1031   00170E  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
  1032   001710  0E02               	movlw	2
  1033   001712  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
  1034   001714  ECDD  F010         	call	_ADC2String	;wreg free
  1035   001718                     
  1036                           ;main.c: 44:         ADC2String(Mon, get_month()+1, 2);
  1037   001718  0EA6               	movlw	low main@Mon
  1038   00171A  0100               	movlb	0	; () banked
  1039   00171C  6F7B               	movwf	ADC2String@buf& (0+255),b
  1040   00171E  0E00               	movlw	high main@Mon
  1041   001720  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
  1042   001722  ECDB  F013         	call	_get_month	;wreg free
  1043   001726  0E01               	movlw	1
  1044   001728  2405               	addwf	?_get_month^0,w,c
  1045   00172A  0100               	movlb	0	; () banked
  1046   00172C  6F7D               	movwf	ADC2String@x& (0+255),b
  1047   00172E  0E00               	movlw	0
  1048   001730  2006               	addwfc	(?_get_month+1)^0,w,c
  1049   001732  6F7E               	movwf	(ADC2String@x+1)& (0+255),b
  1050   001734  0E00               	movlw	0
  1051   001736  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
  1052   001738  0E02               	movlw	2
  1053   00173A  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
  1054   00173C  ECDD  F010         	call	_ADC2String	;wreg free
  1055   001740                     
  1056                           ;main.c: 45:         ADC2String(Yea, get_year(), 4);
  1057   001740  0E87               	movlw	low main@Yea
  1058   001742  0100               	movlb	0	; () banked
  1059   001744  6F7B               	movwf	ADC2String@buf& (0+255),b
  1060   001746  0E00               	movlw	high main@Yea
  1061   001748  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
  1062   00174A  ECD1  F013         	call	_get_year	;wreg free
  1063   00174E  C005  F07D         	movff	?_get_year,ADC2String@x
  1064   001752  C006  F07E         	movff	?_get_year+1,ADC2String@x+1
  1065   001756  0E00               	movlw	0
  1066   001758  0100               	movlb	0	; () banked
  1067   00175A  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
  1068   00175C  0E04               	movlw	4
  1069   00175E  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
  1070   001760  ECDD  F010         	call	_ADC2String	;wreg free
  1071   001764                     
  1072                           ;main.c: 46:         ADC2String(ADC, ADC_getval(), 3);
  1073   001764  0E8B               	movlw	low main@ADC
  1074   001766  0100               	movlb	0	; () banked
  1075   001768  6F7B               	movwf	ADC2String@buf& (0+255),b
  1076   00176A  0E00               	movlw	high main@ADC
  1077   00176C  6F7C               	movwf	(ADC2String@buf+1)& (0+255),b
  1078   00176E  EC51  F013         	call	_ADC_getval	;wreg free
  1079   001772  C005  F07D         	movff	?_ADC_getval,ADC2String@x
  1080   001776  C006  F07E         	movff	?_ADC_getval+1,ADC2String@x+1
  1081   00177A  0E00               	movlw	0
  1082   00177C  0100               	movlb	0	; () banked
  1083   00177E  6F80               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
  1084   001780  0E03               	movlw	3
  1085   001782  6F7F               	movwf	ADC2String@leading_zeros& (0+255),b
  1086   001784  ECDD  F010         	call	_ADC2String	;wreg free
  1087   001788                     
  1088                           ;main.c: 48:         char *lst[8] = {get_week_day(),Day,Mon,Yea,Hou,Min,Sec,ADC};
  1089   001788  EE20  F08E         	lfsr	2,main@lst
  1090   00178C  0E0F               	movlw	15
  1091   00178E                     u3001:
  1092   00178E  6ADE               	clrf	postinc2,c
  1093   001790  06E8               	decf	wreg,f,c
  1094   001792  E2FD               	bc	u3001
  1095   001794  EC3F  F00F         	call	_get_week_day	;wreg free
  1096   001798  C005  F08E         	movff	?_get_week_day,main@lst
  1097   00179C  C006  F08F         	movff	?_get_week_day+1,main@lst+1
  1098   0017A0  0EA4               	movlw	low main@Day
  1099   0017A2  0100               	movlb	0	; () banked
  1100   0017A4  6F90               	movwf	(main@lst+2)& (0+255),b
  1101   0017A6  0E00               	movlw	high main@Day
  1102   0017A8  6F91               	movwf	(main@lst+3)& (0+255),b
  1103   0017AA                     
  1104                           ; BSR set to: 0
  1105   0017AA  0EA6               	movlw	low main@Mon
  1106   0017AC  6F92               	movwf	(main@lst+4)& (0+255),b
  1107   0017AE  0E00               	movlw	high main@Mon
  1108   0017B0  6F93               	movwf	(main@lst+5)& (0+255),b
  1109   0017B2                     
  1110                           ; BSR set to: 0
  1111   0017B2  0E87               	movlw	low main@Yea
  1112   0017B4  6F94               	movwf	(main@lst+6)& (0+255),b
  1113   0017B6  0E00               	movlw	high main@Yea
  1114   0017B8  6F95               	movwf	(main@lst+7)& (0+255),b
  1115   0017BA                     
  1116                           ; BSR set to: 0
  1117   0017BA  0EA2               	movlw	low main@Hou
  1118   0017BC  6F96               	movwf	(main@lst+8)& (0+255),b
  1119   0017BE  0E00               	movlw	high main@Hou
  1120   0017C0  6F97               	movwf	(main@lst+9)& (0+255),b
  1121   0017C2                     
  1122                           ; BSR set to: 0
  1123   0017C2  0EA0               	movlw	low main@Min
  1124   0017C4  6F98               	movwf	(main@lst+10)& (0+255),b
  1125   0017C6  0E00               	movlw	high main@Min
  1126   0017C8  6F99               	movwf	(main@lst+11)& (0+255),b
  1127   0017CA                     
  1128                           ; BSR set to: 0
  1129   0017CA  0E9E               	movlw	low main@Sec
  1130   0017CC  6F9A               	movwf	(main@lst+12)& (0+255),b
  1131   0017CE  0E00               	movlw	high main@Sec
  1132   0017D0  6F9B               	movwf	(main@lst+13)& (0+255),b
  1133   0017D2                     
  1134                           ; BSR set to: 0
  1135   0017D2  0E8B               	movlw	low main@ADC
  1136   0017D4  6F9C               	movwf	(main@lst+14)& (0+255),b
  1137   0017D6  0E00               	movlw	high main@ADC
  1138   0017D8  6F9D               	movwf	(main@lst+15)& (0+255),b
  1139   0017DA                     
  1140                           ; BSR set to: 0
  1141                           ;main.c: 49:         LCD_sendstring(lst);
  1142   0017DA  0E8E               	movlw	low main@lst
  1143   0017DC  6E0A               	movwf	LCD_sendstring@strlst^0,c
  1144   0017DE  0E00               	movlw	high main@lst
  1145   0017E0  6E0B               	movwf	(LCD_sendstring@strlst+1)^0,c
  1146   0017E2  EC22  F00C         	call	_LCD_sendstring	;wreg free
  1147   0017E6                     
  1148                           ;main.c: 51:         set_light(get_hours(),get_day(),get_month(),ADC_getval(),0);
  1149   0017E6  ECE5  F013         	call	_get_hours	;wreg free
  1150   0017EA  C005  F00D         	movff	?_get_hours,set_light@curr_hour
  1151   0017EE  C006  F00E         	movff	?_get_hours+1,set_light@curr_hour+1
  1152   0017F2  ECEA  F013         	call	_get_day	;wreg free
  1153   0017F6  C005  F00F         	movff	?_get_day,set_light@curr_day
  1154   0017FA  C006  F010         	movff	?_get_day+1,set_light@curr_day+1
  1155   0017FE  ECDB  F013         	call	_get_month	;wreg free
  1156   001802  C005  F011         	movff	?_get_month,set_light@curr_month
  1157   001806  C006  F012         	movff	?_get_month+1,set_light@curr_month+1
  1158   00180A  EC51  F013         	call	_ADC_getval	;wreg free
  1159   00180E  C005  F013         	movff	?_ADC_getval,set_light@luminosity
  1160   001812  C006  F014         	movff	?_ADC_getval+1,set_light@luminosity+1
  1161   001816  0E00               	movlw	0
  1162   001818  6E16               	movwf	(set_light@state+1)^0,c
  1163   00181A  0E00               	movlw	0
  1164   00181C  6E15               	movwf	set_light@state^0,c
  1165   00181E  EC18  F007         	call	_set_light	;wreg free
  1166   001822                     
  1167                           ;main.c: 52:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1168   001822  0E09               	movlw	9
  1169   001824  0100               	movlb	0	; () banked
  1170   001826  6F82               	movwf	(??_main+1)& (0+255),b
  1171   001828  0E1E               	movlw	30
  1172   00182A  6F81               	movwf	??_main& (0+255),b
  1173   00182C  0EE4               	movlw	228
  1174   00182E                     u3017:
  1175   00182E  2EE8               	decfsz	wreg,f,c
  1176   001830  D7FE               	bra	u3017
  1177   001832  2F81               	decfsz	??_main& (0+255),f,b
  1178   001834  D7FC               	bra	u3017
  1179   001836  2F82               	decfsz	(??_main+1)& (0+255),f,b
  1180   001838  D7FA               	bra	u3017
  1181   00183A  F000               	nop	
  1182   00183C  EF42  F00B         	goto	l3315
  1183   001840  EF2F  F000         	goto	start
  1184   001844                     __end_of_main:
  1185                           	callstack 0
  1186                           
  1187 ;; *************** function _set_light *****************
  1188 ;; Defined at:
  1189 ;;		line 17 in file "light_manager.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  curr_hour       2   12[COMRAM] unsigned int 
  1192 ;;  curr_day        2   14[COMRAM] unsigned int 
  1193 ;;  curr_month      2   16[COMRAM] unsigned int 
  1194 ;;  luminosity      2   18[COMRAM] unsigned int 
  1195 ;;  state           2   20[COMRAM] unsigned int 
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;  i               2   34[COMRAM] unsigned int 
  1198 ;;  i               2   32[COMRAM] unsigned int 
  1199 ;;  midnight_app    2   28[COMRAM] int 
  1200 ;;  record_index    2   30[COMRAM] unsigned int 
  1201 ;; Return value:  Size  Location     Type
  1202 ;;                  1    wreg      void 
  1203 ;; Registers used:
  1204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1205 ;; Tracked objects:
  1206 ;;		On entry : 0/0
  1207 ;;		On exit  : 0/0
  1208 ;;		Unchanged: 0/0
  1209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1210 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1211 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1212 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1213 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1214 ;;Total ram usage:       24 bytes
  1215 ;; Hardware stack levels used: 1
  1216 ;; Hardware stack levels required when called: 3
  1217 ;; This function calls:
  1218 ;;		___awdiv
  1219 ;;		___wmul
  1220 ;;		_increment_hours
  1221 ;; This function is called by:
  1222 ;;		_main
  1223 ;; This function uses a non-reentrant model
  1224 ;;
  1225                           
  1226                           	psect	text1
  1227   000E30                     __ptext1:
  1228                           	callstack 0
  1229   000E30                     _set_light:
  1230                           	callstack 27
  1231   000E30                     
  1232                           ;light_manager.c: 18:     if(curr_hour >= 1 && curr_hour < 5){
  1233   000E30  500D               	movf	set_light@curr_hour^0,w,c
  1234   000E32  100E               	iorwf	(set_light@curr_hour+1)^0,w,c
  1235   000E34  B4D8               	btfsc	status,2,c
  1236   000E36  EF1F  F007         	goto	u2781
  1237   000E3A  EF21  F007         	goto	u2780
  1238   000E3E                     u2781:
  1239   000E3E  EF2F  F007         	goto	l3225
  1240   000E42                     u2780:
  1241   000E42  500E               	movf	(set_light@curr_hour+1)^0,w,c
  1242   000E44  E107               	bnz	u2791
  1243   000E46  0E05               	movlw	5
  1244   000E48  5C0D               	subwf	set_light@curr_hour^0,w,c
  1245   000E4A  B0D8               	btfsc	status,0,c
  1246   000E4C  EF2A  F007         	goto	u2791
  1247   000E50  EF2C  F007         	goto	u2790
  1248   000E54                     u2791:
  1249   000E54  EF2F  F007         	goto	l3225
  1250   000E58                     u2790:
  1251   000E58                     
  1252                           ;light_manager.c: 19:         LATHbits.LATH3 = 0;
  1253   000E58  9680               	bcf	128,3,c	;volatile
  1254   000E5A                     
  1255                           ;light_manager.c: 20:         flag = 1;
  1256   000E5A  0E01               	movlw	1
  1257   000E5C  6E57               	movwf	_flag^0,c
  1258   000E5E                     l3225:
  1259                           
  1260                           ;light_manager.c: 22:     if(state == 0){
  1261   000E5E  5015               	movf	set_light@state^0,w,c
  1262   000E60  1016               	iorwf	(set_light@state+1)^0,w,c
  1263   000E62  A4D8               	btfss	status,2,c
  1264   000E64  EF36  F007         	goto	u2801
  1265   000E68  EF38  F007         	goto	u2800
  1266   000E6C                     u2801:
  1267   000E6C  EFAD  F007         	goto	l378
  1268   000E70                     u2800:
  1269   000E70                     
  1270                           ;light_manager.c: 23:         unsigned int record_index = (curr_month - 6)*31 + curr_day
      +                          -1;
  1271   000E70  C011  F005         	movff	set_light@curr_month,___wmul@multiplier
  1272   000E74  C012  F006         	movff	set_light@curr_month+1,___wmul@multiplier+1
  1273   000E78  0E00               	movlw	0
  1274   000E7A  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  1275   000E7C  0E1F               	movlw	31
  1276   000E7E  6E07               	movwf	___wmul@multiplicand^0,c
  1277   000E80  EC7F  F013         	call	___wmul	;wreg free
  1278   000E84  500F               	movf	set_light@curr_day^0,w,c
  1279   000E86  2605               	addwf	?___wmul^0,f,c
  1280   000E88  5010               	movf	(set_light@curr_day+1)^0,w,c
  1281   000E8A  2206               	addwfc	(?___wmul+1)^0,f,c
  1282   000E8C  0E45               	movlw	69
  1283   000E8E  2405               	addwf	?___wmul^0,w,c
  1284   000E90  6E1F               	movwf	set_light@record_index^0,c
  1285   000E92  0EFF               	movlw	255
  1286   000E94  2006               	addwfc	(?___wmul+1)^0,w,c
  1287   000E96  6E20               	movwf	(set_light@record_index+1)^0,c
  1288   000E98                     
  1289                           ;light_manager.c: 25:         if(luminosity < 10){
  1290   000E98  5014               	movf	(set_light@luminosity+1)^0,w,c
  1291   000E9A  E107               	bnz	u2811
  1292   000E9C  0E0A               	movlw	10
  1293   000E9E  5C13               	subwf	set_light@luminosity^0,w,c
  1294   000EA0  B0D8               	btfsc	status,0,c
  1295   000EA2  EF55  F007         	goto	u2811
  1296   000EA6  EF57  F007         	goto	u2810
  1297   000EAA                     u2811:
  1298   000EAA  EF82  F007         	goto	l3239
  1299   000EAE                     u2810:
  1300   000EAE                     
  1301                           ;light_manager.c: 26:             if(flag == 0){
  1302   000EAE  5057               	movf	_flag^0,w,c
  1303   000EB0  A4D8               	btfss	status,2,c
  1304   000EB2  EF5D  F007         	goto	u2821
  1305   000EB6  EF5F  F007         	goto	u2820
  1306   000EBA                     u2821:
  1307   000EBA  EF60  F007         	goto	l3235
  1308   000EBE                     u2820:
  1309   000EBE                     
  1310                           ;light_manager.c: 27:                 LATHbits.LATH3 = 1;
  1311   000EBE  8680               	bsf	128,3,c	;volatile
  1312   000EC0                     l3235:
  1313                           
  1314                           ;light_manager.c: 29:             if(sunset_records[record_index] == -1){
  1315   000EC0  90D8               	bcf	status,0,c
  1316   000EC2  341F               	rlcf	set_light@record_index^0,w,c
  1317   000EC4  6ED9               	movwf	fsr2l,c
  1318   000EC6  3420               	rlcf	(set_light@record_index+1)^0,w,c
  1319   000EC8  6EDA               	movwf	fsr2h,c
  1320   000ECA  0E00               	movlw	low _sunset_records
  1321   000ECC  26D9               	addwf	fsr2l,f,c
  1322   000ECE  0E02               	movlw	high _sunset_records
  1323   000ED0  22DA               	addwfc	fsr2h,f,c
  1324   000ED2  28DE               	incf	postinc2,w,c
  1325   000ED4  E106               	bnz	u2831
  1326   000ED6  28DE               	incf	postinc2,w,c
  1327   000ED8  A4D8               	btfss	status,2,c
  1328   000EDA  EF71  F007         	goto	u2831
  1329   000EDE  EF73  F007         	goto	u2830
  1330   000EE2                     u2831:
  1331   000EE2  EFEA  F007         	goto	l3259
  1332   000EE6                     u2830:
  1333   000EE6                     
  1334                           ;light_manager.c: 30:                 sunset_records[record_index] = curr_hour;
  1335   000EE6  90D8               	bcf	status,0,c
  1336   000EE8  341F               	rlcf	set_light@record_index^0,w,c
  1337   000EEA  6ED9               	movwf	fsr2l,c
  1338   000EEC  3420               	rlcf	(set_light@record_index+1)^0,w,c
  1339   000EEE  6EDA               	movwf	fsr2h,c
  1340   000EF0  0E00               	movlw	low _sunset_records
  1341   000EF2  26D9               	addwf	fsr2l,f,c
  1342   000EF4  0E02               	movlw	high _sunset_records
  1343   000EF6  22DA               	addwfc	fsr2h,f,c
  1344   000EF8  C00D  FFDE         	movff	set_light@curr_hour,postinc2
  1345   000EFC  C00E  FFDD         	movff	set_light@curr_hour+1,postdec2
  1346   000F00  EFEA  F007         	goto	l3259
  1347   000F04                     l3239:
  1348                           
  1349                           ;light_manager.c: 34:             if(flag == 0){
  1350   000F04  5057               	movf	_flag^0,w,c
  1351   000F06  A4D8               	btfss	status,2,c
  1352   000F08  EF88  F007         	goto	u2841
  1353   000F0C  EF8A  F007         	goto	u2840
  1354   000F10                     u2841:
  1355   000F10  EF8B  F007         	goto	l3243
  1356   000F14                     u2840:
  1357   000F14                     
  1358                           ;light_manager.c: 35:                 LATHbits.LATH3 = 0;
  1359   000F14  9680               	bcf	128,3,c	;volatile
  1360   000F16                     l3243:
  1361                           
  1362                           ;light_manager.c: 38:             if(sunrise_records[record_index] == -1){
  1363   000F16  90D8               	bcf	status,0,c
  1364   000F18  341F               	rlcf	set_light@record_index^0,w,c
  1365   000F1A  6ED9               	movwf	fsr2l,c
  1366   000F1C  3420               	rlcf	(set_light@record_index+1)^0,w,c
  1367   000F1E  6EDA               	movwf	fsr2h,c
  1368   000F20  0E00               	movlw	low _sunrise_records
  1369   000F22  26D9               	addwf	fsr2l,f,c
  1370   000F24  0E01               	movlw	high _sunrise_records
  1371   000F26  22DA               	addwfc	fsr2h,f,c
  1372   000F28  28DE               	incf	postinc2,w,c
  1373   000F2A  E106               	bnz	u2851
  1374   000F2C  28DE               	incf	postinc2,w,c
  1375   000F2E  A4D8               	btfss	status,2,c
  1376   000F30  EF9C  F007         	goto	u2851
  1377   000F34  EF9E  F007         	goto	u2850
  1378   000F38                     u2851:
  1379   000F38  EFEA  F007         	goto	l3259
  1380   000F3C                     u2850:
  1381   000F3C                     
  1382                           ;light_manager.c: 39:                 sunrise_records[record_index] = curr_hour;
  1383   000F3C  90D8               	bcf	status,0,c
  1384   000F3E  341F               	rlcf	set_light@record_index^0,w,c
  1385   000F40  6ED9               	movwf	fsr2l,c
  1386   000F42  3420               	rlcf	(set_light@record_index+1)^0,w,c
  1387   000F44  6EDA               	movwf	fsr2h,c
  1388   000F46  0E00               	movlw	low _sunrise_records
  1389   000F48  26D9               	addwf	fsr2l,f,c
  1390   000F4A  0E01               	movlw	high _sunrise_records
  1391   000F4C  22DA               	addwfc	fsr2h,f,c
  1392   000F4E  C00D  FFDE         	movff	set_light@curr_hour,postinc2
  1393   000F52  C00E  FFDD         	movff	set_light@curr_hour+1,postdec2
  1394   000F56  EFEA  F007         	goto	l3259
  1395   000F5A                     l378:
  1396                           
  1397                           ;light_manager.c: 43:         LATDbits.LATD7 = 1;
  1398   000F5A  8E7C               	bsf	124,7,c	;volatile
  1399   000F5C                     
  1400                           ;light_manager.c: 44:         if((curr_hour >= sunrise_list[curr_month] && curr_hour <= 
      +                          sunset_list[curr_month])){
  1401   000F5C  90D8               	bcf	status,0,c
  1402   000F5E  3411               	rlcf	set_light@curr_month^0,w,c
  1403   000F60  6ED9               	movwf	fsr2l,c
  1404   000F62  3412               	rlcf	(set_light@curr_month+1)^0,w,c
  1405   000F64  6EDA               	movwf	fsr2h,c
  1406   000F66  0EA8               	movlw	low _sunrise_list
  1407   000F68  26D9               	addwf	fsr2l,f,c
  1408   000F6A  0E00               	movlw	high _sunrise_list
  1409   000F6C  22DA               	addwfc	fsr2h,f,c
  1410   000F6E  50DE               	movf	postinc2,w,c
  1411   000F70  5C0D               	subwf	set_light@curr_hour^0,w,c
  1412   000F72  50DE               	movf	postinc2,w,c
  1413   000F74  580E               	subwfb	(set_light@curr_hour+1)^0,w,c
  1414   000F76  A0D8               	btfss	status,0,c
  1415   000F78  EFC0  F007         	goto	u2861
  1416   000F7C  EFC2  F007         	goto	u2860
  1417   000F80                     u2861:
  1418   000F80  EFE1  F007         	goto	l3255
  1419   000F84                     u2860:
  1420   000F84  90D8               	bcf	status,0,c
  1421   000F86  3411               	rlcf	set_light@curr_month^0,w,c
  1422   000F88  6ED9               	movwf	fsr2l,c
  1423   000F8A  3412               	rlcf	(set_light@curr_month+1)^0,w,c
  1424   000F8C  6EDA               	movwf	fsr2h,c
  1425   000F8E  0EC0               	movlw	low _sunset_list
  1426   000F90  26D9               	addwf	fsr2l,f,c
  1427   000F92  0E00               	movlw	high _sunset_list
  1428   000F94  22DA               	addwfc	fsr2h,f,c
  1429   000F96  500D               	movf	set_light@curr_hour^0,w,c
  1430   000F98  5CDE               	subwf	postinc2,w,c
  1431   000F9A  500E               	movf	(set_light@curr_hour+1)^0,w,c
  1432   000F9C  58DE               	subwfb	postinc2,w,c
  1433   000F9E  A0D8               	btfss	status,0,c
  1434   000FA0  EFD4  F007         	goto	u2871
  1435   000FA4  EFD6  F007         	goto	u2870
  1436   000FA8                     u2871:
  1437   000FA8  EFE1  F007         	goto	l3255
  1438   000FAC                     u2870:
  1439   000FAC                     
  1440                           ;light_manager.c: 45:             if(flag == 0){
  1441   000FAC  5057               	movf	_flag^0,w,c
  1442   000FAE  A4D8               	btfss	status,2,c
  1443   000FB0  EFDC  F007         	goto	u2881
  1444   000FB4  EFDE  F007         	goto	u2880
  1445   000FB8                     u2881:
  1446   000FB8  EFEA  F007         	goto	l3259
  1447   000FBC                     u2880:
  1448   000FBC                     
  1449                           ;light_manager.c: 46:             LATHbits.LATH3 = 0;
  1450   000FBC  9680               	bcf	128,3,c	;volatile
  1451   000FBE  EFEA  F007         	goto	l3259
  1452   000FC2                     l3255:
  1453                           
  1454                           ;light_manager.c: 49:             if(flag == 0){
  1455   000FC2  5057               	movf	_flag^0,w,c
  1456   000FC4  A4D8               	btfss	status,2,c
  1457   000FC6  EFE7  F007         	goto	u2891
  1458   000FCA  EFE9  F007         	goto	u2890
  1459   000FCE                     u2891:
  1460   000FCE  EFEA  F007         	goto	l3259
  1461   000FD2                     u2890:
  1462   000FD2                     
  1463                           ;light_manager.c: 50:                 LATHbits.LATH3 = 1;
  1464   000FD2  8680               	bsf	128,3,c	;volatile
  1465   000FD4                     l3259:
  1466                           
  1467                           ;light_manager.c: 56:     if(curr_hour == 0 && curr_day == 01 && curr_month == 06){
  1468   000FD4  500D               	movf	set_light@curr_hour^0,w,c
  1469   000FD6  100E               	iorwf	(set_light@curr_hour+1)^0,w,c
  1470   000FD8  A4D8               	btfss	status,2,c
  1471   000FDA  EFF1  F007         	goto	u2901
  1472   000FDE  EFF3  F007         	goto	u2900
  1473   000FE2                     u2901:
  1474   000FE2  EF33  F008         	goto	l3277
  1475   000FE6                     u2900:
  1476   000FE6  040F               	decf	set_light@curr_day^0,w,c
  1477   000FE8  1010               	iorwf	(set_light@curr_day+1)^0,w,c
  1478   000FEA  A4D8               	btfss	status,2,c
  1479   000FEC  EFFA  F007         	goto	u2911
  1480   000FF0  EFFC  F007         	goto	u2910
  1481   000FF4                     u2911:
  1482   000FF4  EF33  F008         	goto	l3277
  1483   000FF8                     u2910:
  1484   000FF8  0E06               	movlw	6
  1485   000FFA  1811               	xorwf	set_light@curr_month^0,w,c
  1486   000FFC  1012               	iorwf	(set_light@curr_month+1)^0,w,c
  1487   000FFE  A4D8               	btfss	status,2,c
  1488   001000  EF04  F008         	goto	u2921
  1489   001004  EF06  F008         	goto	u2920
  1490   001008                     u2921:
  1491   001008  EF33  F008         	goto	l3277
  1492   00100C                     u2920:
  1493   00100C                     
  1494                           ;light_manager.c: 57:         for(unsigned int i = 0;i < 62;i++){
  1495   00100C  0E00               	movlw	0
  1496   00100E  6E22               	movwf	(set_light@i+1)^0,c
  1497   001010  0E00               	movlw	0
  1498   001012  6E21               	movwf	set_light@i^0,c
  1499   001014                     l3271:
  1500                           
  1501                           ;light_manager.c: 58:             sunrise_records[i] = -1;
  1502   001014  90D8               	bcf	status,0,c
  1503   001016  3421               	rlcf	set_light@i^0,w,c
  1504   001018  6ED9               	movwf	fsr2l,c
  1505   00101A  3422               	rlcf	(set_light@i+1)^0,w,c
  1506   00101C  6EDA               	movwf	fsr2h,c
  1507   00101E  0E00               	movlw	low _sunrise_records
  1508   001020  26D9               	addwf	fsr2l,f,c
  1509   001022  0E01               	movlw	high _sunrise_records
  1510   001024  22DA               	addwfc	fsr2h,f,c
  1511   001026  0EFF               	movlw	255
  1512   001028  6EDE               	movwf	postinc2,c
  1513   00102A  0EFF               	movlw	255
  1514   00102C  6EDD               	movwf	postdec2,c
  1515                           
  1516                           ;light_manager.c: 59:             sunset_records[i] = -1;
  1517   00102E  90D8               	bcf	status,0,c
  1518   001030  3421               	rlcf	set_light@i^0,w,c
  1519   001032  6ED9               	movwf	fsr2l,c
  1520   001034  3422               	rlcf	(set_light@i+1)^0,w,c
  1521   001036  6EDA               	movwf	fsr2h,c
  1522   001038  0E00               	movlw	low _sunset_records
  1523   00103A  26D9               	addwf	fsr2l,f,c
  1524   00103C  0E02               	movlw	high _sunset_records
  1525   00103E  22DA               	addwfc	fsr2h,f,c
  1526   001040  0EFF               	movlw	255
  1527   001042  6EDE               	movwf	postinc2,c
  1528   001044  0EFF               	movlw	255
  1529   001046  6EDD               	movwf	postdec2,c
  1530   001048                     
  1531                           ;light_manager.c: 60:         }
  1532   001048  4A21               	infsnz	set_light@i^0,f,c
  1533   00104A  2A22               	incf	(set_light@i+1)^0,f,c
  1534   00104C  5022               	movf	(set_light@i+1)^0,w,c
  1535   00104E  E109               	bnz	u2930
  1536   001050  0E3E               	movlw	62
  1537   001052  5C21               	subwf	set_light@i^0,w,c
  1538   001054  A0D8               	btfss	status,0,c
  1539   001056  EF2F  F008         	goto	u2931
  1540   00105A  EF31  F008         	goto	u2930
  1541   00105E                     u2931:
  1542   00105E  EF0A  F008         	goto	l3271
  1543   001062                     u2930:
  1544   001062  EFC8  F008         	goto	l3301
  1545   001066                     l3277:
  1546   001066  040D               	decf	set_light@curr_hour^0,w,c
  1547   001068  100E               	iorwf	(set_light@curr_hour+1)^0,w,c
  1548   00106A  A4D8               	btfss	status,2,c
  1549   00106C  EF3A  F008         	goto	u2941
  1550   001070  EF3C  F008         	goto	u2940
  1551   001074                     u2941:
  1552   001074  EFC8  F008         	goto	l3301
  1553   001078                     u2940:
  1554   001078  0E1F               	movlw	31
  1555   00107A  180F               	xorwf	set_light@curr_day^0,w,c
  1556   00107C  1010               	iorwf	(set_light@curr_day+1)^0,w,c
  1557   00107E  A4D8               	btfss	status,2,c
  1558   001080  EF44  F008         	goto	u2951
  1559   001084  EF46  F008         	goto	u2950
  1560   001088                     u2951:
  1561   001088  EFC8  F008         	goto	l3301
  1562   00108C                     u2950:
  1563   00108C  0E07               	movlw	7
  1564   00108E  1811               	xorwf	set_light@curr_month^0,w,c
  1565   001090  1012               	iorwf	(set_light@curr_month+1)^0,w,c
  1566   001092  A4D8               	btfss	status,2,c
  1567   001094  EF4E  F008         	goto	u2961
  1568   001098  EF50  F008         	goto	u2960
  1569   00109C                     u2961:
  1570   00109C  EFC8  F008         	goto	l3301
  1571   0010A0                     u2960:
  1572   0010A0                     
  1573                           ;light_manager.c: 62:         int midnight_approx = 0;
  1574   0010A0  0E00               	movlw	0
  1575   0010A2  6E1E               	movwf	(set_light@midnight_approx+1)^0,c
  1576   0010A4  0E00               	movlw	0
  1577   0010A6  6E1D               	movwf	set_light@midnight_approx^0,c
  1578                           
  1579                           ;light_manager.c: 63:         for(unsigned int i = 0; i < 61; i++){
  1580   0010A8  0E00               	movlw	0
  1581   0010AA  6E24               	movwf	(set_light@i_1545+1)^0,c
  1582   0010AC  0E00               	movlw	0
  1583   0010AE  6E23               	movwf	set_light@i_1545^0,c
  1584   0010B0                     l3289:
  1585                           
  1586                           ;light_manager.c: 65:             midnight_approx += sunrise_records[i+1] - sunset_recor
      +                          ds[i];
  1587   0010B0  90D8               	bcf	status,0,c
  1588   0010B2  3423               	rlcf	set_light@i_1545^0,w,c
  1589   0010B4  6ED9               	movwf	fsr2l,c
  1590   0010B6  3424               	rlcf	(set_light@i_1545+1)^0,w,c
  1591   0010B8  6EDA               	movwf	fsr2h,c
  1592   0010BA  0E00               	movlw	low _sunset_records
  1593   0010BC  26D9               	addwf	fsr2l,f,c
  1594   0010BE  0E02               	movlw	high _sunset_records
  1595   0010C0  22DA               	addwfc	fsr2h,f,c
  1596   0010C2  CFDE F017          	movff	postinc2,??_set_light
  1597   0010C6  CFDD F018          	movff	postdec2,??_set_light+1
  1598   0010CA  90D8               	bcf	status,0,c
  1599   0010CC  3423               	rlcf	set_light@i_1545^0,w,c
  1600   0010CE  6ED9               	movwf	fsr2l,c
  1601   0010D0  3424               	rlcf	(set_light@i_1545+1)^0,w,c
  1602   0010D2  6EDA               	movwf	fsr2h,c
  1603   0010D4  0E02               	movlw	low (_sunrise_records+2)
  1604   0010D6  26D9               	addwf	fsr2l,f,c
  1605   0010D8  0E01               	movlw	high (_sunrise_records+2)
  1606   0010DA  22DA               	addwfc	fsr2h,f,c
  1607   0010DC  CFDE F019          	movff	postinc2,??_set_light+2
  1608   0010E0  CFDD F01A          	movff	postdec2,??_set_light+3
  1609   0010E4  5017               	movf	??_set_light^0,w,c
  1610   0010E6  5C19               	subwf	(??_set_light+2)^0,w,c
  1611   0010E8  6E1B               	movwf	(??_set_light+4)^0,c
  1612   0010EA  5018               	movf	(??_set_light+1)^0,w,c
  1613   0010EC  581A               	subwfb	(??_set_light+3)^0,w,c
  1614   0010EE  6E1C               	movwf	(??_set_light+5)^0,c
  1615   0010F0  501B               	movf	(??_set_light+4)^0,w,c
  1616   0010F2  261D               	addwf	set_light@midnight_approx^0,f,c
  1617   0010F4  501C               	movf	(??_set_light+5)^0,w,c
  1618   0010F6  221E               	addwfc	(set_light@midnight_approx+1)^0,f,c
  1619                           
  1620                           ;light_manager.c: 66:             if(sunrise_records[i+1] == -1 || sunset_records[i] == 
      +                          -1){
  1621   0010F8  90D8               	bcf	status,0,c
  1622   0010FA  3423               	rlcf	set_light@i_1545^0,w,c
  1623   0010FC  6ED9               	movwf	fsr2l,c
  1624   0010FE  3424               	rlcf	(set_light@i_1545+1)^0,w,c
  1625   001100  6EDA               	movwf	fsr2h,c
  1626   001102  0E02               	movlw	low (_sunrise_records+2)
  1627   001104  26D9               	addwf	fsr2l,f,c
  1628   001106  0E01               	movlw	high (_sunrise_records+2)
  1629   001108  22DA               	addwfc	fsr2h,f,c
  1630   00110A  28DE               	incf	postinc2,w,c
  1631   00110C  E108               	bnz	u2970
  1632   00110E  28DE               	incf	postinc2,w,c
  1633   001110  B4D8               	btfsc	status,2,c
  1634   001112  EF8D  F008         	goto	u2971
  1635   001116  EF8F  F008         	goto	u2970
  1636   00111A                     u2971:
  1637   00111A  EFCA  F008         	goto	l400
  1638   00111E                     u2970:
  1639   00111E  90D8               	bcf	status,0,c
  1640   001120  3423               	rlcf	set_light@i_1545^0,w,c
  1641   001122  6ED9               	movwf	fsr2l,c
  1642   001124  3424               	rlcf	(set_light@i_1545+1)^0,w,c
  1643   001126  6EDA               	movwf	fsr2h,c
  1644   001128  0E00               	movlw	low _sunset_records
  1645   00112A  26D9               	addwf	fsr2l,f,c
  1646   00112C  0E02               	movlw	high _sunset_records
  1647   00112E  22DA               	addwfc	fsr2h,f,c
  1648   001130  28DE               	incf	postinc2,w,c
  1649   001132  E106               	bnz	u2981
  1650   001134  28DE               	incf	postinc2,w,c
  1651   001136  A4D8               	btfss	status,2,c
  1652   001138  EFA0  F008         	goto	u2981
  1653   00113C  EFA2  F008         	goto	u2980
  1654   001140                     u2981:
  1655   001140  EFA4  F008         	goto	l3293
  1656   001144                     u2980:
  1657   001144  EFCA  F008         	goto	l400
  1658   001148                     l3293:
  1659                           
  1660                           ;light_manager.c: 69:         }
  1661   001148  4A23               	infsnz	set_light@i_1545^0,f,c
  1662   00114A  2A24               	incf	(set_light@i_1545+1)^0,f,c
  1663   00114C  5024               	movf	(set_light@i_1545+1)^0,w,c
  1664   00114E  E109               	bnz	u2990
  1665   001150  0E3D               	movlw	61
  1666   001152  5C23               	subwf	set_light@i_1545^0,w,c
  1667   001154  A0D8               	btfss	status,0,c
  1668   001156  EFAF  F008         	goto	u2991
  1669   00115A  EFB1  F008         	goto	u2990
  1670   00115E                     u2991:
  1671   00115E  EF58  F008         	goto	l3289
  1672   001162                     u2990:
  1673   001162                     
  1674                           ;light_manager.c: 71:         midnight_approx = midnight_approx/61;
  1675   001162  C01D  F005         	movff	set_light@midnight_approx,___awdiv@dividend
  1676   001166  C01E  F006         	movff	set_light@midnight_approx+1,___awdiv@dividend+1
  1677   00116A  0E00               	movlw	0
  1678   00116C  6E08               	movwf	(___awdiv@divisor+1)^0,c
  1679   00116E  0E3D               	movlw	61
  1680   001170  6E07               	movwf	___awdiv@divisor^0,c
  1681   001172  EC7B  F010         	call	___awdiv	;wreg free
  1682   001176  C005  F01D         	movff	?___awdiv,set_light@midnight_approx
  1683   00117A  C006  F01E         	movff	?___awdiv+1,set_light@midnight_approx+1
  1684   00117E                     
  1685                           ;light_manager.c: 72:         sunset_records[0] = -1;
  1686   00117E  0102               	movlb	2	; () banked
  1687   001180  6900               	setf	_sunset_records& (0+255),b
  1688   001182  6901               	setf	(_sunset_records+1)& (0+255),b
  1689                           
  1690                           ;light_manager.c: 73:         increment_hours(midnight_approx);
  1691   001184  C01D  F005         	movff	set_light@midnight_approx,increment_hours@value
  1692   001188  C01E  F006         	movff	set_light@midnight_approx+1,increment_hours@value+1
  1693   00118C  ECC5  F013         	call	_increment_hours	;wreg free
  1694   001190                     l3301:
  1695                           
  1696                           ;light_manager.c: 76:     flag = 0;
  1697   001190  0E00               	movlw	0
  1698   001192  6E57               	movwf	_flag^0,c
  1699   001194                     l400:
  1700   001194  0012               	return		;funcret
  1701   001196                     __end_of_set_light:
  1702                           	callstack 0
  1703                           
  1704 ;; *************** function _increment_hours *****************
  1705 ;; Defined at:
  1706 ;;		line 46 in file "timers.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  value           2    4[COMRAM] int 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;		None
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		wreg, status,2, status,0
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1720 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1723 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1724 ;;Total ram usage:        2 bytes
  1725 ;; Hardware stack levels used: 1
  1726 ;; Hardware stack levels required when called: 2
  1727 ;; This function calls:
  1728 ;;		Nothing
  1729 ;; This function is called by:
  1730 ;;		_set_light
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           	psect	text2
  1735   00278A                     __ptext2:
  1736                           	callstack 0
  1737   00278A                     _increment_hours:
  1738                           	callstack 27
  1739   00278A                     
  1740                           ;timers.c: 47:     hours += value;
  1741   00278A  5005               	movf	increment_hours@value^0,w,c
  1742   00278C  0100               	movlb	0	; () banked
  1743   00278E  27F8               	addwf	_hours& (0+255),f,b
  1744   002790  5006               	movf	(increment_hours@value+1)^0,w,c
  1745   002792  23F9               	addwfc	(_hours+1)& (0+255),f,b
  1746   002794                     
  1747                           ; BSR set to: 0
  1748   002794  0012               	return		;funcret
  1749   002796                     __end_of_increment_hours:
  1750                           	callstack 0
  1751                           
  1752 ;; *************** function ___awdiv *****************
  1753 ;; Defined at:
  1754 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\awdiv.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  dividend        2    4[COMRAM] int 
  1757 ;;  divisor         2    6[COMRAM] int 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  quotient        2   10[COMRAM] int 
  1760 ;;  sign            1    9[COMRAM] unsigned char 
  1761 ;;  counter         1    8[COMRAM] unsigned char 
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  2    4[COMRAM] int 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1771 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1772 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1774 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1775 ;;Total ram usage:        8 bytes
  1776 ;; Hardware stack levels used: 1
  1777 ;; Hardware stack levels required when called: 2
  1778 ;; This function calls:
  1779 ;;		Nothing
  1780 ;; This function is called by:
  1781 ;;		_set_light
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text3
  1786   0020F6                     __ptext3:
  1787                           	callstack 0
  1788   0020F6                     ___awdiv:
  1789                           	callstack 27
  1790   0020F6  0E00               	movlw	0
  1791   0020F8  6E0A               	movwf	___awdiv@sign^0,c
  1792   0020FA  BE08               	btfsc	(___awdiv@divisor+1)^0,7,c
  1793   0020FC  EF84  F010         	goto	u1770
  1794   002100  EF82  F010         	goto	u1771
  1795   002104                     u1771:
  1796   002104  EF8A  F010         	goto	l2457
  1797   002108                     u1770:
  1798   002108  6C07               	negf	___awdiv@divisor^0,c
  1799   00210A  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  1800   00210C  B0D8               	btfsc	status,0,c
  1801   00210E  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  1802   002110  0E01               	movlw	1
  1803   002112  6E0A               	movwf	___awdiv@sign^0,c
  1804   002114                     l2457:
  1805   002114  BE06               	btfsc	(___awdiv@dividend+1)^0,7,c
  1806   002116  EF91  F010         	goto	u1780
  1807   00211A  EF8F  F010         	goto	u1781
  1808   00211E                     u1781:
  1809   00211E  EF97  F010         	goto	l2463
  1810   002122                     u1780:
  1811   002122  6C05               	negf	___awdiv@dividend^0,c
  1812   002124  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  1813   002126  B0D8               	btfsc	status,0,c
  1814   002128  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  1815   00212A  0E01               	movlw	1
  1816   00212C  1A0A               	xorwf	___awdiv@sign^0,f,c
  1817   00212E                     l2463:
  1818   00212E  0E00               	movlw	0
  1819   002130  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  1820   002132  0E00               	movlw	0
  1821   002134  6E0B               	movwf	___awdiv@quotient^0,c
  1822   002136  5007               	movf	___awdiv@divisor^0,w,c
  1823   002138  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  1824   00213A  B4D8               	btfsc	status,2,c
  1825   00213C  EFA2  F010         	goto	u1791
  1826   002140  EFA4  F010         	goto	u1790
  1827   002144                     u1791:
  1828   002144  EFCC  F010         	goto	l2485
  1829   002148                     u1790:
  1830   002148  0E01               	movlw	1
  1831   00214A  6E09               	movwf	___awdiv@counter^0,c
  1832   00214C  EFAC  F010         	goto	l2471
  1833   002150                     l2469:
  1834   002150  90D8               	bcf	status,0,c
  1835   002152  3607               	rlcf	___awdiv@divisor^0,f,c
  1836   002154  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  1837   002156  2A09               	incf	___awdiv@counter^0,f,c
  1838   002158                     l2471:
  1839   002158  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  1840   00215A  EFB1  F010         	goto	u1801
  1841   00215E  EFB3  F010         	goto	u1800
  1842   002162                     u1801:
  1843   002162  EFA8  F010         	goto	l2469
  1844   002166                     u1800:
  1845   002166                     l2473:
  1846   002166  90D8               	bcf	status,0,c
  1847   002168  360B               	rlcf	___awdiv@quotient^0,f,c
  1848   00216A  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  1849   00216C  5007               	movf	___awdiv@divisor^0,w,c
  1850   00216E  5C05               	subwf	___awdiv@dividend^0,w,c
  1851   002170  5008               	movf	(___awdiv@divisor+1)^0,w,c
  1852   002172  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  1853   002174  A0D8               	btfss	status,0,c
  1854   002176  EFBF  F010         	goto	u1811
  1855   00217A  EFC1  F010         	goto	u1810
  1856   00217E                     u1811:
  1857   00217E  EFC6  F010         	goto	l2481
  1858   002182                     u1810:
  1859   002182  5007               	movf	___awdiv@divisor^0,w,c
  1860   002184  5E05               	subwf	___awdiv@dividend^0,f,c
  1861   002186  5008               	movf	(___awdiv@divisor+1)^0,w,c
  1862   002188  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  1863   00218A  800B               	bsf	___awdiv@quotient^0,0,c
  1864   00218C                     l2481:
  1865   00218C  90D8               	bcf	status,0,c
  1866   00218E  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  1867   002190  3207               	rrcf	___awdiv@divisor^0,f,c
  1868   002192  2E09               	decfsz	___awdiv@counter^0,f,c
  1869   002194  EFB3  F010         	goto	l2473
  1870   002198                     l2485:
  1871   002198  500A               	movf	___awdiv@sign^0,w,c
  1872   00219A  B4D8               	btfsc	status,2,c
  1873   00219C  EFD2  F010         	goto	u1821
  1874   0021A0  EFD4  F010         	goto	u1820
  1875   0021A4                     u1821:
  1876   0021A4  EFD8  F010         	goto	l2489
  1877   0021A8                     u1820:
  1878   0021A8  6C0B               	negf	___awdiv@quotient^0,c
  1879   0021AA  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  1880   0021AC  B0D8               	btfsc	status,0,c
  1881   0021AE  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  1882   0021B0                     l2489:
  1883   0021B0  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  1884   0021B4  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  1885   0021B8  0012               	return		;funcret
  1886   0021BA                     __end_of___awdiv:
  1887                           	callstack 0
  1888                           
  1889 ;; *************** function _get_year *****************
  1890 ;; Defined at:
  1891 ;;		line 125 in file "timers.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  2    4[COMRAM] unsigned int 
  1898 ;; Registers used:
  1899 ;;		None
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1905 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;Total ram usage:        2 bytes
  1910 ;; Hardware stack levels used: 1
  1911 ;; Hardware stack levels required when called: 2
  1912 ;; This function calls:
  1913 ;;		Nothing
  1914 ;; This function is called by:
  1915 ;;		_main
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text4
  1920   0027A2                     __ptext4:
  1921                           	callstack 0
  1922   0027A2                     _get_year:
  1923                           	callstack 28
  1924   0027A2                     
  1925                           ;timers.c: 126:     return year;
  1926   0027A2  C0DC  F005         	movff	_year,?_get_year
  1927   0027A6  C0DD  F006         	movff	_year+1,?_get_year+1
  1928   0027AA  0012               	return		;funcret
  1929   0027AC                     __end_of_get_year:
  1930                           	callstack 0
  1931                           
  1932 ;; *************** function _get_week_day *****************
  1933 ;; Defined at:
  1934 ;;		line 104 in file "timers.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  2    4[COMRAM] PTR const unsigned char 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1948 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1952 ;;Total ram usage:        2 bytes
  1953 ;; Hardware stack levels used: 1
  1954 ;; Hardware stack levels required when called: 2
  1955 ;; This function calls:
  1956 ;;		Nothing
  1957 ;; This function is called by:
  1958 ;;		_main
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text5
  1963   001E7E                     __ptext5:
  1964                           	callstack 0
  1965   001E7E                     _get_week_day:
  1966                           	callstack 28
  1967   001E7E                     
  1968                           ;timers.c: 105:     if(week_day == 0){
  1969   001E7E  5058               	movf	_week_day^0,w,c
  1970   001E80  1059               	iorwf	(_week_day+1)^0,w,c
  1971   001E82  A4D8               	btfss	status,2,c
  1972   001E84  EF46  F00F         	goto	u1881
  1973   001E88  EF48  F00F         	goto	u1880
  1974   001E8C                     u1881:
  1975   001E8C  EF4E  F00F         	goto	l2597
  1976   001E90                     u1880:
  1977   001E90                     
  1978                           ;timers.c: 106:         return("MON");
  1979   001E90  0E1C               	movlw	low STR_1
  1980   001E92  6E05               	movwf	?_get_week_day^0,c
  1981   001E94  0E0E               	movlw	high STR_1
  1982   001E96  6E06               	movwf	(?_get_week_day+1)^0,c
  1983   001E98  EFAD  F00F         	goto	l228
  1984   001E9C                     l2597:
  1985   001E9C  0458               	decf	_week_day^0,w,c
  1986   001E9E  1059               	iorwf	(_week_day+1)^0,w,c
  1987   001EA0  A4D8               	btfss	status,2,c
  1988   001EA2  EF55  F00F         	goto	u1891
  1989   001EA6  EF57  F00F         	goto	u1890
  1990   001EAA                     u1891:
  1991   001EAA  EF5D  F00F         	goto	l2605
  1992   001EAE                     u1890:
  1993   001EAE                     
  1994                           ;timers.c: 108:         return("TUE");
  1995   001EAE  0E14               	movlw	low STR_2
  1996   001EB0  6E05               	movwf	?_get_week_day^0,c
  1997   001EB2  0E0E               	movlw	high STR_2
  1998   001EB4  6E06               	movwf	(?_get_week_day+1)^0,c
  1999   001EB6  EFAD  F00F         	goto	l228
  2000   001EBA                     l2605:
  2001   001EBA  0E02               	movlw	2
  2002   001EBC  1858               	xorwf	_week_day^0,w,c
  2003   001EBE  1059               	iorwf	(_week_day+1)^0,w,c
  2004   001EC0  A4D8               	btfss	status,2,c
  2005   001EC2  EF65  F00F         	goto	u1901
  2006   001EC6  EF67  F00F         	goto	u1900
  2007   001ECA                     u1901:
  2008   001ECA  EF6D  F00F         	goto	l2613
  2009   001ECE                     u1900:
  2010   001ECE                     
  2011                           ;timers.c: 110:         return("WED");
  2012   001ECE  0E10               	movlw	low STR_3
  2013   001ED0  6E05               	movwf	?_get_week_day^0,c
  2014   001ED2  0E0E               	movlw	high STR_3
  2015   001ED4  6E06               	movwf	(?_get_week_day+1)^0,c
  2016   001ED6  EFAD  F00F         	goto	l228
  2017   001EDA                     l2613:
  2018   001EDA  0E03               	movlw	3
  2019   001EDC  1858               	xorwf	_week_day^0,w,c
  2020   001EDE  1059               	iorwf	(_week_day+1)^0,w,c
  2021   001EE0  A4D8               	btfss	status,2,c
  2022   001EE2  EF75  F00F         	goto	u1911
  2023   001EE6  EF77  F00F         	goto	u1910
  2024   001EEA                     u1911:
  2025   001EEA  EF7D  F00F         	goto	l2621
  2026   001EEE                     u1910:
  2027   001EEE                     
  2028                           ;timers.c: 112:         return("THU");
  2029   001EEE  0E28               	movlw	low STR_4
  2030   001EF0  6E05               	movwf	?_get_week_day^0,c
  2031   001EF2  0E0E               	movlw	high STR_4
  2032   001EF4  6E06               	movwf	(?_get_week_day+1)^0,c
  2033   001EF6  EFAD  F00F         	goto	l228
  2034   001EFA                     l2621:
  2035   001EFA  0E04               	movlw	4
  2036   001EFC  1858               	xorwf	_week_day^0,w,c
  2037   001EFE  1059               	iorwf	(_week_day+1)^0,w,c
  2038   001F00  A4D8               	btfss	status,2,c
  2039   001F02  EF85  F00F         	goto	u1921
  2040   001F06  EF87  F00F         	goto	u1920
  2041   001F0A                     u1921:
  2042   001F0A  EF8D  F00F         	goto	l2629
  2043   001F0E                     u1920:
  2044   001F0E                     
  2045                           ;timers.c: 114:         return("FRI");
  2046   001F0E  0E18               	movlw	low STR_5
  2047   001F10  6E05               	movwf	?_get_week_day^0,c
  2048   001F12  0E0E               	movlw	high STR_5
  2049   001F14  6E06               	movwf	(?_get_week_day+1)^0,c
  2050   001F16  EFAD  F00F         	goto	l228
  2051   001F1A                     l2629:
  2052   001F1A  0E05               	movlw	5
  2053   001F1C  1858               	xorwf	_week_day^0,w,c
  2054   001F1E  1059               	iorwf	(_week_day+1)^0,w,c
  2055   001F20  A4D8               	btfss	status,2,c
  2056   001F22  EF95  F00F         	goto	u1931
  2057   001F26  EF97  F00F         	goto	u1930
  2058   001F2A                     u1931:
  2059   001F2A  EF9D  F00F         	goto	l2637
  2060   001F2E                     u1930:
  2061   001F2E                     
  2062                           ;timers.c: 116:         return("SAT");
  2063   001F2E  0E24               	movlw	low STR_6
  2064   001F30  6E05               	movwf	?_get_week_day^0,c
  2065   001F32  0E0E               	movlw	high STR_6
  2066   001F34  6E06               	movwf	(?_get_week_day+1)^0,c
  2067   001F36  EFAD  F00F         	goto	l228
  2068   001F3A                     l2637:
  2069   001F3A  0E06               	movlw	6
  2070   001F3C  1858               	xorwf	_week_day^0,w,c
  2071   001F3E  1059               	iorwf	(_week_day+1)^0,w,c
  2072   001F40  A4D8               	btfss	status,2,c
  2073   001F42  EFA5  F00F         	goto	u1941
  2074   001F46  EFA7  F00F         	goto	u1940
  2075   001F4A                     u1941:
  2076   001F4A  EFAD  F00F         	goto	l235
  2077   001F4E                     u1940:
  2078   001F4E                     
  2079                           ;timers.c: 118:         return("SUN");
  2080   001F4E  0E20               	movlw	low STR_7
  2081   001F50  6E05               	movwf	?_get_week_day^0,c
  2082   001F52  0E0E               	movlw	high STR_7
  2083   001F54  6E06               	movwf	(?_get_week_day+1)^0,c
  2084   001F56  EFAD  F00F         	goto	l228
  2085   001F5A                     l235:
  2086   001F5A                     l228:
  2087   001F5A  0012               	return		;funcret
  2088   001F5C                     __end_of_get_week_day:
  2089                           	callstack 0
  2090                           
  2091 ;; *************** function _get_seconds *****************
  2092 ;; Defined at:
  2093 ;;		line 92 in file "timers.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;		None
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;		None
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  2    4[COMRAM] unsigned int 
  2100 ;; Registers used:
  2101 ;;		None
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2107 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2110 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2111 ;;Total ram usage:        2 bytes
  2112 ;; Hardware stack levels used: 1
  2113 ;; Hardware stack levels required when called: 2
  2114 ;; This function calls:
  2115 ;;		Nothing
  2116 ;; This function is called by:
  2117 ;;		_main
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text6
  2122   0027AC                     __ptext6:
  2123                           	callstack 0
  2124   0027AC                     _get_seconds:
  2125                           	callstack 28
  2126   0027AC                     
  2127                           ;timers.c: 93:     return seconds;
  2128   0027AC  C0FC  F005         	movff	_seconds,?_get_seconds
  2129   0027B0  C0FD  F006         	movff	_seconds+1,?_get_seconds+1
  2130   0027B4  0012               	return		;funcret
  2131   0027B6                     __end_of_get_seconds:
  2132                           	callstack 0
  2133                           
  2134 ;; *************** function _get_month *****************
  2135 ;; Defined at:
  2136 ;;		line 122 in file "timers.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;		None
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  2    4[COMRAM] unsigned int 
  2143 ;; Registers used:
  2144 ;;		None
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2150 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2154 ;;Total ram usage:        2 bytes
  2155 ;; Hardware stack levels used: 1
  2156 ;; Hardware stack levels required when called: 2
  2157 ;; This function calls:
  2158 ;;		Nothing
  2159 ;; This function is called by:
  2160 ;;		_main
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text7
  2165   0027B6                     __ptext7:
  2166                           	callstack 0
  2167   0027B6                     _get_month:
  2168                           	callstack 28
  2169   0027B6                     
  2170                           ;timers.c: 123:     return month;
  2171   0027B6  C0F6  F005         	movff	_month,?_get_month
  2172   0027BA  C0F7  F006         	movff	_month+1,?_get_month+1
  2173   0027BE  0012               	return		;funcret
  2174   0027C0                     __end_of_get_month:
  2175                           	callstack 0
  2176                           
  2177 ;; *************** function _get_minutes *****************
  2178 ;; Defined at:
  2179 ;;		line 95 in file "timers.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;		None
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  2    4[COMRAM] unsigned int 
  2186 ;; Registers used:
  2187 ;;		None
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2193 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2196 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2197 ;;Total ram usage:        2 bytes
  2198 ;; Hardware stack levels used: 1
  2199 ;; Hardware stack levels required when called: 2
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_main
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text8
  2208   0027C0                     __ptext8:
  2209                           	callstack 0
  2210   0027C0                     _get_minutes:
  2211                           	callstack 28
  2212   0027C0                     
  2213                           ;timers.c: 96:     return minutes;
  2214   0027C0  C0FA  F005         	movff	_minutes,?_get_minutes
  2215   0027C4  C0FB  F006         	movff	_minutes+1,?_get_minutes+1
  2216   0027C8  0012               	return		;funcret
  2217   0027CA                     __end_of_get_minutes:
  2218                           	callstack 0
  2219                           
  2220 ;; *************** function _get_hours *****************
  2221 ;; Defined at:
  2222 ;;		line 98 in file "timers.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;		None
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;		None
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  2    4[COMRAM] unsigned int 
  2229 ;; Registers used:
  2230 ;;		None
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2236 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2240 ;;Total ram usage:        2 bytes
  2241 ;; Hardware stack levels used: 1
  2242 ;; Hardware stack levels required when called: 2
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_main
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text9
  2251   0027CA                     __ptext9:
  2252                           	callstack 0
  2253   0027CA                     _get_hours:
  2254                           	callstack 28
  2255   0027CA                     
  2256                           ;timers.c: 99:     return hours;
  2257   0027CA  C0F8  F005         	movff	_hours,?_get_hours
  2258   0027CE  C0F9  F006         	movff	_hours+1,?_get_hours+1
  2259   0027D2  0012               	return		;funcret
  2260   0027D4                     __end_of_get_hours:
  2261                           	callstack 0
  2262                           
  2263 ;; *************** function _get_day *****************
  2264 ;; Defined at:
  2265 ;;		line 101 in file "timers.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;		None
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;		None
  2270 ;; Return value:  Size  Location     Type
  2271 ;;                  2    4[COMRAM] unsigned int 
  2272 ;; Registers used:
  2273 ;;		None
  2274 ;; Tracked objects:
  2275 ;;		On entry : 0/0
  2276 ;;		On exit  : 0/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2279 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2282 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2283 ;;Total ram usage:        2 bytes
  2284 ;; Hardware stack levels used: 1
  2285 ;; Hardware stack levels required when called: 2
  2286 ;; This function calls:
  2287 ;;		Nothing
  2288 ;; This function is called by:
  2289 ;;		_main
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           	psect	text10
  2294   0027D4                     __ptext10:
  2295                           	callstack 0
  2296   0027D4                     _get_day:
  2297                           	callstack 28
  2298   0027D4                     
  2299                           ;timers.c: 102:     return day;
  2300   0027D4  C0DE  F005         	movff	_day,?_get_day
  2301   0027D8  C0DF  F006         	movff	_day+1,?_get_day+1
  2302   0027DC  0012               	return		;funcret
  2303   0027DE                     __end_of_get_day:
  2304                           	callstack 0
  2305                           
  2306 ;; *************** function _Timer0_init *****************
  2307 ;; Defined at:
  2308 ;;		line 17 in file "timers.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;		None
  2311 ;; Auto vars:     Size  Location     Type
  2312 ;;		None
  2313 ;; Return value:  Size  Location     Type
  2314 ;;                  1    wreg      void 
  2315 ;; Registers used:
  2316 ;;		wreg, status,2, status,0
  2317 ;; Tracked objects:
  2318 ;;		On entry : 0/0
  2319 ;;		On exit  : 0/0
  2320 ;;		Unchanged: 0/0
  2321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2326 ;;Total ram usage:        0 bytes
  2327 ;; Hardware stack levels used: 1
  2328 ;; Hardware stack levels required when called: 2
  2329 ;; This function calls:
  2330 ;;		Nothing
  2331 ;; This function is called by:
  2332 ;;		_main
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           	psect	text11
  2337   0025A0                     __ptext11:
  2338                           	callstack 0
  2339   0025A0                     _Timer0_init:
  2340                           	callstack 28
  2341   0025A0                     
  2342                           ;timers.c: 19:     T0CON1bits.T0CS=0b010;
  2343   0025A0  50D6               	movf	214,w,c	;volatile
  2344   0025A2  0B1F               	andlw	-225
  2345   0025A4  0940               	iorlw	64
  2346   0025A6  6ED6               	movwf	214,c	;volatile
  2347   0025A8                     
  2348                           ;timers.c: 20:     T0CON1bits.T0ASYNC=1;
  2349   0025A8  88D6               	bsf	214,4,c	;volatile
  2350   0025AA                     
  2351                           ;timers.c: 21:     if(test_mode == 0){
  2352   0025AA  0100               	movlb	0	; () banked
  2353   0025AC  51E0               	movf	_test_mode& (0+255),w,b
  2354   0025AE  11E1               	iorwf	(_test_mode+1)& (0+255),w,b
  2355   0025B0  A4D8               	btfss	status,2,c
  2356   0025B2  EFDD  F012         	goto	u1831
  2357   0025B6  EFDF  F012         	goto	u1830
  2358   0025BA                     u1831:
  2359   0025BA  EFE9  F012         	goto	l2501
  2360   0025BE                     u1830:
  2361   0025BE                     
  2362                           ; BSR set to: 0
  2363                           ;timers.c: 22:         T0CON1bits.T0CKPS=0b1000;
  2364   0025BE  50D6               	movf	214,w,c	;volatile
  2365   0025C0  0BF0               	andlw	-16
  2366   0025C2  0908               	iorlw	8
  2367   0025C4  6ED6               	movwf	214,c	;volatile
  2368                           
  2369                           ;timers.c: 23:         TMR0H=0b00001011;
  2370   0025C6  0E0B               	movlw	11
  2371   0025C8  6ED4               	movwf	212,c	;volatile
  2372                           
  2373                           ;timers.c: 24:         TMR0L=0b11011011;
  2374   0025CA  0EDB               	movlw	219
  2375   0025CC  6ED3               	movwf	211,c	;volatile
  2376                           
  2377                           ;timers.c: 25:     }else{
  2378   0025CE  EFEF  F012         	goto	l2503
  2379   0025D2                     l2501:
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;timers.c: 26:         T0CON1bits.T0CKPS=0;
  2383   0025D2  0EF0               	movlw	-16
  2384   0025D4  16D6               	andwf	214,f,c	;volatile
  2385                           
  2386                           ;timers.c: 27:         TMR0H=0b00000000;
  2387   0025D6  0E00               	movlw	0
  2388   0025D8  6ED4               	movwf	212,c	;volatile
  2389                           
  2390                           ;timers.c: 28:         TMR0L=0b00000000;
  2391   0025DA  0E00               	movlw	0
  2392   0025DC  6ED3               	movwf	211,c	;volatile
  2393   0025DE                     l2503:
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;timers.c: 30:     T0CON0bits.T016BIT=1;
  2397   0025DE  88D5               	bsf	213,4,c	;volatile
  2398   0025E0                     
  2399                           ; BSR set to: 0
  2400                           ;timers.c: 34:     T0CON0bits.T0EN=1;
  2401   0025E0  8ED5               	bsf	213,7,c	;volatile
  2402   0025E2                     
  2403                           ; BSR set to: 0
  2404   0025E2  0012               	return		;funcret
  2405   0025E4                     __end_of_Timer0_init:
  2406                           	callstack 0
  2407                           
  2408 ;; *************** function _Light_init *****************
  2409 ;; Defined at:
  2410 ;;		line 5 in file "light_manager.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;		None
  2413 ;; Auto vars:     Size  Location     Type
  2414 ;;		None
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		None
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;Total ram usage:        0 bytes
  2429 ;; Hardware stack levels used: 1
  2430 ;; Hardware stack levels required when called: 2
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_main
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text12
  2439   0027DE                     __ptext12:
  2440                           	callstack 0
  2441   0027DE                     _Light_init:
  2442                           	callstack 28
  2443   0027DE                     
  2444                           ;light_manager.c: 6:     TRISHbits.TRISH3 = 0;
  2445   0027DE  9688               	bcf	136,3,c	;volatile
  2446   0027E0  0012               	return		;funcret
  2447   0027E2                     __end_of_Light_init:
  2448                           	callstack 0
  2449                           
  2450 ;; *************** function _LCD_sendstring *****************
  2451 ;; Defined at:
  2452 ;;		line 137 in file "LCD.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  strlst          2    9[COMRAM] PTR PTR unsigned char 
  2455 ;;		 -> main@lst(16), 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;  i               2   13[COMRAM] int 
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      void 
  2460 ;; Registers used:
  2461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2468 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2469 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;Total ram usage:        6 bytes
  2472 ;; Hardware stack levels used: 1
  2473 ;; Hardware stack levels required when called: 6
  2474 ;; This function calls:
  2475 ;;		_LCD_sendbyte
  2476 ;;		_LCD_setline
  2477 ;; This function is called by:
  2478 ;;		_main
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text13
  2483   001844                     __ptext13:
  2484                           	callstack 0
  2485   001844                     _LCD_sendstring:
  2486                           	callstack 24
  2487   001844                     
  2488                           ;LCD.c: 137: void LCD_sendstring(char *strlst[8]);LCD.c: 138: { int i;;LCD.c: 139:      
      +                             for (i=0;i<8;i++){
  2489   001844  0E00               	movlw	0
  2490   001846  6E0F               	movwf	(LCD_sendstring@i+1)^0,c
  2491   001848  0E00               	movlw	0
  2492   00184A  6E0E               	movwf	LCD_sendstring@i^0,c
  2493   00184C                     l2649:
  2494                           
  2495                           ;LCD.c: 140:             LCD_setline(i);
  2496   00184C  C00E  F008         	movff	LCD_sendstring@i,LCD_setline@line
  2497   001850  C00F  F009         	movff	LCD_sendstring@i+1,LCD_setline@line+1
  2498   001854  EC40  F00E         	call	_LCD_setline	;wreg free
  2499                           
  2500                           ;LCD.c: 142:             while(*strlst[i] !=0){
  2501   001858  EF54  F00C         	goto	l2653
  2502   00185C                     l2651:
  2503                           
  2504                           ;LCD.c: 143:                 LCD_sendbyte(*strlst[i]++,1);
  2505   00185C  0E01               	movlw	1
  2506   00185E  6E06               	movwf	LCD_sendbyte@type^0,c
  2507   001860  90D8               	bcf	status,0,c
  2508   001862  340E               	rlcf	LCD_sendstring@i^0,w,c
  2509   001864  6ED9               	movwf	fsr2l,c
  2510   001866  340F               	rlcf	(LCD_sendstring@i+1)^0,w,c
  2511   001868  6EDA               	movwf	fsr2h,c
  2512   00186A  500A               	movf	LCD_sendstring@strlst^0,w,c
  2513   00186C  26D9               	addwf	fsr2l,f,c
  2514   00186E  500B               	movf	(LCD_sendstring@strlst+1)^0,w,c
  2515   001870  22DA               	addwfc	fsr2h,f,c
  2516   001872  CFDF F00C          	movff	indf2,??_LCD_sendstring
  2517   001876  0E01               	movlw	1
  2518   001878  26DE               	addwf	postinc2,f,c
  2519   00187A  CFDF F00D          	movff	indf2,??_LCD_sendstring+1
  2520   00187E  0E00               	movlw	0
  2521   001880  22DD               	addwfc	postdec2,f,c
  2522   001882  C00C  FFF6         	movff	??_LCD_sendstring,tblptrl
  2523   001886  C00D  FFF7         	movff	??_LCD_sendstring+1,tblptrh
  2524   00188A  0E00               	movlw	low (__smallconst shr (0+16))
  2525   00188C  6EF8               	movwf	tblptru,c
  2526   00188E  0E0D               	movlw	(high __ramtop+-1)
  2527   001890  64F7               	cpfsgt	tblptrh,c
  2528   001892  D003               	bra	u1957
  2529   001894  0008               	tblrd		*
  2530   001896  50F5               	movf	tablat,w,c
  2531   001898  D005               	bra	u1950
  2532   00189A                     u1957:
  2533   00189A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2534   00189E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2535   0018A2  50EF               	movf	indf0,w,c
  2536   0018A4                     u1950:
  2537   0018A4  EC92  F013         	call	_LCD_sendbyte
  2538   0018A8                     l2653:
  2539                           
  2540                           ;LCD.c: 142:             while(*strlst[i] !=0){
  2541   0018A8  90D8               	bcf	status,0,c
  2542   0018AA  340E               	rlcf	LCD_sendstring@i^0,w,c
  2543   0018AC  6ED9               	movwf	fsr2l,c
  2544   0018AE  340F               	rlcf	(LCD_sendstring@i+1)^0,w,c
  2545   0018B0  6EDA               	movwf	fsr2h,c
  2546   0018B2  500A               	movf	LCD_sendstring@strlst^0,w,c
  2547   0018B4  26D9               	addwf	fsr2l,f,c
  2548   0018B6  500B               	movf	(LCD_sendstring@strlst+1)^0,w,c
  2549   0018B8  22DA               	addwfc	fsr2h,f,c
  2550   0018BA  CFDE F00C          	movff	postinc2,??_LCD_sendstring
  2551   0018BE  CFDD F00D          	movff	postdec2,??_LCD_sendstring+1
  2552   0018C2  C00C  FFF6         	movff	??_LCD_sendstring,tblptrl
  2553   0018C6  C00D  FFF7         	movff	??_LCD_sendstring+1,tblptrh
  2554   0018CA  0E00               	movlw	low (__smallconst shr (0+16))
  2555   0018CC  6EF8               	movwf	tblptru,c
  2556   0018CE  0E0D               	movlw	(high __ramtop+-1)
  2557   0018D0  64F7               	cpfsgt	tblptrh,c
  2558   0018D2  D003               	bra	u1967
  2559   0018D4  0008               	tblrd		*
  2560   0018D6  50F5               	movf	tablat,w,c
  2561   0018D8  D005               	bra	u1960
  2562   0018DA                     u1967:
  2563   0018DA  CFF6 FFE9          	movff	tblptrl,fsr0l
  2564   0018DE  CFF7 FFEA          	movff	tblptrh,fsr0h
  2565   0018E2  50EF               	movf	indf0,w,c
  2566   0018E4                     u1960:
  2567   0018E4  0900               	iorlw	0
  2568   0018E6  A4D8               	btfss	status,2,c
  2569   0018E8  EF78  F00C         	goto	u1971
  2570   0018EC  EF7A  F00C         	goto	u1970
  2571   0018F0                     u1971:
  2572   0018F0  EF2E  F00C         	goto	l2651
  2573   0018F4                     u1970:
  2574   0018F4                     
  2575                           ;LCD.c: 146:             LCD_sendbyte (0xC2,0);
  2576   0018F4  0E00               	movlw	0
  2577   0018F6  6E06               	movwf	LCD_sendbyte@type^0,c
  2578   0018F8  0EC2               	movlw	194
  2579   0018FA  EC92  F013         	call	_LCD_sendbyte
  2580                           
  2581                           ;LCD.c: 147:             LCD_sendbyte (0b00111010,1);
  2582   0018FE  0E01               	movlw	1
  2583   001900  6E06               	movwf	LCD_sendbyte@type^0,c
  2584   001902  0E3A               	movlw	58
  2585   001904  EC92  F013         	call	_LCD_sendbyte
  2586                           
  2587                           ;LCD.c: 148:             LCD_sendbyte (0xC5,0);
  2588   001908  0E00               	movlw	0
  2589   00190A  6E06               	movwf	LCD_sendbyte@type^0,c
  2590   00190C  0EC5               	movlw	197
  2591   00190E  EC92  F013         	call	_LCD_sendbyte
  2592                           
  2593                           ;LCD.c: 149:             LCD_sendbyte (0b00101110,1);
  2594   001912  0E01               	movlw	1
  2595   001914  6E06               	movwf	LCD_sendbyte@type^0,c
  2596   001916  0E2E               	movlw	46
  2597   001918  EC92  F013         	call	_LCD_sendbyte
  2598                           
  2599                           ;LCD.c: 150:             LCD_sendbyte (0xC8,0);
  2600   00191C  0E00               	movlw	0
  2601   00191E  6E06               	movwf	LCD_sendbyte@type^0,c
  2602   001920  0EC8               	movlw	200
  2603   001922  EC92  F013         	call	_LCD_sendbyte
  2604                           
  2605                           ;LCD.c: 151:             LCD_sendbyte (0b00100000,1);
  2606   001926  0E01               	movlw	1
  2607   001928  6E06               	movwf	LCD_sendbyte@type^0,c
  2608   00192A  0E20               	movlw	32
  2609   00192C  EC92  F013         	call	_LCD_sendbyte
  2610                           
  2611                           ;LCD.c: 152:             LCD_sendbyte (0xC9,0);
  2612   001930  0E00               	movlw	0
  2613   001932  6E06               	movwf	LCD_sendbyte@type^0,c
  2614   001934  0EC9               	movlw	201
  2615   001936  EC92  F013         	call	_LCD_sendbyte
  2616                           
  2617                           ;LCD.c: 153:             LCD_sendbyte (0b00100000,1);
  2618   00193A  0E01               	movlw	1
  2619   00193C  6E06               	movwf	LCD_sendbyte@type^0,c
  2620   00193E  0E20               	movlw	32
  2621   001940  EC92  F013         	call	_LCD_sendbyte
  2622                           
  2623                           ;LCD.c: 154:             LCD_sendbyte (0xCA,0);
  2624   001944  0E00               	movlw	0
  2625   001946  6E06               	movwf	LCD_sendbyte@type^0,c
  2626   001948  0ECA               	movlw	202
  2627   00194A  EC92  F013         	call	_LCD_sendbyte
  2628                           
  2629                           ;LCD.c: 155:             LCD_sendbyte (0b00100000,1);
  2630   00194E  0E01               	movlw	1
  2631   001950  6E06               	movwf	LCD_sendbyte@type^0,c
  2632   001952  0E20               	movlw	32
  2633   001954  EC92  F013         	call	_LCD_sendbyte
  2634                           
  2635                           ;LCD.c: 156:             LCD_sendbyte (0xCB,0);
  2636   001958  0E00               	movlw	0
  2637   00195A  6E06               	movwf	LCD_sendbyte@type^0,c
  2638   00195C  0ECB               	movlw	203
  2639   00195E  EC92  F013         	call	_LCD_sendbyte
  2640                           
  2641                           ;LCD.c: 157:             LCD_sendbyte (0b00100000,1);
  2642   001962  0E01               	movlw	1
  2643   001964  6E06               	movwf	LCD_sendbyte@type^0,c
  2644   001966  0E20               	movlw	32
  2645   001968  EC92  F013         	call	_LCD_sendbyte
  2646                           
  2647                           ;LCD.c: 158:             LCD_sendbyte (0xCC,0);
  2648   00196C  0E00               	movlw	0
  2649   00196E  6E06               	movwf	LCD_sendbyte@type^0,c
  2650   001970  0ECC               	movlw	204
  2651   001972  EC92  F013         	call	_LCD_sendbyte
  2652                           
  2653                           ;LCD.c: 159:             LCD_sendbyte (0b00100000,1);
  2654   001976  0E01               	movlw	1
  2655   001978  6E06               	movwf	LCD_sendbyte@type^0,c
  2656   00197A  0E20               	movlw	32
  2657   00197C  EC92  F013         	call	_LCD_sendbyte
  2658                           
  2659                           ;LCD.c: 160:             LCD_sendbyte (0x88,0);
  2660   001980  0E00               	movlw	0
  2661   001982  6E06               	movwf	LCD_sendbyte@type^0,c
  2662   001984  0E88               	movlw	136
  2663   001986  EC92  F013         	call	_LCD_sendbyte
  2664                           
  2665                           ;LCD.c: 161:             LCD_sendbyte (0b00101111,1);
  2666   00198A  0E01               	movlw	1
  2667   00198C  6E06               	movwf	LCD_sendbyte@type^0,c
  2668   00198E  0E2F               	movlw	47
  2669   001990  EC92  F013         	call	_LCD_sendbyte
  2670                           
  2671                           ;LCD.c: 162:             LCD_sendbyte (0x8B,0);
  2672   001994  0E00               	movlw	0
  2673   001996  6E06               	movwf	LCD_sendbyte@type^0,c
  2674   001998  0E8B               	movlw	139
  2675   00199A  EC92  F013         	call	_LCD_sendbyte
  2676                           
  2677                           ;LCD.c: 163:             LCD_sendbyte (0b00101111,1);
  2678   00199E  0E01               	movlw	1
  2679   0019A0  6E06               	movwf	LCD_sendbyte@type^0,c
  2680   0019A2  0E2F               	movlw	47
  2681   0019A4  EC92  F013         	call	_LCD_sendbyte
  2682   0019A8                     
  2683                           ;LCD.c: 164:     }
  2684   0019A8  4A0E               	infsnz	LCD_sendstring@i^0,f,c
  2685   0019AA  2A0F               	incf	(LCD_sendstring@i+1)^0,f,c
  2686   0019AC  BE0F               	btfsc	(LCD_sendstring@i+1)^0,7,c
  2687   0019AE  EFE2  F00C         	goto	u1981
  2688   0019B2  500F               	movf	(LCD_sendstring@i+1)^0,w,c
  2689   0019B4  E109               	bnz	u1980
  2690   0019B6  0E08               	movlw	8
  2691   0019B8  5C0E               	subwf	LCD_sendstring@i^0,w,c
  2692   0019BA  A0D8               	btfss	status,0,c
  2693   0019BC  EFE2  F00C         	goto	u1981
  2694   0019C0  EFE4  F00C         	goto	u1980
  2695   0019C4                     u1981:
  2696   0019C4  EF26  F00C         	goto	l2649
  2697   0019C8                     u1980:
  2698   0019C8  0012               	return		;funcret
  2699   0019CA                     __end_of_LCD_sendstring:
  2700                           	callstack 0
  2701                           
  2702 ;; *************** function _LCD_setline *****************
  2703 ;; Defined at:
  2704 ;;		line 112 in file "LCD.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;  line            2    7[COMRAM] int 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;		None
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  1    wreg      void 
  2711 ;; Registers used:
  2712 ;;		wreg, status,2, status,0, cstack
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2721 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2722 ;;Total ram usage:        2 bytes
  2723 ;; Hardware stack levels used: 1
  2724 ;; Hardware stack levels required when called: 5
  2725 ;; This function calls:
  2726 ;;		_LCD_sendbyte
  2727 ;; This function is called by:
  2728 ;;		_LCD_sendstring
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text14
  2733   001C80                     __ptext14:
  2734                           	callstack 0
  2735   001C80                     _LCD_setline:
  2736                           	callstack 24
  2737   001C80                     
  2738                           ;LCD.c: 112: void LCD_setline(int line);LCD.c: 113: {;LCD.c: 114:     if(line == 0){
  2739   001C80  5008               	movf	LCD_setline@line^0,w,c
  2740   001C82  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2741   001C84  A4D8               	btfss	status,2,c
  2742   001C86  EF47  F00E         	goto	u1691
  2743   001C8A  EF49  F00E         	goto	u1690
  2744   001C8E                     u1691:
  2745   001C8E  EF50  F00E         	goto	l2409
  2746   001C92                     u1690:
  2747   001C92                     
  2748                           ;LCD.c: 115:         LCD_sendbyte(0x80,0);
  2749   001C92  0E00               	movlw	0
  2750   001C94  6E06               	movwf	LCD_sendbyte@type^0,c
  2751   001C96  0E80               	movlw	128
  2752   001C98  EC92  F013         	call	_LCD_sendbyte
  2753                           
  2754                           ;LCD.c: 116:     }else if(line == 1){
  2755   001C9C  EFC6  F00E         	goto	l324
  2756   001CA0                     l2409:
  2757   001CA0  0408               	decf	LCD_setline@line^0,w,c
  2758   001CA2  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2759   001CA4  A4D8               	btfss	status,2,c
  2760   001CA6  EF57  F00E         	goto	u1701
  2761   001CAA  EF59  F00E         	goto	u1700
  2762   001CAE                     u1701:
  2763   001CAE  EF60  F00E         	goto	l2413
  2764   001CB2                     u1700:
  2765   001CB2                     
  2766                           ;LCD.c: 117:         LCD_sendbyte(0x86,0);
  2767   001CB2  0E00               	movlw	0
  2768   001CB4  6E06               	movwf	LCD_sendbyte@type^0,c
  2769   001CB6  0E86               	movlw	134
  2770   001CB8  EC92  F013         	call	_LCD_sendbyte
  2771                           
  2772                           ;LCD.c: 118:     }else if(line == 2){
  2773   001CBC  EFC6  F00E         	goto	l324
  2774   001CC0                     l2413:
  2775   001CC0  0E02               	movlw	2
  2776   001CC2  1808               	xorwf	LCD_setline@line^0,w,c
  2777   001CC4  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2778   001CC6  A4D8               	btfss	status,2,c
  2779   001CC8  EF68  F00E         	goto	u1711
  2780   001CCC  EF6A  F00E         	goto	u1710
  2781   001CD0                     u1711:
  2782   001CD0  EF71  F00E         	goto	l2417
  2783   001CD4                     u1710:
  2784   001CD4                     
  2785                           ;LCD.c: 119:         LCD_sendbyte(0x89,0);
  2786   001CD4  0E00               	movlw	0
  2787   001CD6  6E06               	movwf	LCD_sendbyte@type^0,c
  2788   001CD8  0E89               	movlw	137
  2789   001CDA  EC92  F013         	call	_LCD_sendbyte
  2790                           
  2791                           ;LCD.c: 120:     }else if(line == 3){
  2792   001CDE  EFC6  F00E         	goto	l324
  2793   001CE2                     l2417:
  2794   001CE2  0E03               	movlw	3
  2795   001CE4  1808               	xorwf	LCD_setline@line^0,w,c
  2796   001CE6  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2797   001CE8  A4D8               	btfss	status,2,c
  2798   001CEA  EF79  F00E         	goto	u1721
  2799   001CEE  EF7B  F00E         	goto	u1720
  2800   001CF2                     u1721:
  2801   001CF2  EF82  F00E         	goto	l2421
  2802   001CF6                     u1720:
  2803   001CF6                     
  2804                           ;LCD.c: 121:         LCD_sendbyte(0x8C,0);
  2805   001CF6  0E00               	movlw	0
  2806   001CF8  6E06               	movwf	LCD_sendbyte@type^0,c
  2807   001CFA  0E8C               	movlw	140
  2808   001CFC  EC92  F013         	call	_LCD_sendbyte
  2809                           
  2810                           ;LCD.c: 122:     }else if(line == 4){
  2811   001D00  EFC6  F00E         	goto	l324
  2812   001D04                     l2421:
  2813   001D04  0E04               	movlw	4
  2814   001D06  1808               	xorwf	LCD_setline@line^0,w,c
  2815   001D08  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2816   001D0A  A4D8               	btfss	status,2,c
  2817   001D0C  EF8A  F00E         	goto	u1731
  2818   001D10  EF8C  F00E         	goto	u1730
  2819   001D14                     u1731:
  2820   001D14  EF93  F00E         	goto	l2425
  2821   001D18                     u1730:
  2822   001D18                     
  2823                           ;LCD.c: 123:         LCD_sendbyte(0xC0,0);
  2824   001D18  0E00               	movlw	0
  2825   001D1A  6E06               	movwf	LCD_sendbyte@type^0,c
  2826   001D1C  0EC0               	movlw	192
  2827   001D1E  EC92  F013         	call	_LCD_sendbyte
  2828                           
  2829                           ;LCD.c: 124:     }else if(line == 5){
  2830   001D22  EFC6  F00E         	goto	l324
  2831   001D26                     l2425:
  2832   001D26  0E05               	movlw	5
  2833   001D28  1808               	xorwf	LCD_setline@line^0,w,c
  2834   001D2A  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2835   001D2C  A4D8               	btfss	status,2,c
  2836   001D2E  EF9B  F00E         	goto	u1741
  2837   001D32  EF9D  F00E         	goto	u1740
  2838   001D36                     u1741:
  2839   001D36  EFA4  F00E         	goto	l2429
  2840   001D3A                     u1740:
  2841   001D3A                     
  2842                           ;LCD.c: 125:         LCD_sendbyte(0xC3,0);
  2843   001D3A  0E00               	movlw	0
  2844   001D3C  6E06               	movwf	LCD_sendbyte@type^0,c
  2845   001D3E  0EC3               	movlw	195
  2846   001D40  EC92  F013         	call	_LCD_sendbyte
  2847                           
  2848                           ;LCD.c: 126:     }else if(line == 6){
  2849   001D44  EFC6  F00E         	goto	l324
  2850   001D48                     l2429:
  2851   001D48  0E06               	movlw	6
  2852   001D4A  1808               	xorwf	LCD_setline@line^0,w,c
  2853   001D4C  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2854   001D4E  A4D8               	btfss	status,2,c
  2855   001D50  EFAC  F00E         	goto	u1751
  2856   001D54  EFAE  F00E         	goto	u1750
  2857   001D58                     u1751:
  2858   001D58  EFB5  F00E         	goto	l2433
  2859   001D5C                     u1750:
  2860   001D5C                     
  2861                           ;LCD.c: 127:         LCD_sendbyte(0xC6,0);
  2862   001D5C  0E00               	movlw	0
  2863   001D5E  6E06               	movwf	LCD_sendbyte@type^0,c
  2864   001D60  0EC6               	movlw	198
  2865   001D62  EC92  F013         	call	_LCD_sendbyte
  2866                           
  2867                           ;LCD.c: 128:     }else if(line == 7){
  2868   001D66  EFC6  F00E         	goto	l324
  2869   001D6A                     l2433:
  2870   001D6A  0E07               	movlw	7
  2871   001D6C  1808               	xorwf	LCD_setline@line^0,w,c
  2872   001D6E  1009               	iorwf	(LCD_setline@line+1)^0,w,c
  2873   001D70  A4D8               	btfss	status,2,c
  2874   001D72  EFBD  F00E         	goto	u1761
  2875   001D76  EFBF  F00E         	goto	u1760
  2876   001D7A                     u1761:
  2877   001D7A  EFC6  F00E         	goto	l318
  2878   001D7E                     u1760:
  2879   001D7E                     
  2880                           ;LCD.c: 129:         LCD_sendbyte(0xCD,0);
  2881   001D7E  0E00               	movlw	0
  2882   001D80  6E06               	movwf	LCD_sendbyte@type^0,c
  2883   001D82  0ECD               	movlw	205
  2884   001D84  EC92  F013         	call	_LCD_sendbyte
  2885   001D88  EFC6  F00E         	goto	l324
  2886   001D8C                     l318:
  2887   001D8C                     l324:
  2888   001D8C  0012               	return		;funcret
  2889   001D8E                     __end_of_LCD_setline:
  2890                           	callstack 0
  2891                           
  2892 ;; *************** function _LCD_clear *****************
  2893 ;; Defined at:
  2894 ;;		line 97 in file "LCD.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, status,2, status,0, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2911 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2912 ;;Total ram usage:        1 bytes
  2913 ;; Hardware stack levels used: 1
  2914 ;; Hardware stack levels required when called: 5
  2915 ;; This function calls:
  2916 ;;		_LCD_sendbyte
  2917 ;; This function is called by:
  2918 ;;		_main
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           	psect	text15
  2923   002628                     __ptext15:
  2924                           	callstack 0
  2925   002628                     _LCD_clear:
  2926                           	callstack 25
  2927   002628                     
  2928                           ;LCD.c: 99:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2929   002628  0ED5               	movlw	213
  2930   00262A                     u3027:
  2931   00262A  2EE8               	decfsz	wreg,f,c
  2932   00262C  D7FE               	bra	u3027
  2933   00262E  F000               	nop	
  2934   002630                     
  2935                           ;LCD.c: 100:     LCD_sendbyte(0b00000001,0);
  2936   002630  0E00               	movlw	0
  2937   002632  6E06               	movwf	LCD_sendbyte@type^0,c
  2938   002634  0E01               	movlw	1
  2939   002636  EC92  F013         	call	_LCD_sendbyte
  2940   00263A                     
  2941                           ;LCD.c: 102:     _delay((unsigned long)((2)*(64000000/4000.0)));
  2942   00263A  0E2A               	movlw	42
  2943   00263C  6E08               	movwf	??_LCD_clear^0,c
  2944   00263E  0E8E               	movlw	142
  2945   002640                     u3037:
  2946   002640  2EE8               	decfsz	wreg,f,c
  2947   002642  D7FE               	bra	u3037
  2948   002644  2E08               	decfsz	??_LCD_clear^0,f,c
  2949   002646  D7FC               	bra	u3037
  2950                           
  2951                           ;LCD.c: 103:     LCD_sendbyte(0b00000110,0);
  2952   002648  0E00               	movlw	0
  2953   00264A  6E06               	movwf	LCD_sendbyte@type^0,c
  2954   00264C  0E06               	movlw	6
  2955   00264E  EC92  F013         	call	_LCD_sendbyte
  2956                           
  2957                           ;LCD.c: 104:     LCD_sendbyte(0b00001110,0);
  2958   002652  0E00               	movlw	0
  2959   002654  6E06               	movwf	LCD_sendbyte@type^0,c
  2960   002656  0E0E               	movlw	14
  2961   002658  EC92  F013         	call	_LCD_sendbyte
  2962                           
  2963                           ;LCD.c: 105:     LCD_sendbyte(0b00001100,0);
  2964   00265C  0E00               	movlw	0
  2965   00265E  6E06               	movwf	LCD_sendbyte@type^0,c
  2966   002660  0E0C               	movlw	12
  2967   002662  EC92  F013         	call	_LCD_sendbyte
  2968   002666  0012               	return		;funcret
  2969   002668                     __end_of_LCD_clear:
  2970                           	callstack 0
  2971                           
  2972 ;; *************** function _LCD_Init *****************
  2973 ;; Defined at:
  2974 ;;		line 52 in file "LCD.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		wreg, status,2, status,0, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2990 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2991 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2992 ;;Total ram usage:        2 bytes
  2993 ;; Hardware stack levels used: 1
  2994 ;; Hardware stack levels required when called: 5
  2995 ;; This function calls:
  2996 ;;		_LCD_sendbyte
  2997 ;;		_LCD_sendnibble
  2998 ;; This function is called by:
  2999 ;;		_main
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text16
  3004   00231C                     __ptext16:
  3005                           	callstack 0
  3006   00231C                     _LCD_Init:
  3007                           	callstack 25
  3008   00231C                     
  3009                           ;LCD.c: 57:     TRISCbits.TRISC2 = 0;
  3010   00231C  9483               	bcf	131,2,c	;volatile
  3011                           
  3012                           ;LCD.c: 58:     TRISCbits.TRISC6 = 0;
  3013   00231E  9C83               	bcf	131,6,c	;volatile
  3014                           
  3015                           ;LCD.c: 59:     TRISBbits.TRISB3 = 0;
  3016   002320  9682               	bcf	130,3,c	;volatile
  3017                           
  3018                           ;LCD.c: 60:     TRISBbits.TRISB2 = 0;
  3019   002322  9482               	bcf	130,2,c	;volatile
  3020                           
  3021                           ;LCD.c: 61:     TRISEbits.TRISE3 = 0;
  3022   002324  9685               	bcf	133,3,c	;volatile
  3023                           
  3024                           ;LCD.c: 62:     TRISEbits.TRISE1 = 0;
  3025   002326  9285               	bcf	133,1,c	;volatile
  3026                           
  3027                           ;LCD.c: 65:     LATCbits.LATC6 = 0;
  3028   002328  9C7B               	bcf	123,6,c	;volatile
  3029                           
  3030                           ;LCD.c: 66:     LATCbits.LATC2 = 0;
  3031   00232A  947B               	bcf	123,2,c	;volatile
  3032                           
  3033                           ;LCD.c: 67:     LATBbits.LATB3 = 0;
  3034   00232C  967A               	bcf	122,3,c	;volatile
  3035                           
  3036                           ;LCD.c: 68:     LATBbits.LATB2 = 0;
  3037   00232E  947A               	bcf	122,2,c	;volatile
  3038                           
  3039                           ;LCD.c: 69:     LATEbits.LATE3 = 0;
  3040   002330  967D               	bcf	125,3,c	;volatile
  3041                           
  3042                           ;LCD.c: 70:     LATEbits.LATE1 = 0;
  3043   002332  927D               	bcf	125,1,c	;volatile
  3044   002334                     
  3045                           ;LCD.c: 72:     _delay((unsigned long)((60)*(64000000/4000.0)));
  3046   002334  0E05               	movlw	5
  3047   002336  6E09               	movwf	(??_LCD_Init+1)^0,c
  3048   002338  0EDF               	movlw	223
  3049   00233A  6E08               	movwf	??_LCD_Init^0,c
  3050   00233C  0EBC               	movlw	188
  3051   00233E                     u3047:
  3052   00233E  2EE8               	decfsz	wreg,f,c
  3053   002340  D7FE               	bra	u3047
  3054   002342  2E08               	decfsz	??_LCD_Init^0,f,c
  3055   002344  D7FC               	bra	u3047
  3056   002346  2E09               	decfsz	(??_LCD_Init+1)^0,f,c
  3057   002348  D7FA               	bra	u3047
  3058   00234A                     
  3059                           ;LCD.c: 74:     LCD_sendnibble(0b0011);
  3060   00234A  0E03               	movlw	3
  3061   00234C  EC26  F012         	call	_LCD_sendnibble
  3062   002350                     
  3063                           ;LCD.c: 75:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  3064   002350  0ED5               	movlw	213
  3065   002352                     u3057:
  3066   002352  2EE8               	decfsz	wreg,f,c
  3067   002354  D7FE               	bra	u3057
  3068   002356  F000               	nop	
  3069                           
  3070                           ;LCD.c: 77:     LCD_sendnibble(0b0010);
  3071   002358  0E02               	movlw	2
  3072   00235A  EC26  F012         	call	_LCD_sendnibble
  3073   00235E                     
  3074                           ;LCD.c: 78:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  3075   00235E  0ED5               	movlw	213
  3076   002360                     u3067:
  3077   002360  2EE8               	decfsz	wreg,f,c
  3078   002362  D7FE               	bra	u3067
  3079   002364  F000               	nop	
  3080   002366                     
  3081                           ;LCD.c: 80:     LCD_sendbyte(0b00101000,0);
  3082   002366  0E00               	movlw	0
  3083   002368  6E06               	movwf	LCD_sendbyte@type^0,c
  3084   00236A  0E28               	movlw	40
  3085   00236C  EC92  F013         	call	_LCD_sendbyte
  3086   002370                     
  3087                           ;LCD.c: 81:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  3088   002370  0ED5               	movlw	213
  3089   002372                     u3077:
  3090   002372  2EE8               	decfsz	wreg,f,c
  3091   002374  D7FE               	bra	u3077
  3092   002376  F000               	nop	
  3093   002378                     
  3094                           ;LCD.c: 83:     LCD_sendbyte(0b00101000,0);
  3095   002378  0E00               	movlw	0
  3096   00237A  6E06               	movwf	LCD_sendbyte@type^0,c
  3097   00237C  0E28               	movlw	40
  3098   00237E  EC92  F013         	call	_LCD_sendbyte
  3099   002382                     
  3100                           ;LCD.c: 84:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  3101   002382  0ED5               	movlw	213
  3102   002384                     u3087:
  3103   002384  2EE8               	decfsz	wreg,f,c
  3104   002386  D7FE               	bra	u3087
  3105   002388  F000               	nop	
  3106   00238A                     
  3107                           ;LCD.c: 86:     LCD_sendbyte(0b00000001,0);
  3108   00238A  0E00               	movlw	0
  3109   00238C  6E06               	movwf	LCD_sendbyte@type^0,c
  3110   00238E  0E01               	movlw	1
  3111   002390  EC92  F013         	call	_LCD_sendbyte
  3112   002394                     
  3113                           ;LCD.c: 87:     _delay((unsigned long)((2)*(64000000/4000.0)));
  3114   002394  0E2A               	movlw	42
  3115   002396  6E08               	movwf	??_LCD_Init^0,c
  3116   002398  0E8E               	movlw	142
  3117   00239A                     u3097:
  3118   00239A  2EE8               	decfsz	wreg,f,c
  3119   00239C  D7FE               	bra	u3097
  3120   00239E  2E08               	decfsz	??_LCD_Init^0,f,c
  3121   0023A0  D7FC               	bra	u3097
  3122   0023A2                     
  3123                           ;LCD.c: 89:     LCD_sendbyte(0b00000110,0);
  3124   0023A2  0E00               	movlw	0
  3125   0023A4  6E06               	movwf	LCD_sendbyte@type^0,c
  3126   0023A6  0E06               	movlw	6
  3127   0023A8  EC92  F013         	call	_LCD_sendbyte
  3128   0023AC                     
  3129                           ;LCD.c: 91:     LCD_sendbyte(0b00001110,0);
  3130   0023AC  0E00               	movlw	0
  3131   0023AE  6E06               	movwf	LCD_sendbyte@type^0,c
  3132   0023B0  0E0E               	movlw	14
  3133   0023B2  EC92  F013         	call	_LCD_sendbyte
  3134   0023B6                     
  3135                           ;LCD.c: 92:     LCD_sendbyte(0b00001100,0);
  3136   0023B6  0E00               	movlw	0
  3137   0023B8  6E06               	movwf	LCD_sendbyte@type^0,c
  3138   0023BA  0E0C               	movlw	12
  3139   0023BC  EC92  F013         	call	_LCD_sendbyte
  3140   0023C0  0012               	return		;funcret
  3141   0023C2                     __end_of_LCD_Init:
  3142                           	callstack 0
  3143                           
  3144 ;; *************** function _LCD_sendbyte *****************
  3145 ;; Defined at:
  3146 ;;		line 39 in file "LCD.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  Byte            1    wreg     unsigned char 
  3149 ;;  type            1    5[COMRAM] unsigned char 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  Byte            1    6[COMRAM] unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3161 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3162 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3164 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3165 ;;Total ram usage:        2 bytes
  3166 ;; Hardware stack levels used: 1
  3167 ;; Hardware stack levels required when called: 4
  3168 ;; This function calls:
  3169 ;;		_LCD_sendnibble
  3170 ;; This function is called by:
  3171 ;;		_LCD_Init
  3172 ;;		_LCD_clear
  3173 ;;		_LCD_setline
  3174 ;;		_LCD_sendstring
  3175 ;;		_LCD_scroll
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text17
  3180   002724                     __ptext17:
  3181                           	callstack 0
  3182   002724                     _LCD_sendbyte:
  3183                           	callstack 24
  3184                           
  3185                           ;incstack = 0
  3186                           ;LCD_sendbyte@Byte stored from wreg
  3187   002724  6E07               	movwf	LCD_sendbyte@Byte^0,c
  3188   002726                     
  3189                           ;LCD.c: 39: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 40: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  3190   002726  B006               	btfsc	LCD_sendbyte@type^0,0,c
  3191   002728  D002               	bra	u1675
  3192   00272A  9C7B               	bcf	123,6,c	;volatile
  3193   00272C  D001               	bra	u1676
  3194   00272E                     u1675:
  3195   00272E  8C7B               	bsf	123,6,c	;volatile
  3196   002730                     u1676:
  3197   002730                     
  3198                           ;LCD.c: 43:     LCD_sendnibble(Byte >> 4);
  3199   002730  3807               	swapf	LCD_sendbyte@Byte^0,w,c
  3200   002732  0B0F               	andlw	15
  3201   002734  EC26  F012         	call	_LCD_sendnibble
  3202   002738                     
  3203                           ;LCD.c: 44:     LCD_sendnibble(Byte);
  3204   002738  5007               	movf	LCD_sendbyte@Byte^0,w,c
  3205   00273A  EC26  F012         	call	_LCD_sendnibble
  3206   00273E                     
  3207                           ;LCD.c: 46:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  3208   00273E  0EA0               	movlw	160
  3209   002740                     u3107:
  3210   002740  D000               	nop2	
  3211   002742  2EE8               	decfsz	wreg,f,c
  3212   002744  D7FD               	bra	u3107
  3213   002746  0012               	return		;funcret
  3214   002748                     __end_of_LCD_sendbyte:
  3215                           	callstack 0
  3216                           
  3217 ;; *************** function _LCD_sendnibble *****************
  3218 ;; Defined at:
  3219 ;;		line 21 in file "LCD.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;  number          1    wreg     unsigned char 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  number          1    4[COMRAM] unsigned char 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, cstack
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3234 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3236 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3237 ;;Total ram usage:        1 bytes
  3238 ;; Hardware stack levels used: 1
  3239 ;; Hardware stack levels required when called: 3
  3240 ;; This function calls:
  3241 ;;		_LCD_E_TOG
  3242 ;; This function is called by:
  3243 ;;		_LCD_sendbyte
  3244 ;;		_LCD_Init
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text18
  3249   00244C                     __ptext18:
  3250                           	callstack 0
  3251   00244C                     _LCD_sendnibble:
  3252                           	callstack 24
  3253                           
  3254                           ;incstack = 0
  3255                           ;LCD_sendnibble@number stored from wreg
  3256   00244C  6E05               	movwf	LCD_sendnibble@number^0,c
  3257   00244E                     
  3258                           ;LCD.c: 21: void LCD_sendnibble(unsigned char number);LCD.c: 22: {;LCD.c: 25:     if(num
      +                          ber & 0b0001){ LATBbits.LATB3 = 1;}else{LATBbits.LATB3 = 0;}
  3259   00244E  A005               	btfss	LCD_sendnibble@number^0,0,c
  3260   002450  EF2C  F012         	goto	u1571
  3261   002454  EF2E  F012         	goto	u1570
  3262   002458                     u1571:
  3263   002458  EF31  F012         	goto	l289
  3264   00245C                     u1570:
  3265   00245C  867A               	bsf	122,3,c	;volatile
  3266   00245E  EF32  F012         	goto	l2299
  3267   002462                     l289:
  3268   002462  967A               	bcf	122,3,c	;volatile
  3269   002464                     l2299:
  3270                           
  3271                           ;LCD.c: 26:     if(number & 0b0010){ LATBbits.LATB2 = 1;}else{LATBbits.LATB2 = 0;}
  3272   002464  A205               	btfss	LCD_sendnibble@number^0,1,c
  3273   002466  EF37  F012         	goto	u1581
  3274   00246A  EF39  F012         	goto	u1580
  3275   00246E                     u1581:
  3276   00246E  EF3C  F012         	goto	l291
  3277   002472                     u1580:
  3278   002472  847A               	bsf	122,2,c	;volatile
  3279   002474  EF3D  F012         	goto	l2303
  3280   002478                     l291:
  3281   002478  947A               	bcf	122,2,c	;volatile
  3282   00247A                     l2303:
  3283                           
  3284                           ;LCD.c: 27:     if(number & 0b0100){ LATEbits.LATE3 = 1;}else{LATEbits.LATE3 = 0;}
  3285   00247A  A405               	btfss	LCD_sendnibble@number^0,2,c
  3286   00247C  EF42  F012         	goto	u1591
  3287   002480  EF44  F012         	goto	u1590
  3288   002484                     u1591:
  3289   002484  EF47  F012         	goto	l293
  3290   002488                     u1590:
  3291   002488  867D               	bsf	125,3,c	;volatile
  3292   00248A  EF48  F012         	goto	l2307
  3293   00248E                     l293:
  3294   00248E  967D               	bcf	125,3,c	;volatile
  3295   002490                     l2307:
  3296                           
  3297                           ;LCD.c: 28:     if(number & 0b1000){ LATEbits.LATE1 = 1;}else{LATEbits.LATE1 = 0;}
  3298   002490  A605               	btfss	LCD_sendnibble@number^0,3,c
  3299   002492  EF4D  F012         	goto	u1601
  3300   002496  EF4F  F012         	goto	u1600
  3301   00249A                     u1601:
  3302   00249A  EF52  F012         	goto	l295
  3303   00249E                     u1600:
  3304   00249E  827D               	bsf	125,1,c	;volatile
  3305   0024A0  EF53  F012         	goto	l2311
  3306   0024A4                     l295:
  3307   0024A4  927D               	bcf	125,1,c	;volatile
  3308   0024A6                     l2311:
  3309                           
  3310                           ;LCD.c: 30:     LCD_E_TOG();
  3311   0024A6  ECBE  F013         	call	_LCD_E_TOG	;wreg free
  3312   0024AA                     
  3313                           ;LCD.c: 31:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  3314   0024AA  0E1A               	movlw	26
  3315   0024AC                     u3117:
  3316   0024AC  2EE8               	decfsz	wreg,f,c
  3317   0024AE  D7FE               	bra	u3117
  3318   0024B0  D000               	nop2	
  3319   0024B2  0012               	return		;funcret
  3320   0024B4                     __end_of_LCD_sendnibble:
  3321                           	callstack 0
  3322                           
  3323 ;; *************** function _LCD_E_TOG *****************
  3324 ;; Defined at:
  3325 ;;		line 8 in file "LCD.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;		None
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;		None
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  1    wreg      void 
  3332 ;; Registers used:
  3333 ;;		wreg
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3343 ;;Total ram usage:        0 bytes
  3344 ;; Hardware stack levels used: 1
  3345 ;; Hardware stack levels required when called: 2
  3346 ;; This function calls:
  3347 ;;		Nothing
  3348 ;; This function is called by:
  3349 ;;		_LCD_sendnibble
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           	psect	text19
  3354   00277C                     __ptext19:
  3355                           	callstack 0
  3356   00277C                     _LCD_E_TOG:
  3357                           	callstack 24
  3358   00277C                     
  3359                           ;LCD.c: 11:     LATCbits.LATC2 = 1;
  3360   00277C  847B               	bsf	123,2,c	;volatile
  3361   00277E                     
  3362                           ;LCD.c: 12:     _delay((unsigned long)((2)*(64000000/4000000.0)));
  3363   00277E  0E0A               	movlw	10
  3364   002780                     u3127:
  3365   002780  2EE8               	decfsz	wreg,f,c
  3366   002782  D7FE               	bra	u3127
  3367   002784  D000               	nop2	
  3368   002786                     
  3369                           ;LCD.c: 14:     LATCbits.LATC2 = 0;
  3370   002786  947B               	bcf	123,2,c	;volatile
  3371   002788  0012               	return		;funcret
  3372   00278A                     __end_of_LCD_E_TOG:
  3373                           	callstack 0
  3374                           
  3375 ;; *************** function _Interrupts_init *****************
  3376 ;; Defined at:
  3377 ;;		line 10 in file "interrupts.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;		None
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;		None
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  1    wreg      void 
  3384 ;; Registers used:
  3385 ;;		None
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3395 ;;Total ram usage:        0 bytes
  3396 ;; Hardware stack levels used: 1
  3397 ;; Hardware stack levels required when called: 2
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text20
  3406   002796                     __ptext20:
  3407                           	callstack 0
  3408   002796                     _Interrupts_init:
  3409                           	callstack 28
  3410   002796                     
  3411                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  3412   002796  8CF2               	bsf	242,6,c	;volatile
  3413                           
  3414                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  3415   002798  010E               	movlb	14	; () banked
  3416   00279A  8B29               	bsf	41,5,b	;volatile
  3417                           
  3418                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  3419   00279C  812B               	bsf	43,0,b	;volatile
  3420                           
  3421                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  3422   00279E  8EF2               	bsf	242,7,c	;volatile
  3423   0027A0                     
  3424                           ; BSR set to: 14
  3425   0027A0  0012               	return		;funcret
  3426   0027A2                     __end_of_Interrupts_init:
  3427                           	callstack 0
  3428                           
  3429 ;; *************** function _ADC_init *****************
  3430 ;; Defined at:
  3431 ;;		line 9 in file "ADC.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;		None
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;		None
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3449 ;;Total ram usage:        0 bytes
  3450 ;; Hardware stack levels used: 1
  3451 ;; Hardware stack levels required when called: 2
  3452 ;; This function calls:
  3453 ;;		Nothing
  3454 ;; This function is called by:
  3455 ;;		_main
  3456 ;; This function uses a non-reentrant model
  3457 ;;
  3458                           
  3459                           	psect	text21
  3460   002762                     __ptext21:
  3461                           	callstack 0
  3462   002762                     _ADC_init:
  3463                           	callstack 28
  3464   002762                     
  3465                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  3466   002762  8681               	bsf	129,3,c	;volatile
  3467                           
  3468                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  3469   002764  010E               	movlb	14	; () banked
  3470   002766  8792               	bsf	146,3,b	;volatile
  3471                           
  3472                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  3473   002768  010F               	movlb	15	; () banked
  3474   00276A  9958               	bcf	88,4,b	;volatile
  3475   00276C                     
  3476                           ; BSR set to: 15
  3477                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  3478   00276C  0EFC               	movlw	-4
  3479   00276E  1758               	andwf	88,f,b	;volatile
  3480                           
  3481                           ;ADC.c: 17:     ADPCH=0b11;
  3482   002770  0E03               	movlw	3
  3483   002772  6F5F               	movwf	95,b	;volatile
  3484   002774                     
  3485                           ; BSR set to: 15
  3486                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  3487   002774  9460               	bcf	96,2,c	;volatile
  3488   002776                     
  3489                           ; BSR set to: 15
  3490                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  3491   002776  8860               	bsf	96,4,c	;volatile
  3492   002778                     
  3493                           ; BSR set to: 15
  3494                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  3495   002778  8E60               	bsf	96,7,c	;volatile
  3496   00277A                     
  3497                           ; BSR set to: 15
  3498   00277A  0012               	return		;funcret
  3499   00277C                     __end_of_ADC_init:
  3500                           	callstack 0
  3501                           
  3502 ;; *************** function _ADC_getval *****************
  3503 ;; Defined at:
  3504 ;;		line 23 in file "ADC.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;		None
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  tmpval          2    6[COMRAM] unsigned int 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  2    4[COMRAM] unsigned int 
  3511 ;; Registers used:
  3512 ;;		wreg, status,2, status,0
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3518 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3519 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3521 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3522 ;;Total ram usage:        4 bytes
  3523 ;; Hardware stack levels used: 1
  3524 ;; Hardware stack levels required when called: 2
  3525 ;; This function calls:
  3526 ;;		Nothing
  3527 ;; This function is called by:
  3528 ;;		_main
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text22
  3533   0026A2                     __ptext22:
  3534                           	callstack 0
  3535   0026A2                     _ADC_getval:
  3536                           	callstack 28
  3537   0026A2                     
  3538                           ;ADC.c: 25:     unsigned int tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  3539   0026A2  8060               	bsf	96,0,c	;volatile
  3540   0026A4                     l264:
  3541   0026A4  B060               	btfsc	96,0,c	;volatile
  3542   0026A6  EF57  F013         	goto	u1871
  3543   0026AA  EF59  F013         	goto	u1870
  3544   0026AE                     u1871:
  3545   0026AE  EF52  F013         	goto	l264
  3546   0026B2                     u1870:
  3547   0026B2                     
  3548                           ;ADC.c: 31:     tmpval = ADRESH;
  3549   0026B2  CF64 F007          	movff	3940,ADC_getval@tmpval	;volatile
  3550   0026B6  6A08               	clrf	(ADC_getval@tmpval+1)^0,c
  3551   0026B8                     
  3552                           ;ADC.c: 35:     tmpval = 255 - tmpval;
  3553   0026B8  5007               	movf	ADC_getval@tmpval^0,w,c
  3554   0026BA  08FF               	sublw	255
  3555   0026BC  6E07               	movwf	ADC_getval@tmpval^0,c
  3556   0026BE  5008               	movf	(ADC_getval@tmpval+1)^0,w,c
  3557   0026C0  A0D8               	btfss	status,0,c
  3558   0026C2  2AE8               	incf	wreg,f,c
  3559   0026C4  0800               	sublw	0
  3560   0026C6  6E08               	movwf	(ADC_getval@tmpval+1)^0,c
  3561   0026C8                     
  3562                           ;ADC.c: 37:     return tmpval;
  3563   0026C8  C007  F005         	movff	ADC_getval@tmpval,?_ADC_getval
  3564   0026CC  C008  F006         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  3565   0026D0  0012               	return		;funcret
  3566   0026D2                     __end_of_ADC_getval:
  3567                           	callstack 0
  3568                           
  3569 ;; *************** function _ADC2String *****************
  3570 ;; Defined at:
  3571 ;;		line 194 in file "LCD.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  buf             2   27[BANK0 ] PTR unsigned char 
  3574 ;;		 -> main@ADC(3), main@Yea(4), main@Mon(2), main@Day(2), 
  3575 ;;		 -> main@Hou(2), main@Min(2), main@Sec(2), 
  3576 ;;  x               2   29[BANK0 ] unsigned int 
  3577 ;;  leading_zero    2   31[BANK0 ] unsigned int 
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;		None
  3580 ;; Return value:  Size  Location     Type
  3581 ;;                  1    wreg      void 
  3582 ;; Registers used:
  3583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3584 ;; Tracked objects:
  3585 ;;		On entry : 0/0
  3586 ;;		On exit  : 0/0
  3587 ;;		Unchanged: 0/0
  3588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3589 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3592 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3593 ;;Total ram usage:        6 bytes
  3594 ;; Hardware stack levels used: 1
  3595 ;; Hardware stack levels required when called: 10
  3596 ;; This function calls:
  3597 ;;		_sprintf
  3598 ;; This function is called by:
  3599 ;;		_main
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           	psect	text23
  3604   0021BA                     __ptext23:
  3605                           	callstack 0
  3606   0021BA                     _ADC2String:
  3607                           	callstack 20
  3608   0021BA                     
  3609                           ;LCD.c: 196:     if(leading_zeros == 0){
  3610   0021BA  0100               	movlb	0	; () banked
  3611   0021BC  517F               	movf	ADC2String@leading_zeros& (0+255),w,b
  3612   0021BE  1180               	iorwf	(ADC2String@leading_zeros+1)& (0+255),w,b
  3613   0021C0  A4D8               	btfss	status,2,c
  3614   0021C2  EFE5  F010         	goto	u2751
  3615   0021C6  EFE7  F010         	goto	u2750
  3616   0021CA                     u2751:
  3617   0021CA  EFF7  F010         	goto	l3207
  3618   0021CE                     u2750:
  3619   0021CE                     
  3620                           ; BSR set to: 0
  3621                           ;LCD.c: 197:     sprintf(buf, "%u",x);
  3622   0021CE  C07B  F068         	movff	ADC2String@buf,sprintf@s
  3623   0021D2  C07C  F069         	movff	ADC2String@buf+1,sprintf@s+1
  3624   0021D6  0E2C               	movlw	low STR_8
  3625   0021D8  6F6A               	movwf	sprintf@fmt& (0+255),b
  3626   0021DA  0E0E               	movlw	high STR_8
  3627   0021DC  6F6B               	movwf	(sprintf@fmt+1)& (0+255),b
  3628   0021DE  C07D  F06C         	movff	ADC2String@x,?_sprintf+4
  3629   0021E2  C07E  F06D         	movff	ADC2String@x+1,?_sprintf+5
  3630   0021E6  EC84  F012         	call	_sprintf	;wreg free
  3631                           
  3632                           ;LCD.c: 198:     }else if(leading_zeros == 1){
  3633   0021EA  EF38  F011         	goto	l351
  3634   0021EE                     l3207:
  3635                           
  3636                           ; BSR set to: 0
  3637   0021EE  057F               	decf	ADC2String@leading_zeros& (0+255),w,b
  3638   0021F0  1180               	iorwf	(ADC2String@leading_zeros+1)& (0+255),w,b
  3639   0021F2  A4D8               	btfss	status,2,c
  3640   0021F4  EFFE  F010         	goto	u2761
  3641   0021F8  EF00  F011         	goto	u2760
  3642   0021FC                     u2761:
  3643   0021FC  EF10  F011         	goto	l3211
  3644   002200                     u2760:
  3645   002200                     
  3646                           ; BSR set to: 0
  3647                           ;LCD.c: 199:     sprintf(buf, "%01u",x);
  3648   002200  C07B  F068         	movff	ADC2String@buf,sprintf@s
  3649   002204  C07C  F069         	movff	ADC2String@buf+1,sprintf@s+1
  3650   002208  0E01               	movlw	low STR_9
  3651   00220A  6F6A               	movwf	sprintf@fmt& (0+255),b
  3652   00220C  0E0E               	movlw	high STR_9
  3653   00220E  6F6B               	movwf	(sprintf@fmt+1)& (0+255),b
  3654   002210  C07D  F06C         	movff	ADC2String@x,?_sprintf+4
  3655   002214  C07E  F06D         	movff	ADC2String@x+1,?_sprintf+5
  3656   002218  EC84  F012         	call	_sprintf	;wreg free
  3657                           
  3658                           ;LCD.c: 200:     }else if(leading_zeros == 2){
  3659   00221C  EF38  F011         	goto	l351
  3660   002220                     l3211:
  3661                           
  3662                           ; BSR set to: 0
  3663   002220  0E02               	movlw	2
  3664   002222  197F               	xorwf	ADC2String@leading_zeros& (0+255),w,b
  3665   002224  1180               	iorwf	(ADC2String@leading_zeros+1)& (0+255),w,b
  3666   002226  A4D8               	btfss	status,2,c
  3667   002228  EF18  F011         	goto	u2771
  3668   00222C  EF1A  F011         	goto	u2770
  3669   002230                     u2771:
  3670   002230  EF2A  F011         	goto	l3215
  3671   002234                     u2770:
  3672   002234                     
  3673                           ; BSR set to: 0
  3674                           ;LCD.c: 201:     sprintf(buf, "%02u",x);
  3675   002234  C07B  F068         	movff	ADC2String@buf,sprintf@s
  3676   002238  C07C  F069         	movff	ADC2String@buf+1,sprintf@s+1
  3677   00223C  0E06               	movlw	low STR_10
  3678   00223E  6F6A               	movwf	sprintf@fmt& (0+255),b
  3679   002240  0E0E               	movlw	high STR_10
  3680   002242  6F6B               	movwf	(sprintf@fmt+1)& (0+255),b
  3681   002244  C07D  F06C         	movff	ADC2String@x,?_sprintf+4
  3682   002248  C07E  F06D         	movff	ADC2String@x+1,?_sprintf+5
  3683   00224C  EC84  F012         	call	_sprintf	;wreg free
  3684                           
  3685                           ;LCD.c: 202:     }else{sprintf(buf, "%03u",x);
  3686   002250  EF38  F011         	goto	l351
  3687   002254                     l3215:
  3688                           
  3689                           ; BSR set to: 0
  3690   002254  C07B  F068         	movff	ADC2String@buf,sprintf@s
  3691   002258  C07C  F069         	movff	ADC2String@buf+1,sprintf@s+1
  3692   00225C  0E0B               	movlw	low STR_11
  3693   00225E  6F6A               	movwf	sprintf@fmt& (0+255),b
  3694   002260  0E0E               	movlw	high STR_11
  3695   002262  6F6B               	movwf	(sprintf@fmt+1)& (0+255),b
  3696   002264  C07D  F06C         	movff	ADC2String@x,?_sprintf+4
  3697   002268  C07E  F06D         	movff	ADC2String@x+1,?_sprintf+5
  3698   00226C  EC84  F012         	call	_sprintf	;wreg free
  3699   002270                     l351:
  3700   002270  0012               	return		;funcret
  3701   002272                     __end_of_ADC2String:
  3702                           	callstack 0
  3703                           
  3704 ;; *************** function _sprintf *****************
  3705 ;; Defined at:
  3706 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  s               2    8[BANK0 ] PTR unsigned char 
  3709 ;;		 -> main@ADC(3), main@Yea(4), main@Mon(2), main@Day(2), 
  3710 ;;		 -> main@Hou(2), main@Min(2), main@Sec(2), 
  3711 ;;  fmt             2   10[BANK0 ] PTR const unsigned char 
  3712 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;  f              11   16[BANK0 ] struct _IO_FILE
  3715 ;;  ap              2   14[BANK0 ] PTR void [1]
  3716 ;;		 -> ?_sprintf(2), 
  3717 ;;  ret             2    0        int 
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  2    8[BANK0 ] int 
  3720 ;; Registers used:
  3721 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3727 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3728 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3730 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3731 ;;Total ram usage:       19 bytes
  3732 ;; Hardware stack levels used: 1
  3733 ;; Hardware stack levels required when called: 9
  3734 ;; This function calls:
  3735 ;;		_vfprintf
  3736 ;; This function is called by:
  3737 ;;		_ADC2String
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text24
  3742   002508                     __ptext24:
  3743                           	callstack 0
  3744   002508                     _sprintf:
  3745                           	callstack 20
  3746   002508  0E6C               	movlw	low (?_sprintf+4)
  3747   00250A  0100               	movlb	0	; () banked
  3748   00250C  6F6E               	movwf	sprintf@ap& (0+255),b
  3749   00250E  0E00               	movlw	high (?_sprintf+4)
  3750   002510  6F6F               	movwf	(sprintf@ap+1)& (0+255),b
  3751   002512  C068  F070         	movff	sprintf@s,sprintf@f
  3752   002516  C069  F071         	movff	sprintf@s+1,sprintf@f+1
  3753   00251A                     
  3754                           ; BSR set to: 0
  3755   00251A  0E00               	movlw	0
  3756   00251C  6F74               	movwf	(sprintf@f+4)& (0+255),b
  3757   00251E  0E00               	movlw	0
  3758   002520  6F73               	movwf	(sprintf@f+3)& (0+255),b
  3759   002522                     
  3760                           ; BSR set to: 0
  3761   002522  0E00               	movlw	0
  3762   002524  6F7A               	movwf	(sprintf@f+10)& (0+255),b
  3763   002526  0E00               	movlw	0
  3764   002528  6F79               	movwf	(sprintf@f+9)& (0+255),b
  3765   00252A                     
  3766                           ; BSR set to: 0
  3767   00252A  0E70               	movlw	low sprintf@f
  3768   00252C  6F60               	movwf	vfprintf@fp& (0+255),b
  3769   00252E  0E00               	movlw	high sprintf@f
  3770   002530  6F61               	movwf	(vfprintf@fp+1)& (0+255),b
  3771   002532  C06A  F062         	movff	sprintf@fmt,vfprintf@fmt
  3772   002536  C06B  F063         	movff	sprintf@fmt+1,vfprintf@fmt+1
  3773   00253A  0E6E               	movlw	low sprintf@ap
  3774   00253C  6F64               	movwf	vfprintf@ap& (0+255),b
  3775   00253E  0E00               	movlw	high sprintf@ap
  3776   002540  6F65               	movwf	(vfprintf@ap+1)& (0+255),b
  3777   002542  EC5A  F012         	call	_vfprintf	;wreg free
  3778   002546  0100               	movlb	0	; () banked
  3779   002548  5173               	movf	(sprintf@f+3)& (0+255),w,b
  3780   00254A  2568               	addwf	sprintf@s& (0+255),w,b
  3781   00254C  6ED9               	movwf	fsr2l,c
  3782   00254E  5174               	movf	(sprintf@f+4)& (0+255),w,b
  3783   002550  2169               	addwfc	(sprintf@s+1)& (0+255),w,b
  3784   002552  6EDA               	movwf	fsr2h,c
  3785   002554  0E00               	movlw	0
  3786   002556  6EDF               	movwf	indf2,c
  3787   002558                     
  3788                           ; BSR set to: 0
  3789   002558  0012               	return		;funcret
  3790   00255A                     __end_of_sprintf:
  3791                           	callstack 0
  3792                           
  3793 ;; *************** function _vfprintf *****************
  3794 ;; Defined at:
  3795 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  3798 ;;		 -> sprintf@f(11), 
  3799 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  3800 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  3801 ;;  ap              2    4[BANK0 ] PTR PTR void 
  3802 ;;		 -> sprintf@ap(2), 
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;  cfmt            2    6[BANK0 ] PTR unsigned char 
  3805 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  2    0[BANK0 ] int 
  3808 ;; Registers used:
  3809 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3815 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3816 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3818 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3819 ;;Total ram usage:        8 bytes
  3820 ;; Hardware stack levels used: 1
  3821 ;; Hardware stack levels required when called: 8
  3822 ;; This function calls:
  3823 ;;		_vfpfcnvrt
  3824 ;; This function is called by:
  3825 ;;		_sprintf
  3826 ;; This function uses a non-reentrant model
  3827 ;;
  3828                           
  3829                           	psect	text25
  3830   0024B4                     __ptext25:
  3831                           	callstack 0
  3832   0024B4                     _vfprintf:
  3833                           	callstack 20
  3834   0024B4                     
  3835                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  3836   0024B4  C062  F066         	movff	vfprintf@fmt,vfprintf@cfmt
  3837   0024B8  C063  F067         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  3838                           
  3839                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  3840   0024BC  EF6E  F012         	goto	l3185
  3841   0024C0                     l3183:
  3842                           
  3843                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  3844   0024C0  C060  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  3845   0024C4  C061  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  3846   0024C8  0E66               	movlw	low vfprintf@cfmt
  3847   0024CA  6E42               	movwf	vfpfcnvrt@fmt^0,c
  3848   0024CC  0E00               	movlw	high vfprintf@cfmt
  3849   0024CE  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
  3850   0024D0  C064  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  3851   0024D4  C065  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  3852   0024D8  ECCB  F008         	call	_vfpfcnvrt	;wreg free
  3853   0024DC                     l3185:
  3854                           
  3855                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  3856   0024DC  C066  FFF6         	movff	vfprintf@cfmt,tblptrl
  3857   0024E0  C067  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  3858   0024E4                     	if	0	;tblptru may be non-zero
  3859   0024E4                     	endif
  3860   0024E4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3861   0024E4  0E00               	movlw	low (__mediumconst shr (0+16))
  3862   0024E6  6EF8               	movwf	tblptru,c
  3863   0024E8                     	endif
  3864   0024E8  0008               	tblrd		*
  3865   0024EA  50F5               	movf	tablat,w,c
  3866   0024EC  0900               	iorlw	0
  3867   0024EE  A4D8               	btfss	status,2,c
  3868   0024F0  EF7C  F012         	goto	u2741
  3869   0024F4  EF7E  F012         	goto	u2740
  3870   0024F8                     u2741:
  3871   0024F8  EF60  F012         	goto	l3183
  3872   0024FC                     u2740:
  3873   0024FC                     
  3874                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  3875   0024FC  0E00               	movlw	0
  3876   0024FE  0100               	movlb	0	; () banked
  3877   002500  6F61               	movwf	(?_vfprintf+1)& (0+255),b
  3878   002502  0E00               	movlw	0
  3879   002504  6F60               	movwf	?_vfprintf& (0+255),b
  3880   002506                     
  3881                           ; BSR set to: 0
  3882   002506  0012               	return		;funcret
  3883   002508                     __end_of_vfprintf:
  3884                           	callstack 0
  3885                           
  3886 ;; *************** function _vfpfcnvrt *****************
  3887 ;; Defined at:
  3888 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  3891 ;;		 -> sprintf@f(11), 
  3892 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  3893 ;;		 -> vfprintf@cfmt(2), 
  3894 ;;  ap              2   67[COMRAM] PTR PTR void 
  3895 ;;		 -> sprintf@ap(2), 
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;  convarg         8   73[COMRAM] struct .
  3898 ;;  cp              2   83[COMRAM] PTR unsigned char 
  3899 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  3900 ;;  done            2   81[COMRAM] int 
  3901 ;;  i               2    0        int 
  3902 ;;  c               1    0        unsigned char 
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      void 
  3905 ;; Registers used:
  3906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3912 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3913 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3914 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3915 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3916 ;;Total ram usage:       22 bytes
  3917 ;; Hardware stack levels used: 1
  3918 ;; Hardware stack levels required when called: 7
  3919 ;; This function calls:
  3920 ;;		_atoi
  3921 ;;		_fputc
  3922 ;;		_isdigit
  3923 ;;		_utoa
  3924 ;; This function is called by:
  3925 ;;		_vfprintf
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text26
  3930   001196                     __ptext26:
  3931                           	callstack 0
  3932   001196                     _vfpfcnvrt:
  3933                           	callstack 20
  3934   001196                     
  3935                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  3936   001196  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3937   00119A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3938   00119E  CFDE FFF6          	movff	postinc2,tblptrl
  3939   0011A2  CFDD FFF7          	movff	postdec2,tblptrh
  3940   0011A6                     	if	0	;tblptru may be non-zero
  3941   0011A6                     	endif
  3942   0011A6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3943   0011A6  0E00               	movlw	low (__mediumconst shr (0+16))
  3944   0011A8  6EF8               	movwf	tblptru,c
  3945   0011AA                     	endif
  3946   0011AA  0008               	tblrd		*
  3947   0011AC  50F5               	movf	tablat,w,c
  3948   0011AE  0A25               	xorlw	37
  3949   0011B0  A4D8               	btfss	status,2,c
  3950   0011B2  EFDD  F008         	goto	u2681
  3951   0011B6  EFDF  F008         	goto	u2680
  3952   0011BA                     u2681:
  3953   0011BA  EF1C  F00A         	goto	l3167
  3954   0011BE                     u2680:
  3955   0011BE                     
  3956                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  3957   0011BE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3958   0011C2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3959   0011C6  2ADE               	incf	postinc2,f,c
  3960   0011C8  0E00               	movlw	0
  3961   0011CA  22DD               	addwfc	postdec2,f,c
  3962   0011CC                     
  3963                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  3964   0011CC  0E00               	movlw	0
  3965   0011CE  0100               	movlb	0	; () banked
  3966   0011D0  6FF3               	movwf	(_width+1)& (0+255),b
  3967   0011D2  0E00               	movlw	0
  3968   0011D4  6FF2               	movwf	_width& (0+255),b
  3969   0011D6  C0F2  F056         	movff	_width,_flags
  3970   0011DA                     
  3971                           ; BSR set to: 0
  3972                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  3973   0011DA  69F4               	setf	_prec& (0+255),b
  3974   0011DC  69F5               	setf	(_prec+1)& (0+255),b
  3975   0011DE                     
  3976                           ; BSR set to: 0
  3977                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
  3978   0011DE  0E00               	movlw	0
  3979   0011E0  6E53               	movwf	(vfpfcnvrt@done+1)^0,c
  3980   0011E2  0E00               	movlw	0
  3981   0011E4  6E52               	movwf	vfpfcnvrt@done^0,c
  3982                           
  3983                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
  3984   0011E6  EF21  F009         	goto	l3131
  3985   0011EA                     l3121:
  3986                           
  3987                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
  3988   0011EA  8256               	bsf	_flags^0,1,c
  3989   0011EC                     
  3990                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
  3991   0011EC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3992   0011F0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3993   0011F4  2ADE               	incf	postinc2,f,c
  3994   0011F6  0E00               	movlw	0
  3995   0011F8  22DD               	addwfc	postdec2,f,c
  3996                           
  3997                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
  3998   0011FA  EF21  F009         	goto	l3131
  3999   0011FE                     l3125:
  4000                           
  4001                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
  4002   0011FE  0E00               	movlw	0
  4003   001200  6E53               	movwf	(vfpfcnvrt@done+1)^0,c
  4004   001202  0E01               	movlw	1
  4005   001204  6E52               	movwf	vfpfcnvrt@done^0,c
  4006                           
  4007                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
  4008   001206  EF21  F009         	goto	l3131
  4009   00120A                     l3129:
  4010   00120A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4011   00120E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4012   001212  CFDE FFF6          	movff	postinc2,tblptrl
  4013   001216  CFDD FFF7          	movff	postdec2,tblptrh
  4014   00121A                     	if	0	;tblptru may be non-zero
  4015   00121A                     	endif
  4016   00121A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4017   00121A  0E00               	movlw	low (__mediumconst shr (0+16))
  4018   00121C  6EF8               	movwf	tblptru,c
  4019   00121E                     	endif
  4020   00121E  0008               	tblrd		*
  4021   001220  50F5               	movf	tablat,w,c
  4022   001222  6E46               	movwf	??_vfpfcnvrt^0,c
  4023   001224  6A47               	clrf	(??_vfpfcnvrt+1)^0,c
  4024                           
  4025                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4026                           ; Switch size 1, requested type "simple"
  4027                           ; Number of cases is 1, Range of values is 0 to 0
  4028                           ; switch strategies available:
  4029                           ; Name         Instructions Cycles
  4030                           ; simple_byte            4     3 (average)
  4031                           ;	Chosen strategy is simple_byte
  4032   001226  5047               	movf	(??_vfpfcnvrt+1)^0,w,c
  4033   001228  0A00               	xorlw	0	; case 0
  4034   00122A  B4D8               	btfsc	status,2,c
  4035   00122C  EF1A  F009         	goto	l3415
  4036   001230  EFFF  F008         	goto	l3125
  4037   001234                     l3415:
  4038                           
  4039                           ; Switch size 1, requested type "simple"
  4040                           ; Number of cases is 1, Range of values is 48 to 48
  4041                           ; switch strategies available:
  4042                           ; Name         Instructions Cycles
  4043                           ; simple_byte            4     3 (average)
  4044                           ;	Chosen strategy is simple_byte
  4045   001234  5046               	movf	??_vfpfcnvrt^0,w,c
  4046   001236  0A30               	xorlw	48	; case 48
  4047   001238  B4D8               	btfsc	status,2,c
  4048   00123A  EFF5  F008         	goto	l3121
  4049   00123E  EFFF  F008         	goto	l3125
  4050   001242                     l3131:
  4051                           
  4052                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
  4053   001242  5052               	movf	vfpfcnvrt@done^0,w,c
  4054   001244  1053               	iorwf	(vfpfcnvrt@done+1)^0,w,c
  4055   001246  B4D8               	btfsc	status,2,c
  4056   001248  EF28  F009         	goto	u2691
  4057   00124C  EF2A  F009         	goto	u2690
  4058   001250                     u2691:
  4059   001250  EF05  F009         	goto	l3129
  4060   001254                     u2690:
  4061   001254                     
  4062                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
  4063   001254  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4064   001258  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4065   00125C  CFDE FFF6          	movff	postinc2,tblptrl
  4066   001260  CFDD FFF7          	movff	postdec2,tblptrh
  4067   001264                     	if	0	;tblptru may be non-zero
  4068   001264                     	endif
  4069   001264                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4070   001264  0E00               	movlw	low (__mediumconst shr (0+16))
  4071   001266  6EF8               	movwf	tblptru,c
  4072   001268                     	endif
  4073   001268  0008               	tblrd		*
  4074   00126A  50F5               	movf	tablat,w,c
  4075   00126C  0A2A               	xorlw	42
  4076   00126E  A4D8               	btfss	status,2,c
  4077   001270  EF3C  F009         	goto	u2701
  4078   001274  EF3E  F009         	goto	u2700
  4079   001278                     u2701:
  4080   001278  EF68  F009         	goto	l3141
  4081   00127C                     u2700:
  4082   00127C                     
  4083                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
  4084   00127C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4085   001280  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4086   001284  2ADE               	incf	postinc2,f,c
  4087   001286  0E00               	movlw	0
  4088   001288  22DD               	addwfc	postdec2,f,c
  4089                           
  4090                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
  4091   00128A  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4092   00128E  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4093   001292  CFDF F046          	movff	indf2,??_vfpfcnvrt
  4094   001296  0E02               	movlw	2
  4095   001298  26DE               	addwf	postinc2,f,c
  4096   00129A  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  4097   00129E  0E00               	movlw	0
  4098   0012A0  22DD               	addwfc	postdec2,f,c
  4099   0012A2  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4100   0012A6  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4101   0012AA  CFDE F0F2          	movff	postinc2,_width
  4102   0012AE  CFDD F0F3          	movff	postdec2,_width+1
  4103   0012B2                     
  4104                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
  4105   0012B2  0100               	movlb	0	; () banked
  4106   0012B4  BFF3               	btfsc	(_width+1)& (0+255),7,b
  4107   0012B6  EF61  F009         	goto	u2710
  4108   0012BA  EF5F  F009         	goto	u2711
  4109   0012BE                     u2711:
  4110   0012BE  EF9D  F009         	goto	l3149
  4111   0012C2                     u2710:
  4112   0012C2                     
  4113                           ; BSR set to: 0
  4114                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
  4115   0012C2  8056               	bsf	_flags^0,0,c
  4116                           
  4117                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
  4118   0012C4  6DF2               	negf	_width& (0+255),b
  4119   0012C6  1FF3               	comf	(_width+1)& (0+255),f,b
  4120   0012C8  B0D8               	btfsc	status,0,c
  4121   0012CA  2BF3               	incf	(_width+1)& (0+255),f,b
  4122   0012CC  EF9D  F009         	goto	l3149
  4123   0012D0                     l3141:
  4124                           
  4125                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  4126   0012D0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4127   0012D4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4128   0012D8  CFDE F00B          	movff	postinc2,atoi@s
  4129   0012DC  CFDD F00C          	movff	postdec2,atoi@s+1
  4130   0012E0  ECE5  F00C         	call	_atoi	;wreg free
  4131   0012E4  C00B  F0F2         	movff	?_atoi,_width
  4132   0012E8  C00C  F0F3         	movff	?_atoi+1,_width+1
  4133                           
  4134                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  4135   0012EC  EF7F  F009         	goto	l3147
  4136   0012F0                     l3143:
  4137                           
  4138                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  4139   0012F0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4140   0012F4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4141   0012F8  2ADE               	incf	postinc2,f,c
  4142   0012FA  0E00               	movlw	0
  4143   0012FC  22DD               	addwfc	postdec2,f,c
  4144   0012FE                     l3147:
  4145   0012FE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4146   001302  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4147   001306  CFDE FFF6          	movff	postinc2,tblptrl
  4148   00130A  CFDD FFF7          	movff	postdec2,tblptrh
  4149   00130E                     	if	0	;tblptru may be non-zero
  4150   00130E                     	endif
  4151   00130E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4152   00130E  0E00               	movlw	low (__mediumconst shr (0+16))
  4153   001310  6EF8               	movwf	tblptru,c
  4154   001312                     	endif
  4155   001312  0008               	tblrd		*
  4156   001314  CFF5 F046          	movff	tablat,??_vfpfcnvrt
  4157   001318  0ED0               	movlw	208
  4158   00131A  2446               	addwf	??_vfpfcnvrt^0,w,c
  4159   00131C  6E47               	movwf	(??_vfpfcnvrt+1)^0,c
  4160   00131E  6A48               	clrf	(??_vfpfcnvrt+2)^0,c
  4161   001320  0EFF               	movlw	255
  4162   001322  2248               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  4163   001324  5048               	movf	(??_vfpfcnvrt+2)^0,w,c
  4164   001326  E109               	bnz	u2720
  4165   001328  0E0A               	movlw	10
  4166   00132A  5C47               	subwf	(??_vfpfcnvrt+1)^0,w,c
  4167   00132C  A0D8               	btfss	status,0,c
  4168   00132E  EF9B  F009         	goto	u2721
  4169   001332  EF9D  F009         	goto	u2720
  4170   001336                     u2721:
  4171   001336  EF78  F009         	goto	l3143
  4172   00133A                     u2720:
  4173   00133A                     l3149:
  4174                           
  4175                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1239:   if (0
  4176   00133A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4177   00133E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4178   001342  CFDE F054          	movff	postinc2,vfpfcnvrt@cp
  4179   001346  CFDD F055          	movff	postdec2,vfpfcnvrt@cp+1
  4180   00134A  C054  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4181   00134E  C055  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4182   001352                     	if	0	;tblptru may be non-zero
  4183   001352                     	endif
  4184   001352                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4185   001352  0E00               	movlw	low (__mediumconst shr (0+16))
  4186   001354  6EF8               	movwf	tblptru,c
  4187   001356                     	endif
  4188   001356  0008               	tblrd		*
  4189   001358  50F5               	movf	tablat,w,c
  4190   00135A  0A75               	xorlw	117
  4191   00135C  A4D8               	btfss	status,2,c
  4192   00135E  EFB3  F009         	goto	u2731
  4193   001362  EFB5  F009         	goto	u2730
  4194   001366                     u2731:
  4195   001366  EF13  F00A         	goto	l3163
  4196   00136A                     u2730:
  4197   00136A                     
  4198                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1252:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1295:    convarg.llu 
      +                          = (unsigned long long)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (un
      +                          signed int)0));
  4199   00136A  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4200   00136E  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4201   001372  CFDF F046          	movff	indf2,??_vfpfcnvrt
  4202   001376  0E02               	movlw	2
  4203   001378  26DE               	addwf	postinc2,f,c
  4204   00137A  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  4205   00137E  0E00               	movlw	0
  4206   001380  22DD               	addwfc	postdec2,f,c
  4207   001382  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4208   001386  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4209   00138A  CFDE F048          	movff	postinc2,??_vfpfcnvrt+2
  4210   00138E  CFDD F049          	movff	postdec2,??_vfpfcnvrt+3
  4211   001392  C048  F04A         	movff	??_vfpfcnvrt+2,vfpfcnvrt@convarg
  4212   001396  C049  F04B         	movff	??_vfpfcnvrt+3,vfpfcnvrt@convarg+1
  4213   00139A  6A4C               	clrf	(vfpfcnvrt@convarg+2)^0,c
  4214   00139C  6A4D               	clrf	(vfpfcnvrt@convarg+3)^0,c
  4215   00139E  6A4E               	clrf	(vfpfcnvrt@convarg+4)^0,c
  4216   0013A0  6A4F               	clrf	(vfpfcnvrt@convarg+5)^0,c
  4217   0013A2  6A50               	clrf	(vfpfcnvrt@convarg+6)^0,c
  4218   0013A4  6A51               	clrf	(vfpfcnvrt@convarg+7)^0,c
  4219                           
  4220                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1297:    *fmt = c
      +                          p+1;
  4221   0013A6  0E01               	movlw	1
  4222   0013A8  2454               	addwf	vfpfcnvrt@cp^0,w,c
  4223   0013AA  6E46               	movwf	??_vfpfcnvrt^0,c
  4224   0013AC  0E00               	movlw	0
  4225   0013AE  2055               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  4226   0013B0  6E47               	movwf	(??_vfpfcnvrt+1)^0,c
  4227   0013B2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4228   0013B6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4229   0013BA  C046  FFDE         	movff	??_vfpfcnvrt,postinc2
  4230   0013BE  C047  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  4231                           
  4232                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1298:    switch (
      +                          *cp) {
  4233   0013C2  EFFB  F009         	goto	l3161
  4234   0013C6                     l3155:
  4235                           
  4236                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1305:      return
      +                           (void) utoa(fp, convarg.llu);;	Return value of _vfpfcnvrt is never used
  4237   0013C6  C040  F020         	movff	vfpfcnvrt@fp,utoa@fp
  4238   0013CA  C041  F021         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  4239   0013CE  C04A  F022         	movff	vfpfcnvrt@convarg,utoa@d
  4240   0013D2  C04B  F023         	movff	vfpfcnvrt@convarg+1,utoa@d+1
  4241   0013D6  C04C  F024         	movff	vfpfcnvrt@convarg+2,utoa@d+2
  4242   0013DA  C04D  F025         	movff	vfpfcnvrt@convarg+3,utoa@d+3
  4243   0013DE  C04E  F026         	movff	vfpfcnvrt@convarg+4,utoa@d+4
  4244   0013E2  C04F  F027         	movff	vfpfcnvrt@convarg+5,utoa@d+5
  4245   0013E6  C050  F028         	movff	vfpfcnvrt@convarg+6,utoa@d+6
  4246   0013EA  C051  F029         	movff	vfpfcnvrt@convarg+7,utoa@d+7
  4247   0013EE  EC33  F00A         	call	_utoa	;wreg free
  4248   0013F2  EF32  F00A         	goto	l1150
  4249   0013F6                     l3161:
  4250   0013F6  C054  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4251   0013FA  C055  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  4252   0013FE                     	if	0	;tblptru may be non-zero
  4253   0013FE                     	endif
  4254   0013FE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4255   0013FE  0E00               	movlw	low (__mediumconst shr (0+16))
  4256   001400  6EF8               	movwf	tblptru,c
  4257   001402                     	endif
  4258   001402  0008               	tblrd		*
  4259   001404  50F5               	movf	tablat,w,c
  4260   001406  6E46               	movwf	??_vfpfcnvrt^0,c
  4261   001408  6A47               	clrf	(??_vfpfcnvrt+1)^0,c
  4262                           
  4263                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4264                           ; Switch size 1, requested type "simple"
  4265                           ; Number of cases is 1, Range of values is 0 to 0
  4266                           ; switch strategies available:
  4267                           ; Name         Instructions Cycles
  4268                           ; simple_byte            4     3 (average)
  4269                           ;	Chosen strategy is simple_byte
  4270   00140A  5047               	movf	(??_vfpfcnvrt+1)^0,w,c
  4271   00140C  0A00               	xorlw	0	; case 0
  4272   00140E  B4D8               	btfsc	status,2,c
  4273   001410  EF0C  F00A         	goto	l3417
  4274   001414  EF13  F00A         	goto	l3163
  4275   001418                     l3417:
  4276                           
  4277                           ; Switch size 1, requested type "simple"
  4278                           ; Number of cases is 1, Range of values is 117 to 117
  4279                           ; switch strategies available:
  4280                           ; Name         Instructions Cycles
  4281                           ; simple_byte            4     3 (average)
  4282                           ;	Chosen strategy is simple_byte
  4283   001418  5046               	movf	??_vfpfcnvrt^0,w,c
  4284   00141A  0A75               	xorlw	117	; case 117
  4285   00141C  B4D8               	btfsc	status,2,c
  4286   00141E  EFE3  F009         	goto	l3155
  4287   001422  EF13  F00A         	goto	l3163
  4288   001426                     l3163:
  4289                           
  4290                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  4291   001426  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4292   00142A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4293   00142E  2ADE               	incf	postinc2,f,c
  4294   001430  0E00               	movlw	0
  4295   001432  22DD               	addwfc	postdec2,f,c
  4296   001434  EF32  F00A         	goto	l1150
  4297   001438                     l3167:
  4298                           
  4299                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  4300   001438  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4301   00143C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4302   001440  CFDE FFF6          	movff	postinc2,tblptrl
  4303   001444  CFDD FFF7          	movff	postdec2,tblptrh
  4304   001448                     	if	0	;tblptru may be non-zero
  4305   001448                     	endif
  4306   001448                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4307   001448  0E00               	movlw	low (__mediumconst shr (0+16))
  4308   00144A  6EF8               	movwf	tblptru,c
  4309   00144C                     	endif
  4310   00144C  0008               	tblrd		*
  4311   00144E  50F5               	movf	tablat,w,c
  4312   001450  6E05               	movwf	fputc@c^0,c
  4313   001452  6A06               	clrf	(fputc@c+1)^0,c
  4314   001454  C040  F007         	movff	vfpfcnvrt@fp,fputc@fp
  4315   001458  C041  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4316   00145C  EC16  F010         	call	_fputc	;wreg free
  4317   001460  EF13  F00A         	goto	l3163
  4318   001464                     l1150:
  4319   001464  0012               	return		;funcret
  4320   001466                     __end_of_vfpfcnvrt:
  4321                           	callstack 0
  4322                           
  4323 ;; *************** function _utoa *****************
  4324 ;; Defined at:
  4325 ;;		line 894 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  4328 ;;		 -> sprintf@f(11), 
  4329 ;;  d               8   33[COMRAM] unsigned long long 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  n               8   53[COMRAM] unsigned long long 
  4332 ;;  i               2   61[COMRAM] int 
  4333 ;;  w               2   51[COMRAM] int 
  4334 ;;  p               2   49[COMRAM] int 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      void 
  4337 ;; Registers used:
  4338 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4344 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4345 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4346 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4347 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4348 ;;Total ram usage:       32 bytes
  4349 ;; Hardware stack levels used: 1
  4350 ;; Hardware stack levels required when called: 6
  4351 ;; This function calls:
  4352 ;;		___lodiv
  4353 ;;		___lomod
  4354 ;;		_pad
  4355 ;; This function is called by:
  4356 ;;		_vfpfcnvrt
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text27
  4361   001466                     __ptext27:
  4362                           	callstack 0
  4363   001466                     _utoa:
  4364                           	callstack 20
  4365   001466                     
  4366                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 894: static void 
      +                          utoa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c9
      +                          9\common\doprnt.c: 895: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\do
      +                          prnt.c: 896:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\commo
      +                          n\doprnt.c: 897:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sour
      +                          ces\c99\common\doprnt.c: 901:     if (!(prec < 0)) {
  4367   001466  0100               	movlb	0	; () banked
  4368   001468  BFF5               	btfsc	(_prec+1)& (0+255),7,b
  4369   00146A  EF39  F00A         	goto	u2571
  4370   00146E  EF3B  F00A         	goto	u2570
  4371   001472                     u2571:
  4372   001472  EF3C  F00A         	goto	l3047
  4373   001476                     u2570:
  4374   001476                     
  4375                           ; BSR set to: 0
  4376                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 902:         flag
      +                          s &= ~(1 << 1);
  4377   001476  9256               	bcf	_flags^0,1,c
  4378   001478                     l3047:
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 905:     p = (0 <
      +                           prec) ? prec : 1;
  4382   001478  BFF5               	btfsc	(_prec+1)& (0+255),7,b
  4383   00147A  EF49  F00A         	goto	u2580
  4384   00147E  51F5               	movf	(_prec+1)& (0+255),w,b
  4385   001480  E106               	bnz	u2581
  4386   001482  05F4               	decf	_prec& (0+255),w,b
  4387   001484  B0D8               	btfsc	status,0,c
  4388   001486  EF47  F00A         	goto	u2581
  4389   00148A  EF49  F00A         	goto	u2580
  4390   00148E                     u2581:
  4391   00148E  EF4F  F00A         	goto	l1116
  4392   001492                     u2580:
  4393   001492                     
  4394                           ; BSR set to: 0
  4395   001492  0E00               	movlw	0
  4396   001494  6E33               	movwf	(utoa@p+1)^0,c
  4397   001496  0E01               	movlw	1
  4398   001498  6E32               	movwf	utoa@p^0,c
  4399   00149A  EF53  F00A         	goto	l1118
  4400   00149E                     l1116:
  4401                           
  4402                           ; BSR set to: 0
  4403   00149E  C0F4  F032         	movff	_prec,utoa@p
  4404   0014A2  C0F5  F033         	movff	_prec+1,utoa@p+1
  4405   0014A6                     l1118:
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 906:     w = widt
      +                          h;
  4409   0014A6  C0F2  F034         	movff	_width,utoa@w
  4410   0014AA  C0F3  F035         	movff	_width+1,utoa@w+1
  4411                           
  4412                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 909:     n = d;
  4413   0014AE  C022  F036         	movff	utoa@d,utoa@n
  4414   0014B2  C023  F037         	movff	utoa@d+1,utoa@n+1
  4415   0014B6  C024  F038         	movff	utoa@d+2,utoa@n+2
  4416   0014BA  C025  F039         	movff	utoa@d+3,utoa@n+3
  4417   0014BE  C026  F03A         	movff	utoa@d+4,utoa@n+4
  4418   0014C2  C027  F03B         	movff	utoa@d+5,utoa@n+5
  4419   0014C6  C028  F03C         	movff	utoa@d+6,utoa@n+6
  4420   0014CA  C029  F03D         	movff	utoa@d+7,utoa@n+7
  4421   0014CE                     
  4422                           ; BSR set to: 0
  4423                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 910:     i = size
      +                          of(dbuf) - 1;
  4424   0014CE  0E00               	movlw	0
  4425   0014D0  6E3F               	movwf	(utoa@i+1)^0,c
  4426   0014D2  0E1F               	movlw	31
  4427   0014D4  6E3E               	movwf	utoa@i^0,c
  4428   0014D6                     
  4429                           ; BSR set to: 0
  4430                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 911:     dbuf[i] 
      +                          = '\0';
  4431   0014D6  0E00               	movlw	0
  4432   0014D8  0101               	movlb	1	; () banked
  4433   0014DA  6F9B               	movwf	(_dbuf+31)& (0+255),b
  4434                           
  4435                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 912:     while (i
      +                           && (n || (0 < p)
  4436   0014DC  EFE6  F00A         	goto	l3065
  4437   0014E0                     l3055:
  4438                           
  4439                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 916:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 917:         --i;
  4440   0014E0  063E               	decf	utoa@i^0,f,c
  4441   0014E2  A0D8               	btfss	status,0,c
  4442   0014E4  063F               	decf	(utoa@i+1)^0,f,c
  4443   0014E6                     
  4444                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 918:         dbuf
      +                          [i] = '0' + (n % 10);
  4445   0014E6  0E7C               	movlw	low _dbuf
  4446   0014E8  243E               	addwf	utoa@i^0,w,c
  4447   0014EA  6ED9               	movwf	fsr2l,c
  4448   0014EC  0E01               	movlw	high _dbuf
  4449   0014EE  203F               	addwfc	(utoa@i+1)^0,w,c
  4450   0014F0  6EDA               	movwf	fsr2h,c
  4451   0014F2  C036  F005         	movff	utoa@n,___lomod@dividend
  4452   0014F6  C037  F006         	movff	utoa@n+1,___lomod@dividend+1
  4453   0014FA  C038  F007         	movff	utoa@n+2,___lomod@dividend+2
  4454   0014FE  C039  F008         	movff	utoa@n+3,___lomod@dividend+3
  4455   001502  C03A  F009         	movff	utoa@n+4,___lomod@dividend+4
  4456   001506  C03B  F00A         	movff	utoa@n+5,___lomod@dividend+5
  4457   00150A  C03C  F00B         	movff	utoa@n+6,___lomod@dividend+6
  4458   00150E  C03D  F00C         	movff	utoa@n+7,___lomod@dividend+7
  4459   001512  0E0A               	movlw	10
  4460   001514  6E0D               	movwf	___lomod@divisor^0,c
  4461   001516  0E00               	movlw	0
  4462   001518  6E0E               	movwf	(___lomod@divisor+1)^0,c
  4463   00151A  0E00               	movlw	0
  4464   00151C  6E0F               	movwf	(___lomod@divisor+2)^0,c
  4465   00151E  0E00               	movlw	0
  4466   001520  6E10               	movwf	(___lomod@divisor+3)^0,c
  4467   001522  0E00               	movlw	0
  4468   001524  6E11               	movwf	(___lomod@divisor+4)^0,c
  4469   001526  0E00               	movlw	0
  4470   001528  6E12               	movwf	(___lomod@divisor+5)^0,c
  4471   00152A  0E00               	movlw	0
  4472   00152C  6E13               	movwf	(___lomod@divisor+6)^0,c
  4473   00152E  0E00               	movlw	0
  4474   001530  6E14               	movwf	(___lomod@divisor+7)^0,c
  4475   001532  ECAE  F00F         	call	___lomod	;wreg free
  4476   001536  C005  F02A         	movff	?___lomod,??_utoa
  4477   00153A  C006  F02B         	movff	?___lomod+1,??_utoa+1
  4478   00153E  C007  F02C         	movff	?___lomod+2,??_utoa+2
  4479   001542  C008  F02D         	movff	?___lomod+3,??_utoa+3
  4480   001546  C009  F02E         	movff	?___lomod+4,??_utoa+4
  4481   00154A  C00A  F02F         	movff	?___lomod+5,??_utoa+5
  4482   00154E  C00B  F030         	movff	?___lomod+6,??_utoa+6
  4483   001552  C00C  F031         	movff	?___lomod+7,??_utoa+7
  4484   001556  502A               	movf	??_utoa^0,w,c
  4485   001558  0F30               	addlw	48
  4486   00155A  6EDF               	movwf	indf2,c
  4487   00155C                     
  4488                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 919:         --p;
  4489   00155C  0632               	decf	utoa@p^0,f,c
  4490   00155E  A0D8               	btfss	status,0,c
  4491   001560  0633               	decf	(utoa@p+1)^0,f,c
  4492   001562                     
  4493                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 920:         --w;
  4494   001562  0634               	decf	utoa@w^0,f,c
  4495   001564  A0D8               	btfss	status,0,c
  4496   001566  0635               	decf	(utoa@w+1)^0,f,c
  4497   001568                     
  4498                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 921:         n = 
      +                          n / 10;
  4499   001568  C036  F005         	movff	utoa@n,___lodiv@dividend
  4500   00156C  C037  F006         	movff	utoa@n+1,___lodiv@dividend+1
  4501   001570  C038  F007         	movff	utoa@n+2,___lodiv@dividend+2
  4502   001574  C039  F008         	movff	utoa@n+3,___lodiv@dividend+3
  4503   001578  C03A  F009         	movff	utoa@n+4,___lodiv@dividend+4
  4504   00157C  C03B  F00A         	movff	utoa@n+5,___lodiv@dividend+5
  4505   001580  C03C  F00B         	movff	utoa@n+6,___lodiv@dividend+6
  4506   001584  C03D  F00C         	movff	utoa@n+7,___lodiv@dividend+7
  4507   001588  0E0A               	movlw	10
  4508   00158A  6E0D               	movwf	___lodiv@divisor^0,c
  4509   00158C  0E00               	movlw	0
  4510   00158E  6E0E               	movwf	(___lodiv@divisor+1)^0,c
  4511   001590  0E00               	movlw	0
  4512   001592  6E0F               	movwf	(___lodiv@divisor+2)^0,c
  4513   001594  0E00               	movlw	0
  4514   001596  6E10               	movwf	(___lodiv@divisor+3)^0,c
  4515   001598  0E00               	movlw	0
  4516   00159A  6E11               	movwf	(___lodiv@divisor+4)^0,c
  4517   00159C  0E00               	movlw	0
  4518   00159E  6E12               	movwf	(___lodiv@divisor+5)^0,c
  4519   0015A0  0E00               	movlw	0
  4520   0015A2  6E13               	movwf	(___lodiv@divisor+6)^0,c
  4521   0015A4  0E00               	movlw	0
  4522   0015A6  6E14               	movwf	(___lodiv@divisor+7)^0,c
  4523   0015A8  ECC7  F00E         	call	___lodiv	;wreg free
  4524   0015AC  C005  F036         	movff	?___lodiv,utoa@n
  4525   0015B0  C006  F037         	movff	?___lodiv+1,utoa@n+1
  4526   0015B4  C007  F038         	movff	?___lodiv+2,utoa@n+2
  4527   0015B8  C008  F039         	movff	?___lodiv+3,utoa@n+3
  4528   0015BC  C009  F03A         	movff	?___lodiv+4,utoa@n+4
  4529   0015C0  C00A  F03B         	movff	?___lodiv+5,utoa@n+5
  4530   0015C4  C00B  F03C         	movff	?___lodiv+6,utoa@n+6
  4531   0015C8  C00C  F03D         	movff	?___lodiv+7,utoa@n+7
  4532   0015CC                     l3065:
  4533                           
  4534                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 912:     while (i
      +                           && (n || (0 < p)
  4535   0015CC  503E               	movf	utoa@i^0,w,c
  4536   0015CE  103F               	iorwf	(utoa@i+1)^0,w,c
  4537   0015D0  B4D8               	btfsc	status,2,c
  4538   0015D2  EFED  F00A         	goto	u2591
  4539   0015D6  EFEF  F00A         	goto	u2590
  4540   0015DA                     u2591:
  4541   0015DA  EF1F  F00B         	goto	l3075
  4542   0015DE                     u2590:
  4543   0015DE  5036               	movf	utoa@n^0,w,c
  4544   0015E0  1037               	iorwf	(utoa@n+1)^0,w,c
  4545   0015E2  1038               	iorwf	(utoa@n+2)^0,w,c
  4546   0015E4  1039               	iorwf	(utoa@n+3)^0,w,c
  4547   0015E6  103A               	iorwf	(utoa@n+4)^0,w,c
  4548   0015E8  103B               	iorwf	(utoa@n+5)^0,w,c
  4549   0015EA  103C               	iorwf	(utoa@n+6)^0,w,c
  4550   0015EC  103D               	iorwf	(utoa@n+7)^0,w,c
  4551   0015EE  A4D8               	btfss	status,2,c
  4552   0015F0  EFFC  F00A         	goto	u2601
  4553   0015F4  EFFE  F00A         	goto	u2600
  4554   0015F8                     u2601:
  4555   0015F8  EF70  F00A         	goto	l3055
  4556   0015FC                     u2600:
  4557   0015FC  BE33               	btfsc	(utoa@p+1)^0,7,c
  4558   0015FE  EF0B  F00B         	goto	u2610
  4559   001602  5033               	movf	(utoa@p+1)^0,w,c
  4560   001604  E106               	bnz	u2611
  4561   001606  0432               	decf	utoa@p^0,w,c
  4562   001608  B0D8               	btfsc	status,0,c
  4563   00160A  EF09  F00B         	goto	u2611
  4564   00160E  EF0B  F00B         	goto	u2610
  4565   001612                     u2611:
  4566   001612  EF70  F00A         	goto	l3055
  4567   001616                     u2610:
  4568   001616  BE35               	btfsc	(utoa@w+1)^0,7,c
  4569   001618  EF16  F00B         	goto	u2621
  4570   00161C  5035               	movf	(utoa@w+1)^0,w,c
  4571   00161E  E108               	bnz	u2620
  4572   001620  0434               	decf	utoa@w^0,w,c
  4573   001622  A0D8               	btfss	status,0,c
  4574   001624  EF16  F00B         	goto	u2621
  4575   001628  EF18  F00B         	goto	u2620
  4576   00162C                     u2621:
  4577   00162C  EF1F  F00B         	goto	l3075
  4578   001630                     u2620:
  4579   001630  B256               	btfsc	_flags^0,1,c
  4580   001632  EF1D  F00B         	goto	u2631
  4581   001636  EF1F  F00B         	goto	u2630
  4582   00163A                     u2631:
  4583   00163A  EF70  F00A         	goto	l3055
  4584   00163E                     u2630:
  4585   00163E                     l3075:
  4586                           
  4587                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 925:     return (
      +                          void) pad(fp, &dbuf[i], w);
  4588   00163E  C020  F015         	movff	utoa@fp,pad@fp
  4589   001642  C021  F016         	movff	utoa@fp+1,pad@fp+1
  4590   001646  0E7C               	movlw	low _dbuf
  4591   001648  243E               	addwf	utoa@i^0,w,c
  4592   00164A  6E17               	movwf	pad@buf^0,c
  4593   00164C  0E01               	movlw	high _dbuf
  4594   00164E  203F               	addwfc	(utoa@i+1)^0,w,c
  4595   001650  6E18               	movwf	(pad@buf+1)^0,c
  4596   001652  C034  F019         	movff	utoa@w,pad@p
  4597   001656  C035  F01A         	movff	utoa@w+1,pad@p+1
  4598   00165A  EC39  F011         	call	_pad	;wreg free
  4599   00165E  0012               	return		;funcret
  4600   001660                     __end_of_utoa:
  4601                           	callstack 0
  4602                           
  4603 ;; *************** function _pad *****************
  4604 ;; Defined at:
  4605 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  4608 ;;		 -> sprintf@f(11), 
  4609 ;;  buf             2   22[COMRAM] PTR unsigned char 
  4610 ;;		 -> dbuf(32), 
  4611 ;;  p               2   24[COMRAM] int 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  w               2   29[COMRAM] int 
  4614 ;;  i               2   27[COMRAM] int 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4624 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4625 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4627 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4628 ;;Total ram usage:       11 bytes
  4629 ;; Hardware stack levels used: 1
  4630 ;; Hardware stack levels required when called: 5
  4631 ;; This function calls:
  4632 ;;		_fputc
  4633 ;;		_fputs
  4634 ;; This function is called by:
  4635 ;;		_utoa
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text28
  4640   002272                     __ptext28:
  4641                           	callstack 0
  4642   002272                     _pad:
  4643                           	callstack 20
  4644   002272                     
  4645                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  4646   002272  A056               	btfss	_flags^0,0,c
  4647   002274  EF3E  F011         	goto	u2491
  4648   002278  EF40  F011         	goto	u2490
  4649   00227C                     u2491:
  4650   00227C  EF4A  F011         	goto	l3013
  4651   002280                     u2490:
  4652   002280                     
  4653                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  4654   002280  C017  F00E         	movff	pad@buf,fputs@s
  4655   002284  C018  F00F         	movff	pad@buf+1,fputs@s+1
  4656   002288  C015  F010         	movff	pad@fp,fputs@fp
  4657   00228C  C016  F011         	movff	pad@fp+1,fputs@fp+1
  4658   002290  ECF2  F012         	call	_fputs	;wreg free
  4659   002294                     l3013:
  4660                           
  4661                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  4662   002294  BE1A               	btfsc	(pad@p+1)^0,7,c
  4663   002296  EF4F  F011         	goto	u2501
  4664   00229A  EF51  F011         	goto	u2500
  4665   00229E                     u2501:
  4666   00229E  EF57  F011         	goto	l3017
  4667   0022A2                     u2500:
  4668   0022A2  C019  F01E         	movff	pad@p,pad@w
  4669   0022A6  C01A  F01F         	movff	pad@p+1,pad@w+1
  4670   0022AA  EF5B  F011         	goto	l1106
  4671   0022AE                     l3017:
  4672   0022AE  0E00               	movlw	0
  4673   0022B0  6E1F               	movwf	(pad@w+1)^0,c
  4674   0022B2  0E00               	movlw	0
  4675   0022B4  6E1E               	movwf	pad@w^0,c
  4676   0022B6                     l1106:
  4677                           
  4678                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  4679   0022B6  0E00               	movlw	0
  4680   0022B8  6E1D               	movwf	(pad@i+1)^0,c
  4681   0022BA  0E00               	movlw	0
  4682   0022BC  6E1C               	movwf	pad@i^0,c
  4683                           
  4684                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  4685   0022BE  EF6D  F011         	goto	l3023
  4686   0022C2                     l3019:
  4687                           
  4688                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  4689   0022C2  0E00               	movlw	0
  4690   0022C4  6E06               	movwf	(fputc@c+1)^0,c
  4691   0022C6  0E20               	movlw	32
  4692   0022C8  6E05               	movwf	fputc@c^0,c
  4693   0022CA  C015  F007         	movff	pad@fp,fputc@fp
  4694   0022CE  C016  F008         	movff	pad@fp+1,fputc@fp+1
  4695   0022D2  EC16  F010         	call	_fputc	;wreg free
  4696   0022D6                     
  4697                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  4698   0022D6  4A1C               	infsnz	pad@i^0,f,c
  4699   0022D8  2A1D               	incf	(pad@i+1)^0,f,c
  4700   0022DA                     l3023:
  4701                           
  4702                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  4703   0022DA  501E               	movf	pad@w^0,w,c
  4704   0022DC  5C1C               	subwf	pad@i^0,w,c
  4705   0022DE  501D               	movf	(pad@i+1)^0,w,c
  4706   0022E0  0A80               	xorlw	128
  4707   0022E2  6E1B               	movwf	??_pad^0,c
  4708   0022E4  501F               	movf	(pad@w+1)^0,w,c
  4709   0022E6  0A80               	xorlw	128
  4710   0022E8  581B               	subwfb	??_pad^0,w,c
  4711   0022EA  A0D8               	btfss	status,0,c
  4712   0022EC  EF7A  F011         	goto	u2511
  4713   0022F0  EF7C  F011         	goto	u2510
  4714   0022F4                     u2511:
  4715   0022F4  EF61  F011         	goto	l3019
  4716   0022F8                     u2510:
  4717   0022F8                     
  4718                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  4719   0022F8  B056               	btfsc	_flags^0,0,c
  4720   0022FA  EF81  F011         	goto	u2521
  4721   0022FE  EF83  F011         	goto	u2520
  4722   002302                     u2521:
  4723   002302  EF8D  F011         	goto	l1111
  4724   002306                     u2520:
  4725   002306                     
  4726                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  4727   002306  C017  F00E         	movff	pad@buf,fputs@s
  4728   00230A  C018  F00F         	movff	pad@buf+1,fputs@s+1
  4729   00230E  C015  F010         	movff	pad@fp,fputs@fp
  4730   002312  C016  F011         	movff	pad@fp+1,fputs@fp+1
  4731   002316  ECF2  F012         	call	_fputs	;wreg free
  4732   00231A                     l1111:
  4733   00231A  0012               	return		;funcret
  4734   00231C                     __end_of_pad:
  4735                           	callstack 0
  4736                           
  4737 ;; *************** function _fputs *****************
  4738 ;; Defined at:
  4739 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  s               2   13[COMRAM] PTR const unsigned char 
  4742 ;;		 -> dbuf(32), 
  4743 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  4744 ;;		 -> sprintf@f(11), 
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;  i               2   18[COMRAM] int 
  4747 ;;  c               1   17[COMRAM] unsigned char 
  4748 ;; Return value:  Size  Location     Type
  4749 ;;                  2   13[COMRAM] int 
  4750 ;; Registers used:
  4751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4757 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4758 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4760 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4761 ;;Total ram usage:        7 bytes
  4762 ;; Hardware stack levels used: 1
  4763 ;; Hardware stack levels required when called: 4
  4764 ;; This function calls:
  4765 ;;		_fputc
  4766 ;; This function is called by:
  4767 ;;		_pad
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	text29
  4772   0025E4                     __ptext29:
  4773                           	callstack 0
  4774   0025E4                     _fputs:
  4775                           	callstack 20
  4776   0025E4  0E00               	movlw	0
  4777   0025E6  6E14               	movwf	(fputs@i+1)^0,c
  4778   0025E8  0E00               	movlw	0
  4779   0025EA  6E13               	movwf	fputs@i^0,c
  4780   0025EC  EF03  F013         	goto	l2963
  4781   0025F0                     l2959:
  4782   0025F0  C012  F005         	movff	fputs@c,fputc@c
  4783   0025F4  6A06               	clrf	(fputc@c+1)^0,c
  4784   0025F6  C010  F007         	movff	fputs@fp,fputc@fp
  4785   0025FA  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  4786   0025FE  EC16  F010         	call	_fputc	;wreg free
  4787   002602  4A13               	infsnz	fputs@i^0,f,c
  4788   002604  2A14               	incf	(fputs@i+1)^0,f,c
  4789   002606                     l2963:
  4790   002606  5013               	movf	fputs@i^0,w,c
  4791   002608  240E               	addwf	fputs@s^0,w,c
  4792   00260A  6ED9               	movwf	fsr2l,c
  4793   00260C  5014               	movf	(fputs@i+1)^0,w,c
  4794   00260E  200F               	addwfc	(fputs@s+1)^0,w,c
  4795   002610  6EDA               	movwf	fsr2h,c
  4796   002612  50DF               	movf	indf2,w,c
  4797   002614  6E12               	movwf	fputs@c^0,c
  4798   002616  5012               	movf	fputs@c^0,w,c
  4799   002618  A4D8               	btfss	status,2,c
  4800   00261A  EF11  F013         	goto	u2411
  4801   00261E  EF13  F013         	goto	u2410
  4802   002622                     u2411:
  4803   002622  EFF8  F012         	goto	l2959
  4804   002626                     u2410:
  4805   002626  0012               	return		;funcret
  4806   002628                     __end_of_fputs:
  4807                           	callstack 0
  4808                           
  4809 ;; *************** function _fputc *****************
  4810 ;; Defined at:
  4811 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  c               2    4[COMRAM] int 
  4814 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  4815 ;;		 -> sprintf@f(11), 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  2    4[COMRAM] int 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4827 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4829 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4830 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4831 ;;Total ram usage:        9 bytes
  4832 ;; Hardware stack levels used: 1
  4833 ;; Hardware stack levels required when called: 3
  4834 ;; This function calls:
  4835 ;;		_putch
  4836 ;; This function is called by:
  4837 ;;		_pad
  4838 ;;		_vfpfcnvrt
  4839 ;;		_fputs
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text30
  4844   00202C                     __ptext30:
  4845                           	callstack 0
  4846   00202C                     _fputc:
  4847                           	callstack 20
  4848   00202C  5007               	movf	fputc@fp^0,w,c
  4849   00202E  1008               	iorwf	(fputc@fp+1)^0,w,c
  4850   002030  B4D8               	btfsc	status,2,c
  4851   002032  EF1D  F010         	goto	u2371
  4852   002036  EF1F  F010         	goto	u2370
  4853   00203A                     u2371:
  4854   00203A  EF28  F010         	goto	l2947
  4855   00203E                     u2370:
  4856   00203E  5007               	movf	fputc@fp^0,w,c
  4857   002040  1008               	iorwf	(fputc@fp+1)^0,w,c
  4858   002042  A4D8               	btfss	status,2,c
  4859   002044  EF26  F010         	goto	u2381
  4860   002048  EF28  F010         	goto	u2380
  4861   00204C                     u2381:
  4862   00204C  EF2D  F010         	goto	l2949
  4863   002050                     u2380:
  4864   002050                     l2947:
  4865   002050  5005               	movf	fputc@c^0,w,c
  4866   002052  ECF2  F013         	call	_putch
  4867   002056  EF7A  F010         	goto	l1208
  4868   00205A                     l2949:
  4869   00205A  EE20 F009          	lfsr	2,9
  4870   00205E  5007               	movf	fputc@fp^0,w,c
  4871   002060  26D9               	addwf	fsr2l,f,c
  4872   002062  5008               	movf	(fputc@fp+1)^0,w,c
  4873   002064  22DA               	addwfc	fsr2h,f,c
  4874   002066  50DE               	movf	postinc2,w,c
  4875   002068  10DE               	iorwf	postinc2,w,c
  4876   00206A  B4D8               	btfsc	status,2,c
  4877   00206C  EF3A  F010         	goto	u2391
  4878   002070  EF3C  F010         	goto	u2390
  4879   002074                     u2391:
  4880   002074  EF57  F010         	goto	l2953
  4881   002078                     u2390:
  4882   002078  EE20 F009          	lfsr	2,9
  4883   00207C  5007               	movf	fputc@fp^0,w,c
  4884   00207E  26D9               	addwf	fsr2l,f,c
  4885   002080  5008               	movf	(fputc@fp+1)^0,w,c
  4886   002082  22DA               	addwfc	fsr2h,f,c
  4887   002084  EE10 F003          	lfsr	1,3
  4888   002088  5007               	movf	fputc@fp^0,w,c
  4889   00208A  26E1               	addwf	fsr1l,f,c
  4890   00208C  5008               	movf	(fputc@fp+1)^0,w,c
  4891   00208E  22E2               	addwfc	fsr1h,f,c
  4892   002090  50DE               	movf	postinc2,w,c
  4893   002092  5CE6               	subwf	postinc1,w,c
  4894   002094  50E6               	movf	postinc1,w,c
  4895   002096  0A80               	xorlw	128
  4896   002098  6E0D               	movwf	(??_fputc+4)^0,c
  4897   00209A  50DE               	movf	postinc2,w,c
  4898   00209C  0A80               	xorlw	128
  4899   00209E  580D               	subwfb	(??_fputc+4)^0,w,c
  4900   0020A0  B0D8               	btfsc	status,0,c
  4901   0020A2  EF55  F010         	goto	u2401
  4902   0020A6  EF57  F010         	goto	u2400
  4903   0020AA                     u2401:
  4904   0020AA  EF7A  F010         	goto	l1208
  4905   0020AE                     u2400:
  4906   0020AE                     l2953:
  4907   0020AE  EE20 F003          	lfsr	2,3
  4908   0020B2  5007               	movf	fputc@fp^0,w,c
  4909   0020B4  26D9               	addwf	fsr2l,f,c
  4910   0020B6  5008               	movf	(fputc@fp+1)^0,w,c
  4911   0020B8  22DA               	addwfc	fsr2h,f,c
  4912   0020BA  CFDE F009          	movff	postinc2,??_fputc
  4913   0020BE  CFDD F00A          	movff	postdec2,??_fputc+1
  4914   0020C2  C007  FFD9         	movff	fputc@fp,fsr2l
  4915   0020C6  C008  FFDA         	movff	fputc@fp+1,fsr2h
  4916   0020CA  CFDE F00B          	movff	postinc2,??_fputc+2
  4917   0020CE  CFDD F00C          	movff	postdec2,??_fputc+3
  4918   0020D2  5009               	movf	??_fputc^0,w,c
  4919   0020D4  240B               	addwf	(??_fputc+2)^0,w,c
  4920   0020D6  6ED9               	movwf	fsr2l,c
  4921   0020D8  500A               	movf	(??_fputc+1)^0,w,c
  4922   0020DA  200C               	addwfc	(??_fputc+3)^0,w,c
  4923   0020DC  6EDA               	movwf	fsr2h,c
  4924   0020DE  C005  FFDF         	movff	fputc@c,indf2
  4925   0020E2  EE20 F003          	lfsr	2,3
  4926   0020E6  5007               	movf	fputc@fp^0,w,c
  4927   0020E8  26D9               	addwf	fsr2l,f,c
  4928   0020EA  5008               	movf	(fputc@fp+1)^0,w,c
  4929   0020EC  22DA               	addwfc	fsr2h,f,c
  4930   0020EE  2ADE               	incf	postinc2,f,c
  4931   0020F0  0E00               	movlw	0
  4932   0020F2  22DD               	addwfc	postdec2,f,c
  4933   0020F4                     l1208:
  4934   0020F4  0012               	return		;funcret
  4935   0020F6                     __end_of_fputc:
  4936                           	callstack 0
  4937                           
  4938 ;; *************** function _putch *****************
  4939 ;; Defined at:
  4940 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  c               1    wreg     unsigned char 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  c               1    0[COMRAM] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  1    wreg      void 
  4947 ;; Registers used:
  4948 ;;		wreg
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4958 ;;Total ram usage:        0 bytes
  4959 ;; Hardware stack levels used: 1
  4960 ;; Hardware stack levels required when called: 2
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_fputc
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text31
  4969   0027E4                     __ptext31:
  4970                           	callstack 0
  4971   0027E4                     _putch:
  4972                           	callstack 20
  4973   0027E4  0012               	return		;funcret
  4974   0027E6                     __end_of_putch:
  4975                           	callstack 0
  4976                           
  4977 ;; *************** function ___lomod *****************
  4978 ;; Defined at:
  4979 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lomod.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;  dividend        8    4[COMRAM] unsigned long long 
  4982 ;;  divisor         8   12[COMRAM] unsigned long long 
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;  counter         1   20[COMRAM] unsigned char 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  8    4[COMRAM] unsigned long long 
  4987 ;; Registers used:
  4988 ;;		wreg, status,2, status,0
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4994 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4995 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4997 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4998 ;;Total ram usage:       17 bytes
  4999 ;; Hardware stack levels used: 1
  5000 ;; Hardware stack levels required when called: 2
  5001 ;; This function calls:
  5002 ;;		Nothing
  5003 ;; This function is called by:
  5004 ;;		_utoa
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text32
  5009   001F5C                     __ptext32:
  5010                           	callstack 0
  5011   001F5C                     ___lomod:
  5012                           	callstack 23
  5013   001F5C  500D               	movf	___lomod@divisor^0,w,c
  5014   001F5E  100E               	iorwf	(___lomod@divisor+1)^0,w,c
  5015   001F60  100F               	iorwf	(___lomod@divisor+2)^0,w,c
  5016   001F62  1010               	iorwf	(___lomod@divisor+3)^0,w,c
  5017   001F64  1011               	iorwf	(___lomod@divisor+4)^0,w,c
  5018   001F66  1012               	iorwf	(___lomod@divisor+5)^0,w,c
  5019   001F68  1013               	iorwf	(___lomod@divisor+6)^0,w,c
  5020   001F6A  1014               	iorwf	(___lomod@divisor+7)^0,w,c
  5021   001F6C  B4D8               	btfsc	status,2,c
  5022   001F6E  EFBB  F00F         	goto	u2461
  5023   001F72  EFBD  F00F         	goto	u2460
  5024   001F76                     u2461:
  5025   001F76  EF05  F010         	goto	l851
  5026   001F7A                     u2460:
  5027   001F7A  0E01               	movlw	1
  5028   001F7C  6E15               	movwf	___lomod@counter^0,c
  5029   001F7E  EFCB  F00F         	goto	l2999
  5030   001F82                     l2997:
  5031   001F82  90D8               	bcf	status,0,c
  5032   001F84  360D               	rlcf	___lomod@divisor^0,f,c
  5033   001F86  360E               	rlcf	(___lomod@divisor+1)^0,f,c
  5034   001F88  360F               	rlcf	(___lomod@divisor+2)^0,f,c
  5035   001F8A  3610               	rlcf	(___lomod@divisor+3)^0,f,c
  5036   001F8C  3611               	rlcf	(___lomod@divisor+4)^0,f,c
  5037   001F8E  3612               	rlcf	(___lomod@divisor+5)^0,f,c
  5038   001F90  3613               	rlcf	(___lomod@divisor+6)^0,f,c
  5039   001F92  3614               	rlcf	(___lomod@divisor+7)^0,f,c
  5040   001F94  2A15               	incf	___lomod@counter^0,f,c
  5041   001F96                     l2999:
  5042   001F96  AE14               	btfss	(___lomod@divisor+7)^0,7,c
  5043   001F98  EFD0  F00F         	goto	u2471
  5044   001F9C  EFD2  F00F         	goto	u2470
  5045   001FA0                     u2471:
  5046   001FA0  EFC1  F00F         	goto	l2997
  5047   001FA4                     u2470:
  5048   001FA4                     l3001:
  5049   001FA4  500D               	movf	___lomod@divisor^0,w,c
  5050   001FA6  5C05               	subwf	___lomod@dividend^0,w,c
  5051   001FA8  500E               	movf	(___lomod@divisor+1)^0,w,c
  5052   001FAA  5806               	subwfb	(___lomod@dividend+1)^0,w,c
  5053   001FAC  500F               	movf	(___lomod@divisor+2)^0,w,c
  5054   001FAE  5807               	subwfb	(___lomod@dividend+2)^0,w,c
  5055   001FB0  5010               	movf	(___lomod@divisor+3)^0,w,c
  5056   001FB2  5808               	subwfb	(___lomod@dividend+3)^0,w,c
  5057   001FB4  5011               	movf	(___lomod@divisor+4)^0,w,c
  5058   001FB6  5809               	subwfb	(___lomod@dividend+4)^0,w,c
  5059   001FB8  5012               	movf	(___lomod@divisor+5)^0,w,c
  5060   001FBA  580A               	subwfb	(___lomod@dividend+5)^0,w,c
  5061   001FBC  5013               	movf	(___lomod@divisor+6)^0,w,c
  5062   001FBE  580B               	subwfb	(___lomod@dividend+6)^0,w,c
  5063   001FC0  5014               	movf	(___lomod@divisor+7)^0,w,c
  5064   001FC2  580C               	subwfb	(___lomod@dividend+7)^0,w,c
  5065   001FC4  A0D8               	btfss	status,0,c
  5066   001FC6  EFE7  F00F         	goto	u2481
  5067   001FCA  EFE9  F00F         	goto	u2480
  5068   001FCE                     u2481:
  5069   001FCE  EFF9  F00F         	goto	l3005
  5070   001FD2                     u2480:
  5071   001FD2  500D               	movf	___lomod@divisor^0,w,c
  5072   001FD4  5E05               	subwf	___lomod@dividend^0,f,c
  5073   001FD6  500E               	movf	(___lomod@divisor+1)^0,w,c
  5074   001FD8  5A06               	subwfb	(___lomod@dividend+1)^0,f,c
  5075   001FDA  500F               	movf	(___lomod@divisor+2)^0,w,c
  5076   001FDC  5A07               	subwfb	(___lomod@dividend+2)^0,f,c
  5077   001FDE  5010               	movf	(___lomod@divisor+3)^0,w,c
  5078   001FE0  5A08               	subwfb	(___lomod@dividend+3)^0,f,c
  5079   001FE2  5011               	movf	(___lomod@divisor+4)^0,w,c
  5080   001FE4  5A09               	subwfb	(___lomod@dividend+4)^0,f,c
  5081   001FE6  5012               	movf	(___lomod@divisor+5)^0,w,c
  5082   001FE8  5A0A               	subwfb	(___lomod@dividend+5)^0,f,c
  5083   001FEA  5013               	movf	(___lomod@divisor+6)^0,w,c
  5084   001FEC  5A0B               	subwfb	(___lomod@dividend+6)^0,f,c
  5085   001FEE  5014               	movf	(___lomod@divisor+7)^0,w,c
  5086   001FF0  5A0C               	subwfb	(___lomod@dividend+7)^0,f,c
  5087   001FF2                     l3005:
  5088   001FF2  90D8               	bcf	status,0,c
  5089   001FF4  3214               	rrcf	(___lomod@divisor+7)^0,f,c
  5090   001FF6  3213               	rrcf	(___lomod@divisor+6)^0,f,c
  5091   001FF8  3212               	rrcf	(___lomod@divisor+5)^0,f,c
  5092   001FFA  3211               	rrcf	(___lomod@divisor+4)^0,f,c
  5093   001FFC  3210               	rrcf	(___lomod@divisor+3)^0,f,c
  5094   001FFE  320F               	rrcf	(___lomod@divisor+2)^0,f,c
  5095   002000  320E               	rrcf	(___lomod@divisor+1)^0,f,c
  5096   002002  320D               	rrcf	___lomod@divisor^0,f,c
  5097   002004  2E15               	decfsz	___lomod@counter^0,f,c
  5098   002006  EFD2  F00F         	goto	l3001
  5099   00200A                     l851:
  5100   00200A  C005  F005         	movff	___lomod@dividend,?___lomod
  5101   00200E  C006  F006         	movff	___lomod@dividend+1,?___lomod+1
  5102   002012  C007  F007         	movff	___lomod@dividend+2,?___lomod+2
  5103   002016  C008  F008         	movff	___lomod@dividend+3,?___lomod+3
  5104   00201A  C009  F009         	movff	___lomod@dividend+4,?___lomod+4
  5105   00201E  C00A  F00A         	movff	___lomod@dividend+5,?___lomod+5
  5106   002022  C00B  F00B         	movff	___lomod@dividend+6,?___lomod+6
  5107   002026  C00C  F00C         	movff	___lomod@dividend+7,?___lomod+7
  5108   00202A  0012               	return		;funcret
  5109   00202C                     __end_of___lomod:
  5110                           	callstack 0
  5111                           
  5112 ;; *************** function ___lodiv *****************
  5113 ;; Defined at:
  5114 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lodiv.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;  dividend        8    4[COMRAM] unsigned long long 
  5117 ;;  divisor         8   12[COMRAM] unsigned long long 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  quotient        8   20[COMRAM] unsigned long long 
  5120 ;;  counter         1   28[COMRAM] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  8    4[COMRAM] unsigned long long 
  5123 ;; Registers used:
  5124 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5130 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5131 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5133 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5134 ;;Total ram usage:       25 bytes
  5135 ;; Hardware stack levels used: 1
  5136 ;; Hardware stack levels required when called: 2
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_utoa
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text33
  5145   001D8E                     __ptext33:
  5146                           	callstack 0
  5147   001D8E                     ___lodiv:
  5148                           	callstack 23
  5149   001D8E  EE20  F015         	lfsr	2,___lodiv@quotient
  5150   001D92  0E07               	movlw	7
  5151   001D94                     u2421:
  5152   001D94  6ADE               	clrf	postinc2,c
  5153   001D96  06E8               	decf	wreg,f,c
  5154   001D98  E2FD               	bc	u2421
  5155   001D9A  500D               	movf	___lodiv@divisor^0,w,c
  5156   001D9C  100E               	iorwf	(___lodiv@divisor+1)^0,w,c
  5157   001D9E  100F               	iorwf	(___lodiv@divisor+2)^0,w,c
  5158   001DA0  1010               	iorwf	(___lodiv@divisor+3)^0,w,c
  5159   001DA2  1011               	iorwf	(___lodiv@divisor+4)^0,w,c
  5160   001DA4  1012               	iorwf	(___lodiv@divisor+5)^0,w,c
  5161   001DA6  1013               	iorwf	(___lodiv@divisor+6)^0,w,c
  5162   001DA8  1014               	iorwf	(___lodiv@divisor+7)^0,w,c
  5163   001DAA  B4D8               	btfsc	status,2,c
  5164   001DAC  EFDA  F00E         	goto	u2431
  5165   001DB0  EFDC  F00E         	goto	u2430
  5166   001DB4                     u2431:
  5167   001DB4  EF2E  F00F         	goto	l841
  5168   001DB8                     u2430:
  5169   001DB8  0E01               	movlw	1
  5170   001DBA  6E1D               	movwf	___lodiv@counter^0,c
  5171   001DBC  EFEA  F00E         	goto	l2979
  5172   001DC0                     l2977:
  5173   001DC0  90D8               	bcf	status,0,c
  5174   001DC2  360D               	rlcf	___lodiv@divisor^0,f,c
  5175   001DC4  360E               	rlcf	(___lodiv@divisor+1)^0,f,c
  5176   001DC6  360F               	rlcf	(___lodiv@divisor+2)^0,f,c
  5177   001DC8  3610               	rlcf	(___lodiv@divisor+3)^0,f,c
  5178   001DCA  3611               	rlcf	(___lodiv@divisor+4)^0,f,c
  5179   001DCC  3612               	rlcf	(___lodiv@divisor+5)^0,f,c
  5180   001DCE  3613               	rlcf	(___lodiv@divisor+6)^0,f,c
  5181   001DD0  3614               	rlcf	(___lodiv@divisor+7)^0,f,c
  5182   001DD2  2A1D               	incf	___lodiv@counter^0,f,c
  5183   001DD4                     l2979:
  5184   001DD4  AE14               	btfss	(___lodiv@divisor+7)^0,7,c
  5185   001DD6  EFEF  F00E         	goto	u2441
  5186   001DDA  EFF1  F00E         	goto	u2440
  5187   001DDE                     u2441:
  5188   001DDE  EFE0  F00E         	goto	l2977
  5189   001DE2                     u2440:
  5190   001DE2                     l2981:
  5191   001DE2  90D8               	bcf	status,0,c
  5192   001DE4  3615               	rlcf	___lodiv@quotient^0,f,c
  5193   001DE6  3616               	rlcf	(___lodiv@quotient+1)^0,f,c
  5194   001DE8  3617               	rlcf	(___lodiv@quotient+2)^0,f,c
  5195   001DEA  3618               	rlcf	(___lodiv@quotient+3)^0,f,c
  5196   001DEC  3619               	rlcf	(___lodiv@quotient+4)^0,f,c
  5197   001DEE  361A               	rlcf	(___lodiv@quotient+5)^0,f,c
  5198   001DF0  361B               	rlcf	(___lodiv@quotient+6)^0,f,c
  5199   001DF2  361C               	rlcf	(___lodiv@quotient+7)^0,f,c
  5200   001DF4  500D               	movf	___lodiv@divisor^0,w,c
  5201   001DF6  5C05               	subwf	___lodiv@dividend^0,w,c
  5202   001DF8  500E               	movf	(___lodiv@divisor+1)^0,w,c
  5203   001DFA  5806               	subwfb	(___lodiv@dividend+1)^0,w,c
  5204   001DFC  500F               	movf	(___lodiv@divisor+2)^0,w,c
  5205   001DFE  5807               	subwfb	(___lodiv@dividend+2)^0,w,c
  5206   001E00  5010               	movf	(___lodiv@divisor+3)^0,w,c
  5207   001E02  5808               	subwfb	(___lodiv@dividend+3)^0,w,c
  5208   001E04  5011               	movf	(___lodiv@divisor+4)^0,w,c
  5209   001E06  5809               	subwfb	(___lodiv@dividend+4)^0,w,c
  5210   001E08  5012               	movf	(___lodiv@divisor+5)^0,w,c
  5211   001E0A  580A               	subwfb	(___lodiv@dividend+5)^0,w,c
  5212   001E0C  5013               	movf	(___lodiv@divisor+6)^0,w,c
  5213   001E0E  580B               	subwfb	(___lodiv@dividend+6)^0,w,c
  5214   001E10  5014               	movf	(___lodiv@divisor+7)^0,w,c
  5215   001E12  580C               	subwfb	(___lodiv@dividend+7)^0,w,c
  5216   001E14  A0D8               	btfss	status,0,c
  5217   001E16  EF0F  F00F         	goto	u2451
  5218   001E1A  EF11  F00F         	goto	u2450
  5219   001E1E                     u2451:
  5220   001E1E  EF22  F00F         	goto	l2989
  5221   001E22                     u2450:
  5222   001E22  500D               	movf	___lodiv@divisor^0,w,c
  5223   001E24  5E05               	subwf	___lodiv@dividend^0,f,c
  5224   001E26  500E               	movf	(___lodiv@divisor+1)^0,w,c
  5225   001E28  5A06               	subwfb	(___lodiv@dividend+1)^0,f,c
  5226   001E2A  500F               	movf	(___lodiv@divisor+2)^0,w,c
  5227   001E2C  5A07               	subwfb	(___lodiv@dividend+2)^0,f,c
  5228   001E2E  5010               	movf	(___lodiv@divisor+3)^0,w,c
  5229   001E30  5A08               	subwfb	(___lodiv@dividend+3)^0,f,c
  5230   001E32  5011               	movf	(___lodiv@divisor+4)^0,w,c
  5231   001E34  5A09               	subwfb	(___lodiv@dividend+4)^0,f,c
  5232   001E36  5012               	movf	(___lodiv@divisor+5)^0,w,c
  5233   001E38  5A0A               	subwfb	(___lodiv@dividend+5)^0,f,c
  5234   001E3A  5013               	movf	(___lodiv@divisor+6)^0,w,c
  5235   001E3C  5A0B               	subwfb	(___lodiv@dividend+6)^0,f,c
  5236   001E3E  5014               	movf	(___lodiv@divisor+7)^0,w,c
  5237   001E40  5A0C               	subwfb	(___lodiv@dividend+7)^0,f,c
  5238   001E42  8015               	bsf	___lodiv@quotient^0,0,c
  5239   001E44                     l2989:
  5240   001E44  90D8               	bcf	status,0,c
  5241   001E46  3214               	rrcf	(___lodiv@divisor+7)^0,f,c
  5242   001E48  3213               	rrcf	(___lodiv@divisor+6)^0,f,c
  5243   001E4A  3212               	rrcf	(___lodiv@divisor+5)^0,f,c
  5244   001E4C  3211               	rrcf	(___lodiv@divisor+4)^0,f,c
  5245   001E4E  3210               	rrcf	(___lodiv@divisor+3)^0,f,c
  5246   001E50  320F               	rrcf	(___lodiv@divisor+2)^0,f,c
  5247   001E52  320E               	rrcf	(___lodiv@divisor+1)^0,f,c
  5248   001E54  320D               	rrcf	___lodiv@divisor^0,f,c
  5249   001E56  2E1D               	decfsz	___lodiv@counter^0,f,c
  5250   001E58  EFF1  F00E         	goto	l2981
  5251   001E5C                     l841:
  5252   001E5C  C015  F005         	movff	___lodiv@quotient,?___lodiv
  5253   001E60  C016  F006         	movff	___lodiv@quotient+1,?___lodiv+1
  5254   001E64  C017  F007         	movff	___lodiv@quotient+2,?___lodiv+2
  5255   001E68  C018  F008         	movff	___lodiv@quotient+3,?___lodiv+3
  5256   001E6C  C019  F009         	movff	___lodiv@quotient+4,?___lodiv+4
  5257   001E70  C01A  F00A         	movff	___lodiv@quotient+5,?___lodiv+5
  5258   001E74  C01B  F00B         	movff	___lodiv@quotient+6,?___lodiv+6
  5259   001E78  C01C  F00C         	movff	___lodiv@quotient+7,?___lodiv+7
  5260   001E7C  0012               	return		;funcret
  5261   001E7E                     __end_of___lodiv:
  5262                           	callstack 0
  5263                           
  5264 ;; *************** function _atoi *****************
  5265 ;; Defined at:
  5266 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  5267 ;; Parameters:    Size  Location     Type
  5268 ;;  s               2   10[COMRAM] PTR const unsigned char 
  5269 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;  n               2   17[COMRAM] int 
  5272 ;;  neg             2   15[COMRAM] int 
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  2   10[COMRAM] int 
  5275 ;; Registers used:
  5276 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5282 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5283 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5284 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5285 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5286 ;;Total ram usage:        9 bytes
  5287 ;; Hardware stack levels used: 1
  5288 ;; Hardware stack levels required when called: 3
  5289 ;; This function calls:
  5290 ;;		___wmul
  5291 ;;		_isdigit
  5292 ;;		_isspace
  5293 ;; This function is called by:
  5294 ;;		_vfpfcnvrt
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           	psect	text34
  5299   0019CA                     __ptext34:
  5300                           	callstack 0
  5301   0019CA                     _atoi:
  5302                           	callstack 23
  5303   0019CA  0E00               	movlw	0
  5304   0019CC  6E13               	movwf	(atoi@n+1)^0,c
  5305   0019CE  0E00               	movlw	0
  5306   0019D0  6E12               	movwf	atoi@n^0,c
  5307   0019D2  0E00               	movlw	0
  5308   0019D4  6E11               	movwf	(atoi@neg+1)^0,c
  5309   0019D6  0E00               	movlw	0
  5310   0019D8  6E10               	movwf	atoi@neg^0,c
  5311   0019DA  EFF1  F00C         	goto	l3085
  5312   0019DE                     l3081:
  5313   0019DE  4A0B               	infsnz	atoi@s^0,f,c
  5314   0019E0  2A0C               	incf	(atoi@s+1)^0,f,c
  5315   0019E2                     l3085:
  5316   0019E2  C00B  FFF6         	movff	atoi@s,tblptrl
  5317   0019E6  C00C  FFF7         	movff	atoi@s+1,tblptrh
  5318   0019EA                     	if	0	;tblptru may be non-zero
  5319   0019EA                     	endif
  5320   0019EA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5321   0019EA  0E00               	movlw	low (__mediumconst shr (0+16))
  5322   0019EC  6EF8               	movwf	tblptru,c
  5323   0019EE                     	endif
  5324   0019EE  0008               	tblrd		*
  5325   0019F0  50F5               	movf	tablat,w,c
  5326   0019F2  0A20               	xorlw	32
  5327   0019F4  B4D8               	btfsc	status,2,c
  5328   0019F6  EFFF  F00C         	goto	u2641
  5329   0019FA  EF01  F00D         	goto	u2640
  5330   0019FE                     u2641:
  5331   0019FE  EFEF  F00C         	goto	l3081
  5332   001A02                     u2640:
  5333   001A02  C00B  FFF6         	movff	atoi@s,tblptrl
  5334   001A06  C00C  FFF7         	movff	atoi@s+1,tblptrh
  5335   001A0A                     	if	0	;tblptru may be non-zero
  5336   001A0A                     	endif
  5337   001A0A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5338   001A0A  0E00               	movlw	low (__mediumconst shr (0+16))
  5339   001A0C  6EF8               	movwf	tblptru,c
  5340   001A0E                     	endif
  5341   001A0E  0008               	tblrd		*
  5342   001A10  CFF5 F00D          	movff	tablat,??_atoi
  5343   001A14  0EF7               	movlw	247
  5344   001A16  240D               	addwf	??_atoi^0,w,c
  5345   001A18  6E0E               	movwf	(??_atoi+1)^0,c
  5346   001A1A  6A0F               	clrf	(??_atoi+2)^0,c
  5347   001A1C  0EFF               	movlw	255
  5348   001A1E  220F               	addwfc	(??_atoi+2)^0,f,c
  5349   001A20  500F               	movf	(??_atoi+2)^0,w,c
  5350   001A22  E109               	bnz	u2650
  5351   001A24  0E05               	movlw	5
  5352   001A26  5C0E               	subwf	(??_atoi+1)^0,w,c
  5353   001A28  A0D8               	btfss	status,0,c
  5354   001A2A  EF19  F00D         	goto	u2651
  5355   001A2E  EF1B  F00D         	goto	u2650
  5356   001A32                     u2651:
  5357   001A32  EFEF  F00C         	goto	l3081
  5358   001A36                     u2650:
  5359   001A36  EF25  F00D         	goto	l3093
  5360   001A3A                     l3089:
  5361   001A3A  0E00               	movlw	0
  5362   001A3C  6E11               	movwf	(atoi@neg+1)^0,c
  5363   001A3E  0E01               	movlw	1
  5364   001A40  6E10               	movwf	atoi@neg^0,c
  5365   001A42                     l3091:
  5366   001A42  4A0B               	infsnz	atoi@s^0,f,c
  5367   001A44  2A0C               	incf	(atoi@s+1)^0,f,c
  5368   001A46  EF5E  F00D         	goto	l3101
  5369   001A4A                     l3093:
  5370   001A4A  C00B  FFF6         	movff	atoi@s,tblptrl
  5371   001A4E  C00C  FFF7         	movff	atoi@s+1,tblptrh
  5372   001A52                     	if	0	;tblptru may be non-zero
  5373   001A52                     	endif
  5374   001A52                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5375   001A52  0E00               	movlw	low (__mediumconst shr (0+16))
  5376   001A54  6EF8               	movwf	tblptru,c
  5377   001A56                     	endif
  5378   001A56  0008               	tblrd		*
  5379   001A58  50F5               	movf	tablat,w,c
  5380   001A5A  6E0D               	movwf	??_atoi^0,c
  5381   001A5C  6A0E               	clrf	(??_atoi+1)^0,c
  5382                           
  5383                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5384                           ; Switch size 1, requested type "simple"
  5385                           ; Number of cases is 1, Range of values is 0 to 0
  5386                           ; switch strategies available:
  5387                           ; Name         Instructions Cycles
  5388                           ; simple_byte            4     3 (average)
  5389                           ;	Chosen strategy is simple_byte
  5390   001A5E  500E               	movf	(??_atoi+1)^0,w,c
  5391   001A60  0A00               	xorlw	0	; case 0
  5392   001A62  B4D8               	btfsc	status,2,c
  5393   001A64  EF36  F00D         	goto	l3419
  5394   001A68  EF5E  F00D         	goto	l3101
  5395   001A6C                     l3419:
  5396                           
  5397                           ; Switch size 1, requested type "simple"
  5398                           ; Number of cases is 2, Range of values is 43 to 45
  5399                           ; switch strategies available:
  5400                           ; Name         Instructions Cycles
  5401                           ; simple_byte            7     4 (average)
  5402                           ;	Chosen strategy is simple_byte
  5403   001A6C  500D               	movf	??_atoi^0,w,c
  5404   001A6E  0A2B               	xorlw	43	; case 43
  5405   001A70  B4D8               	btfsc	status,2,c
  5406   001A72  EF21  F00D         	goto	l3091
  5407   001A76  0A06               	xorlw	6	; case 45
  5408   001A78  B4D8               	btfsc	status,2,c
  5409   001A7A  EF1D  F00D         	goto	l3089
  5410   001A7E  EF5E  F00D         	goto	l3101
  5411   001A82                     l3095:
  5412   001A82  C012  F005         	movff	atoi@n,___wmul@multiplier
  5413   001A86  C013  F006         	movff	atoi@n+1,___wmul@multiplier+1
  5414   001A8A  0E00               	movlw	0
  5415   001A8C  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  5416   001A8E  0E0A               	movlw	10
  5417   001A90  6E07               	movwf	___wmul@multiplicand^0,c
  5418   001A92  EC7F  F013         	call	___wmul	;wreg free
  5419   001A96  C00B  FFF6         	movff	atoi@s,tblptrl
  5420   001A9A  C00C  FFF7         	movff	atoi@s+1,tblptrh
  5421   001A9E                     	if	0	;tblptru may be non-zero
  5422   001A9E                     	endif
  5423   001A9E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5424   001A9E  0E00               	movlw	low (__mediumconst shr (0+16))
  5425   001AA0  6EF8               	movwf	tblptru,c
  5426   001AA2                     	endif
  5427   001AA2  0008               	tblrd		*
  5428   001AA4  50F5               	movf	tablat,w,c
  5429   001AA6  5E05               	subwf	?___wmul^0,f,c
  5430   001AA8  0E00               	movlw	0
  5431   001AAA  5A06               	subwfb	(?___wmul+1)^0,f,c
  5432   001AAC  0E30               	movlw	48
  5433   001AAE  2405               	addwf	?___wmul^0,w,c
  5434   001AB0  6E12               	movwf	atoi@n^0,c
  5435   001AB2  0E00               	movlw	0
  5436   001AB4  2006               	addwfc	(?___wmul+1)^0,w,c
  5437   001AB6  6E13               	movwf	(atoi@n+1)^0,c
  5438   001AB8  EF21  F00D         	goto	l3091
  5439   001ABC                     l3101:
  5440   001ABC  C00B  FFF6         	movff	atoi@s,tblptrl
  5441   001AC0  C00C  FFF7         	movff	atoi@s+1,tblptrh
  5442   001AC4                     	if	0	;tblptru may be non-zero
  5443   001AC4                     	endif
  5444   001AC4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5445   001AC4  0E00               	movlw	low (__mediumconst shr (0+16))
  5446   001AC6  6EF8               	movwf	tblptru,c
  5447   001AC8                     	endif
  5448   001AC8  0008               	tblrd		*
  5449   001ACA  CFF5 F00D          	movff	tablat,??_atoi
  5450   001ACE  0ED0               	movlw	208
  5451   001AD0  240D               	addwf	??_atoi^0,w,c
  5452   001AD2  6E0E               	movwf	(??_atoi+1)^0,c
  5453   001AD4  6A0F               	clrf	(??_atoi+2)^0,c
  5454   001AD6  0EFF               	movlw	255
  5455   001AD8  220F               	addwfc	(??_atoi+2)^0,f,c
  5456   001ADA  500F               	movf	(??_atoi+2)^0,w,c
  5457   001ADC  E109               	bnz	u2660
  5458   001ADE  0E0A               	movlw	10
  5459   001AE0  5C0E               	subwf	(??_atoi+1)^0,w,c
  5460   001AE2  A0D8               	btfss	status,0,c
  5461   001AE4  EF76  F00D         	goto	u2661
  5462   001AE8  EF78  F00D         	goto	u2660
  5463   001AEC                     u2661:
  5464   001AEC  EF41  F00D         	goto	l3095
  5465   001AF0                     u2660:
  5466   001AF0  5010               	movf	atoi@neg^0,w,c
  5467   001AF2  1011               	iorwf	(atoi@neg+1)^0,w,c
  5468   001AF4  A4D8               	btfss	status,2,c
  5469   001AF6  EF7F  F00D         	goto	u2671
  5470   001AFA  EF81  F00D         	goto	u2670
  5471   001AFE                     u2671:
  5472   001AFE  EF8F  F00D         	goto	l1179
  5473   001B02                     u2670:
  5474   001B02  C012  F00D         	movff	atoi@n,??_atoi
  5475   001B06  C013  F00E         	movff	atoi@n+1,??_atoi+1
  5476   001B0A  1E0D               	comf	??_atoi^0,f,c
  5477   001B0C  1E0E               	comf	(??_atoi+1)^0,f,c
  5478   001B0E  4A0D               	infsnz	??_atoi^0,f,c
  5479   001B10  2A0E               	incf	(??_atoi+1)^0,f,c
  5480   001B12  C00D  F00B         	movff	??_atoi,?_atoi
  5481   001B16  C00E  F00C         	movff	??_atoi+1,?_atoi+1
  5482   001B1A  EF93  F00D         	goto	l1182
  5483   001B1E                     l1179:
  5484   001B1E  C012  F00B         	movff	atoi@n,?_atoi
  5485   001B22  C013  F00C         	movff	atoi@n+1,?_atoi+1
  5486   001B26                     l1182:
  5487   001B26  0012               	return		;funcret
  5488   001B28                     __end_of_atoi:
  5489                           	callstack 0
  5490                           
  5491 ;; *************** function _isspace *****************
  5492 ;; Defined at:
  5493 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;  c               2    4[COMRAM] int 
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;		None
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  2    4[COMRAM] int 
  5500 ;; Registers used:
  5501 ;;		wreg, status,2, status,0
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5507 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5509 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5510 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5511 ;;Total ram usage:        5 bytes
  5512 ;; Hardware stack levels used: 1
  5513 ;; Hardware stack levels required when called: 2
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_atoi
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text35
  5522   00255A                     __ptext35:
  5523                           	callstack 0
  5524   00255A                     _isspace:
  5525                           	callstack 23
  5526   00255A  0E01               	movlw	1
  5527   00255C  6E09               	movwf	_isspace$2115^0,c
  5528   00255E  0E20               	movlw	32
  5529   002560  1805               	xorwf	isspace@c^0,w,c
  5530   002562  1006               	iorwf	(isspace@c+1)^0,w,c
  5531   002564  B4D8               	btfsc	status,2,c
  5532   002566  EFB7  F012         	goto	u2551
  5533   00256A  EFB9  F012         	goto	u2550
  5534   00256E                     u2551:
  5535   00256E  EFCC  F012         	goto	l3039
  5536   002572                     u2550:
  5537   002572  0EF7               	movlw	247
  5538   002574  2405               	addwf	isspace@c^0,w,c
  5539   002576  6E07               	movwf	??_isspace^0,c
  5540   002578  0EFF               	movlw	255
  5541   00257A  2006               	addwfc	(isspace@c+1)^0,w,c
  5542   00257C  6E08               	movwf	(??_isspace+1)^0,c
  5543   00257E  5008               	movf	(??_isspace+1)^0,w,c
  5544   002580  E109               	bnz	u2560
  5545   002582  0E05               	movlw	5
  5546   002584  5C07               	subwf	??_isspace^0,w,c
  5547   002586  A0D8               	btfss	status,0,c
  5548   002588  EFC8  F012         	goto	u2561
  5549   00258C  EFCA  F012         	goto	u2560
  5550   002590                     u2561:
  5551   002590  EFCC  F012         	goto	l3039
  5552   002594                     u2560:
  5553   002594  0E00               	movlw	0
  5554   002596  6E09               	movwf	_isspace$2115^0,c
  5555   002598                     l3039:
  5556   002598  C009  F005         	movff	_isspace$2115,?_isspace
  5557   00259C  6A06               	clrf	(?_isspace+1)^0,c
  5558   00259E  0012               	return		;funcret
  5559   0025A0                     __end_of_isspace:
  5560                           	callstack 0
  5561                           
  5562 ;; *************** function _isdigit *****************
  5563 ;; Defined at:
  5564 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  5565 ;; Parameters:    Size  Location     Type
  5566 ;;  c               2    4[COMRAM] int 
  5567 ;; Auto vars:     Size  Location     Type
  5568 ;;		None
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  2    4[COMRAM] int 
  5571 ;; Registers used:
  5572 ;;		wreg, status,2, status,0
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5578 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5580 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5581 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5582 ;;Total ram usage:        4 bytes
  5583 ;; Hardware stack levels used: 1
  5584 ;; Hardware stack levels required when called: 2
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		_vfpfcnvrt
  5589 ;;		_atoi
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text36
  5594   0026D2                     __ptext36:
  5595                           	callstack 0
  5596   0026D2                     _isdigit:
  5597                           	callstack 24
  5598   0026D2  0ED0               	movlw	208
  5599   0026D4  2405               	addwf	isdigit@c^0,w,c
  5600   0026D6  6E07               	movwf	??_isdigit^0,c
  5601   0026D8  0EFF               	movlw	255
  5602   0026DA  2006               	addwfc	(isdigit@c+1)^0,w,c
  5603   0026DC  6E08               	movwf	(??_isdigit+1)^0,c
  5604   0026DE  5008               	movf	(??_isdigit+1)^0,w,c
  5605   0026E0  E10A               	bnz	u2530
  5606   0026E2  0E0A               	movlw	10
  5607   0026E4  5C07               	subwf	??_isdigit^0,w,c
  5608   0026E6  A0D8               	btfss	status,0,c
  5609   0026E8  EF78  F013         	goto	u2531
  5610   0026EC  EF7B  F013         	goto	u2530
  5611   0026F0                     u2531:
  5612   0026F0  0E01               	movlw	1
  5613   0026F2  EF7C  F013         	goto	u2540
  5614   0026F6                     u2530:
  5615   0026F6  0E00               	movlw	0
  5616   0026F8                     u2540:
  5617   0026F8  6E05               	movwf	?_isdigit^0,c
  5618   0026FA  6A06               	clrf	(?_isdigit+1)^0,c
  5619   0026FC  0012               	return		;funcret
  5620   0026FE                     __end_of_isdigit:
  5621                           	callstack 0
  5622                           
  5623 ;; *************** function ___wmul *****************
  5624 ;; Defined at:
  5625 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  multiplier      2    4[COMRAM] unsigned int 
  5628 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;  product         2    8[COMRAM] unsigned int 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  2    4[COMRAM] unsigned int 
  5633 ;; Registers used:
  5634 ;;		wreg, status,2, status,0, prodl, prodh
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5640 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5643 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5644 ;;Total ram usage:        6 bytes
  5645 ;; Hardware stack levels used: 1
  5646 ;; Hardware stack levels required when called: 2
  5647 ;; This function calls:
  5648 ;;		Nothing
  5649 ;; This function is called by:
  5650 ;;		_set_light
  5651 ;;		_atoi
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           	psect	text37
  5656   0026FE                     __ptext37:
  5657                           	callstack 0
  5658   0026FE                     ___wmul:
  5659                           	callstack 27
  5660   0026FE  5005               	movf	___wmul@multiplier^0,w,c
  5661   002700  0207               	mulwf	___wmul@multiplicand^0,c
  5662   002702  CFF3 F009          	movff	prodl,___wmul@product
  5663   002706  CFF4 F00A          	movff	prodh,___wmul@product+1
  5664   00270A  5005               	movf	___wmul@multiplier^0,w,c
  5665   00270C  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  5666   00270E  50F3               	movf	243,w,c
  5667   002710  260A               	addwf	(___wmul@product+1)^0,f,c
  5668   002712  5006               	movf	(___wmul@multiplier+1)^0,w,c
  5669   002714  0207               	mulwf	___wmul@multiplicand^0,c
  5670   002716  50F3               	movf	243,w,c
  5671   002718  260A               	addwf	(___wmul@product+1)^0,f,c
  5672   00271A  C009  F005         	movff	___wmul@product,?___wmul
  5673   00271E  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  5674   002722  0012               	return		;funcret
  5675   002724                     __end_of___wmul:
  5676                           	callstack 0
  5677                           
  5678 ;; *************** function _HighISR *****************
  5679 ;; Defined at:
  5680 ;;		line 22 in file "interrupts.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;		None
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;		None
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      void 
  5687 ;; Registers used:
  5688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5696 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5697 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5698 ;;Total ram usage:        2 bytes
  5699 ;; Hardware stack levels used: 1
  5700 ;; Hardware stack levels required when called: 1
  5701 ;; This function calls:
  5702 ;;		_increment_seconds
  5703 ;; This function is called by:
  5704 ;;		Interrupt level 2
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	intcode
  5709   000008                     __pintcode:
  5710                           	callstack 0
  5711   000008                     _HighISR:
  5712                           	callstack 20
  5713                           
  5714                           ;incstack = 0
  5715   000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5716   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  5717   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  5718   000012                     
  5719                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  5720   000012  010E               	movlb	14	; () banked
  5721   000014  AB33               	btfss	51,5,b	;volatile
  5722   000016  EF0F  F000         	goto	i2u232_41
  5723   00001A  EF11  F000         	goto	i2u232_40
  5724   00001E                     i2u232_41:
  5725   00001E  EF29  F000         	goto	i2l159
  5726   000022                     i2u232_40:
  5727   000022                     
  5728                           ; BSR set to: 14
  5729                           ;interrupts.c: 25:     increment_seconds();
  5730   000022  EC94  F00D         	call	_increment_seconds	;wreg free
  5731   000026                     
  5732                           ;interrupts.c: 26:     if(test_mode == 0){
  5733   000026  0100               	movlb	0	; () banked
  5734   000028  51E0               	movf	_test_mode& (0+255),w,b
  5735   00002A  11E1               	iorwf	(_test_mode+1)& (0+255),w,b
  5736   00002C  A4D8               	btfss	status,2,c
  5737   00002E  EF1B  F000         	goto	i2u233_41
  5738   000032  EF1D  F000         	goto	i2u233_40
  5739   000036                     i2u233_41:
  5740   000036  EF23  F000         	goto	i2l2857
  5741   00003A                     i2u233_40:
  5742   00003A                     
  5743                           ; BSR set to: 0
  5744                           ;interrupts.c: 27:             TMR0H=0b00001011;
  5745   00003A  0E0B               	movlw	11
  5746   00003C  6ED4               	movwf	212,c	;volatile
  5747                           
  5748                           ;interrupts.c: 28:             TMR0L=0b11011011;
  5749   00003E  0EDB               	movlw	219
  5750   000040  6ED3               	movwf	211,c	;volatile
  5751                           
  5752                           ;interrupts.c: 29:     }else{
  5753   000042  EF27  F000         	goto	i2l2859
  5754   000046                     i2l2857:
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;interrupts.c: 30:             TMR0H=0;
  5758   000046  0E00               	movlw	0
  5759   000048  6ED4               	movwf	212,c	;volatile
  5760                           
  5761                           ;interrupts.c: 31:             TMR0L=0;
  5762   00004A  0E00               	movlw	0
  5763   00004C  6ED3               	movwf	211,c	;volatile
  5764   00004E                     i2l2859:
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;interrupts.c: 33:         PIR0bits.TMR0IF = 0;
  5768   00004E  010E               	movlb	14	; () banked
  5769   000050  9B33               	bcf	51,5,b	;volatile
  5770   000052                     i2l159:
  5771                           
  5772                           ; BSR set to: 14
  5773   000052  C004  FFDA         	movff	??_HighISR+1,fsr2h
  5774   000056  C003  FFD9         	movff	??_HighISR,fsr2l
  5775   00005A  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5776   00005C  0011               	retfie		f
  5777   00005E                     __end_of_HighISR:
  5778                           	callstack 0
  5779                           
  5780 ;; *************** function _increment_seconds *****************
  5781 ;; Defined at:
  5782 ;;		line 50 in file "timers.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;		None
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;		None
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5798 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5799 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5800 ;;Total ram usage:        2 bytes
  5801 ;; Hardware stack levels used: 1
  5802 ;; This function calls:
  5803 ;;		Nothing
  5804 ;; This function is called by:
  5805 ;;		_HighISR
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text39
  5810   001B28                     __ptext39:
  5811                           	callstack 0
  5812   001B28                     _increment_seconds:
  5813                           	callstack 20
  5814   001B28                     
  5815                           ;timers.c: 51:     if(test_mode == 0){
  5816   001B28  0100               	movlb	0	; () banked
  5817   001B2A  51E0               	movf	_test_mode& (0+255),w,b
  5818   001B2C  11E1               	iorwf	(_test_mode+1)& (0+255),w,b
  5819   001B2E  A4D8               	btfss	status,2,c
  5820   001B30  EF9C  F00D         	goto	i2u221_41
  5821   001B34  EF9E  F00D         	goto	i2u221_40
  5822   001B38                     i2u221_41:
  5823   001B38  EFA2  F00D         	goto	i2l2751
  5824   001B3C                     i2u221_40:
  5825   001B3C                     
  5826                           ; BSR set to: 0
  5827                           ;timers.c: 52:     seconds += 1 ;
  5828   001B3C  4BFC               	infsnz	_seconds& (0+255),f,b
  5829   001B3E  2BFD               	incf	(_seconds+1)& (0+255),f,b
  5830                           
  5831                           ;timers.c: 53:     }else{
  5832   001B40  EFA6  F00D         	goto	i2l202
  5833   001B44                     i2l2751:
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;timers.c: 54:         seconds += 15;
  5837   001B44  0E0F               	movlw	15
  5838   001B46  27FC               	addwf	_seconds& (0+255),f,b
  5839   001B48  0E00               	movlw	0
  5840   001B4A  23FD               	addwfc	(_seconds+1)& (0+255),f,b
  5841   001B4C                     i2l202:
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;timers.c: 56:     if (seconds == 60){
  5845   001B4C  0E3C               	movlw	60
  5846   001B4E  19FC               	xorwf	_seconds& (0+255),w,b
  5847   001B50  11FD               	iorwf	(_seconds+1)& (0+255),w,b
  5848   001B52  A4D8               	btfss	status,2,c
  5849   001B54  EFAE  F00D         	goto	i2u222_41
  5850   001B58  EFB0  F00D         	goto	i2u222_40
  5851   001B5C                     i2u222_41:
  5852   001B5C  EFB6  F00D         	goto	i2l2757
  5853   001B60                     i2u222_40:
  5854   001B60                     
  5855                           ; BSR set to: 0
  5856                           ;timers.c: 57:         seconds = 0;
  5857   001B60  0E00               	movlw	0
  5858   001B62  6FFD               	movwf	(_seconds+1)& (0+255),b
  5859   001B64  0E00               	movlw	0
  5860   001B66  6FFC               	movwf	_seconds& (0+255),b
  5861   001B68                     
  5862                           ; BSR set to: 0
  5863                           ;timers.c: 58:         minutes ++ ;
  5864   001B68  4BFA               	infsnz	_minutes& (0+255),f,b
  5865   001B6A  2BFB               	incf	(_minutes+1)& (0+255),f,b
  5866   001B6C                     i2l2757:
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;timers.c: 60:     if (minutes == 60){
  5870   001B6C  0E3C               	movlw	60
  5871   001B6E  19FA               	xorwf	_minutes& (0+255),w,b
  5872   001B70  11FB               	iorwf	(_minutes+1)& (0+255),w,b
  5873   001B72  A4D8               	btfss	status,2,c
  5874   001B74  EFBE  F00D         	goto	i2u223_41
  5875   001B78  EFC0  F00D         	goto	i2u223_40
  5876   001B7C                     i2u223_41:
  5877   001B7C  EFC6  F00D         	goto	i2l2763
  5878   001B80                     i2u223_40:
  5879   001B80                     
  5880                           ; BSR set to: 0
  5881                           ;timers.c: 61:         minutes = 0;
  5882   001B80  0E00               	movlw	0
  5883   001B82  6FFB               	movwf	(_minutes+1)& (0+255),b
  5884   001B84  0E00               	movlw	0
  5885   001B86  6FFA               	movwf	_minutes& (0+255),b
  5886   001B88                     
  5887                           ; BSR set to: 0
  5888                           ;timers.c: 62:         hours ++ ;
  5889   001B88  4BF8               	infsnz	_hours& (0+255),f,b
  5890   001B8A  2BF9               	incf	(_hours+1)& (0+255),f,b
  5891   001B8C                     i2l2763:
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;timers.c: 64:     if (hours == 24){
  5895   001B8C  0E18               	movlw	24
  5896   001B8E  19F8               	xorwf	_hours& (0+255),w,b
  5897   001B90  11F9               	iorwf	(_hours+1)& (0+255),w,b
  5898   001B92  A4D8               	btfss	status,2,c
  5899   001B94  EFCE  F00D         	goto	i2u224_41
  5900   001B98  EFD0  F00D         	goto	i2u224_40
  5901   001B9C                     i2u224_41:
  5902   001B9C  EFD8  F00D         	goto	i2l2771
  5903   001BA0                     i2u224_40:
  5904   001BA0                     
  5905                           ; BSR set to: 0
  5906                           ;timers.c: 65:         hours = 0;
  5907   001BA0  0E00               	movlw	0
  5908   001BA2  6FF9               	movwf	(_hours+1)& (0+255),b
  5909   001BA4  0E00               	movlw	0
  5910   001BA6  6FF8               	movwf	_hours& (0+255),b
  5911   001BA8                     
  5912                           ; BSR set to: 0
  5913                           ;timers.c: 66:         day ++ ;
  5914   001BA8  4BDE               	infsnz	_day& (0+255),f,b
  5915   001BAA  2BDF               	incf	(_day+1)& (0+255),f,b
  5916   001BAC                     
  5917                           ; BSR set to: 0
  5918                           ;timers.c: 67:         week_day ++;
  5919   001BAC  4A58               	infsnz	_week_day^0,f,c
  5920   001BAE  2A59               	incf	(_week_day+1)^0,f,c
  5921   001BB0                     i2l2771:
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;timers.c: 69:     if (week_day == 7){
  5925   001BB0  0E07               	movlw	7
  5926   001BB2  1858               	xorwf	_week_day^0,w,c
  5927   001BB4  1059               	iorwf	(_week_day+1)^0,w,c
  5928   001BB6  A4D8               	btfss	status,2,c
  5929   001BB8  EFE0  F00D         	goto	i2u225_41
  5930   001BBC  EFE2  F00D         	goto	i2u225_40
  5931   001BC0                     i2u225_41:
  5932   001BC0  EFE6  F00D         	goto	i2l2775
  5933   001BC4                     i2u225_40:
  5934   001BC4                     
  5935                           ; BSR set to: 0
  5936                           ;timers.c: 70:         week_day = 0;
  5937   001BC4  0E00               	movlw	0
  5938   001BC6  6E59               	movwf	(_week_day+1)^0,c
  5939   001BC8  0E00               	movlw	0
  5940   001BCA  6E58               	movwf	_week_day^0,c
  5941   001BCC                     i2l2775:
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;timers.c: 72:     if (month == 1 && year%4 == 0){
  5945   001BCC  05F6               	decf	_month& (0+255),w,b
  5946   001BCE  11F7               	iorwf	(_month+1)& (0+255),w,b
  5947   001BD0  A4D8               	btfss	status,2,c
  5948   001BD2  EFED  F00D         	goto	i2u226_41
  5949   001BD6  EFEF  F00D         	goto	i2u226_40
  5950   001BDA                     i2u226_41:
  5951   001BDA  EF10  F00E         	goto	i2l2785
  5952   001BDE                     i2u226_40:
  5953   001BDE                     
  5954                           ; BSR set to: 0
  5955   001BDE  0E03               	movlw	3
  5956   001BE0  15DC               	andwf	_year& (0+255),w,b
  5957   001BE2  6E01               	movwf	??_increment_seconds^0,c
  5958   001BE4  0E00               	movlw	0
  5959   001BE6  15DD               	andwf	(_year+1)& (0+255),w,b
  5960   001BE8  6E02               	movwf	(??_increment_seconds+1)^0,c
  5961   001BEA  5001               	movf	??_increment_seconds^0,w,c
  5962   001BEC  1002               	iorwf	(??_increment_seconds+1)^0,w,c
  5963   001BEE  A4D8               	btfss	status,2,c
  5964   001BF0  EFFC  F00D         	goto	i2u227_41
  5965   001BF4  EFFE  F00D         	goto	i2u227_40
  5966   001BF8                     i2u227_41:
  5967   001BF8  EF10  F00E         	goto	i2l2785
  5968   001BFC                     i2u227_40:
  5969   001BFC                     
  5970                           ; BSR set to: 0
  5971                           ;timers.c: 73:         if (day == 30)
  5972   001BFC  0E1E               	movlw	30
  5973   001BFE  19DE               	xorwf	_day& (0+255),w,b
  5974   001C00  11DF               	iorwf	(_day+1)& (0+255),w,b
  5975   001C02  A4D8               	btfss	status,2,c
  5976   001C04  EF06  F00E         	goto	i2u228_41
  5977   001C08  EF08  F00E         	goto	i2u228_40
  5978   001C0C                     i2u228_41:
  5979   001C0C  EF2F  F00E         	goto	i2l2791
  5980   001C10                     i2u228_40:
  5981   001C10                     i2l2781:
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;timers.c: 74:         {;timers.c: 75:             day = 1;
  5985   001C10  0E00               	movlw	0
  5986   001C12  6FDF               	movwf	(_day+1)& (0+255),b
  5987   001C14  0E01               	movlw	1
  5988   001C16  6FDE               	movwf	_day& (0+255),b
  5989   001C18                     
  5990                           ; BSR set to: 0
  5991                           ;timers.c: 76:             month += 1;
  5992   001C18  4BF6               	infsnz	_month& (0+255),f,b
  5993   001C1A  2BF7               	incf	(_month+1)& (0+255),f,b
  5994   001C1C  EF2F  F00E         	goto	i2l2791
  5995   001C20                     i2l2785:
  5996                           
  5997                           ; BSR set to: 0
  5998   001C20  90D8               	bcf	status,0,c
  5999   001C22  35F6               	rlcf	_month& (0+255),w,b
  6000   001C24  6ED9               	movwf	fsr2l,c
  6001   001C26  35F7               	rlcf	(_month+1)& (0+255),w,b
  6002   001C28  6EDA               	movwf	fsr2h,c
  6003   001C2A  0E9E               	movlw	low (_month_days+2)
  6004   001C2C  26D9               	addwf	fsr2l,f,c
  6005   001C2E  0E01               	movlw	high (_month_days+2)
  6006   001C30  22DA               	addwfc	fsr2h,f,c
  6007   001C32  CFDE F001          	movff	postinc2,??_increment_seconds
  6008   001C36  CFDD F002          	movff	postdec2,??_increment_seconds+1
  6009   001C3A  0E01               	movlw	1
  6010   001C3C  2601               	addwf	??_increment_seconds^0,f,c
  6011   001C3E  0E00               	movlw	0
  6012   001C40  2202               	addwfc	(??_increment_seconds+1)^0,f,c
  6013   001C42  51DE               	movf	_day& (0+255),w,b
  6014   001C44  1801               	xorwf	??_increment_seconds^0,w,c
  6015   001C46  E107               	bnz	i2u229_41
  6016   001C48  51DF               	movf	(_day+1)& (0+255),w,b
  6017   001C4A  1802               	xorwf	(??_increment_seconds+1)^0,w,c
  6018   001C4C  A4D8               	btfss	status,2,c
  6019   001C4E  EF2B  F00E         	goto	i2u229_41
  6020   001C52  EF2D  F00E         	goto	i2u229_40
  6021   001C56                     i2u229_41:
  6022   001C56  EF2F  F00E         	goto	i2l2791
  6023   001C5A                     i2u229_40:
  6024   001C5A  EF08  F00E         	goto	i2l2781
  6025   001C5E                     i2l2791:
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;timers.c: 84:     if (month == 12)
  6029   001C5E  0E0C               	movlw	12
  6030   001C60  19F6               	xorwf	_month& (0+255),w,b
  6031   001C62  11F7               	iorwf	(_month+1)& (0+255),w,b
  6032   001C64  A4D8               	btfss	status,2,c
  6033   001C66  EF37  F00E         	goto	i2u230_41
  6034   001C6A  EF39  F00E         	goto	i2u230_40
  6035   001C6E                     i2u230_41:
  6036   001C6E  EF3F  F00E         	goto	i2l212
  6037   001C72                     i2u230_40:
  6038   001C72                     
  6039                           ; BSR set to: 0
  6040                           ;timers.c: 85:     {;timers.c: 86:         month = 0;
  6041   001C72  0E00               	movlw	0
  6042   001C74  6FF7               	movwf	(_month+1)& (0+255),b
  6043   001C76  0E00               	movlw	0
  6044   001C78  6FF6               	movwf	_month& (0+255),b
  6045   001C7A                     
  6046                           ; BSR set to: 0
  6047                           ;timers.c: 87:         year += 1;
  6048   001C7A  4BDC               	infsnz	_year& (0+255),f,b
  6049   001C7C  2BDD               	incf	(_year+1)& (0+255),f,b
  6050   001C7E                     i2l212:
  6051                           
  6052                           ; BSR set to: 0
  6053   001C7E  0012               	return		;funcret
  6054   001C80                     __end_of_increment_seconds:
  6055                           	callstack 0
  6056                           
  6057                           	psect	rparam
  6058   000000                     
  6059                           	psect	temp
  6060   00005A                     btemp:
  6061                           	callstack 0
  6062   00005A                     	ds	1
  6063   000000                     int$flags	set	btemp
  6064   000000                     wtemp8	set	btemp+1
  6065   000000                     ttemp5	set	btemp+1
  6066   000000                     ttemp6	set	btemp+4
  6067   000000                     ttemp7	set	btemp+8
  6068                           
  6069                           	psect	idloc
  6070                           
  6071                           ;Config register IDLOC0 @ 0x200000
  6072                           ;	unspecified, using default values
  6073   200000                     	org	2097152
  6074   200000  0FFF               	dw	4095
  6075                           
  6076                           ;Config register IDLOC1 @ 0x200002
  6077                           ;	unspecified, using default values
  6078   200002                     	org	2097154
  6079   200002  0FFF               	dw	4095
  6080                           
  6081                           ;Config register IDLOC2 @ 0x200004
  6082                           ;	unspecified, using default values
  6083   200004                     	org	2097156
  6084   200004  0FFF               	dw	4095
  6085                           
  6086                           ;Config register IDLOC3 @ 0x200006
  6087                           ;	unspecified, using default values
  6088   200006                     	org	2097158
  6089   200006  0FFF               	dw	4095
  6090                           
  6091                           ;Config register IDLOC4 @ 0x200008
  6092                           ;	unspecified, using default values
  6093   200008                     	org	2097160
  6094   200008  0FFF               	dw	4095
  6095                           
  6096                           ;Config register IDLOC5 @ 0x20000A
  6097                           ;	unspecified, using default values
  6098   20000A                     	org	2097162
  6099   20000A  0FFF               	dw	4095
  6100                           
  6101                           ;Config register IDLOC6 @ 0x20000C
  6102                           ;	unspecified, using default values
  6103   20000C                     	org	2097164
  6104   20000C  0FFF               	dw	4095
  6105                           
  6106                           ;Config register IDLOC7 @ 0x20000E
  6107                           ;	unspecified, using default values
  6108   20000E                     	org	2097166
  6109   20000E  0FFF               	dw	4095
  6110                           
  6111                           	psect	config
  6112                           
  6113                           ;Config register CONFIG1L @ 0x300000
  6114                           ;	External Oscillator mode Selection bits
  6115                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6116                           ;	Power-up default value for COSC bits
  6117                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6118   300000                     	org	3145728
  6119   300000  AA                 	db	170
  6120                           
  6121                           ;Config register CONFIG1H @ 0x300001
  6122                           ;	unspecified, using default values
  6123                           ;	Clock Out Enable bit
  6124                           ;	CLKOUTEN = 0x1, unprogrammed default
  6125                           ;	Clock Switch Enable bit
  6126                           ;	CSWEN = 0x1, unprogrammed default
  6127                           ;	Fail-Safe Clock Monitor Enable bit
  6128                           ;	FCMEN = 0x1, unprogrammed default
  6129   300001                     	org	3145729
  6130   300001  FF                 	db	255
  6131                           
  6132                           ;Config register CONFIG2L @ 0x300002
  6133                           ;	unspecified, using default values
  6134                           ;	Master Clear Enable bit
  6135                           ;	MCLRE = 0x1, unprogrammed default
  6136                           ;	Power-up Timer Enable bit
  6137                           ;	PWRTE = 0x1, unprogrammed default
  6138                           ;	Low-power BOR enable bit
  6139                           ;	LPBOREN = 0x1, unprogrammed default
  6140                           ;	Brown-out Reset Enable bits
  6141                           ;	BOREN = 0x3, unprogrammed default
  6142   300002                     	org	3145730
  6143   300002  FF                 	db	255
  6144                           
  6145                           ;Config register CONFIG2H @ 0x300003
  6146                           ;	unspecified, using default values
  6147                           ;	Brown Out Reset Voltage selection bits
  6148                           ;	BORV = 0x3, unprogrammed default
  6149                           ;	ZCD Disable bit
  6150                           ;	ZCD = 0x1, unprogrammed default
  6151                           ;	PPSLOCK bit One-Way Set Enable bit
  6152                           ;	PPS1WAY = 0x1, unprogrammed default
  6153                           ;	Stack Full/Underflow Reset Enable bit
  6154                           ;	STVREN = 0x1, unprogrammed default
  6155                           ;	Debugger Enable bit
  6156                           ;	DEBUG = 0x1, unprogrammed default
  6157                           ;	Extended Instruction Set Enable bit
  6158                           ;	XINST = 0x1, unprogrammed default
  6159   300003                     	org	3145731
  6160   300003  FF                 	db	255
  6161                           
  6162                           ;Config register CONFIG3L @ 0x300004
  6163                           ;	WDT Period Select bits
  6164                           ;	WDTCPS = 0x1F, unprogrammed default
  6165                           ;	WDT operating mode
  6166                           ;	WDTE = OFF, WDT Disabled
  6167   300004                     	org	3145732
  6168   300004  9F                 	db	159
  6169                           
  6170                           ;Config register CONFIG3H @ 0x300005
  6171                           ;	unspecified, using default values
  6172                           ;	WDT Window Select bits
  6173                           ;	WDTCWS = 0x7, unprogrammed default
  6174                           ;	WDT input clock selector
  6175                           ;	WDTCCS = 0x7, unprogrammed default
  6176   300005                     	org	3145733
  6177   300005  FF                 	db	255
  6178                           
  6179                           ;Config register CONFIG4L @ 0x300006
  6180                           ;	unspecified, using default values
  6181                           ;	Write Protection Block 0
  6182                           ;	WRT0 = 0x1, unprogrammed default
  6183                           ;	Write Protection Block 1
  6184                           ;	WRT1 = 0x1, unprogrammed default
  6185                           ;	Write Protection Block 2
  6186                           ;	WRT2 = 0x1, unprogrammed default
  6187                           ;	Write Protection Block 3
  6188                           ;	WRT3 = 0x1, unprogrammed default
  6189                           ;	Write Protection Block 3
  6190                           ;	WRT4 = 0x1, unprogrammed default
  6191                           ;	Write Protection Block 3
  6192                           ;	WRT5 = 0x1, unprogrammed default
  6193                           ;	Write Protection Block 3
  6194                           ;	WRT6 = 0x1, unprogrammed default
  6195                           ;	Write Protection Block 3
  6196                           ;	WRT7 = 0x1, unprogrammed default
  6197   300006                     	org	3145734
  6198   300006  FF                 	db	255
  6199                           
  6200                           ;Config register CONFIG4H @ 0x300007
  6201                           ;	unspecified, using default values
  6202                           ;	Configuration Register Write Protection bit
  6203                           ;	WRTC = 0x1, unprogrammed default
  6204                           ;	Boot Block Write Protection bit
  6205                           ;	WRTB = 0x1, unprogrammed default
  6206                           ;	Data EEPROM Write Protection bit
  6207                           ;	WRTD = 0x1, unprogrammed default
  6208                           ;	Scanner Enable bit
  6209                           ;	SCANE = 0x1, unprogrammed default
  6210                           ;	Low Voltage Programming Enable bit
  6211                           ;	LVP = 0x1, unprogrammed default
  6212   300007                     	org	3145735
  6213   300007  FF                 	db	255
  6214                           
  6215                           ;Config register CONFIG5L @ 0x300008
  6216                           ;	unspecified, using default values
  6217                           ;	UserNVM Program Memory Code Protection bit
  6218                           ;	CP = 0x1, unprogrammed default
  6219                           ;	DataNVM Memory Code Protection bit
  6220                           ;	CPD = 0x1, unprogrammed default
  6221   300008                     	org	3145736
  6222   300008  FF                 	db	255
  6223                           
  6224                           ;Config register CONFIG5H @ 0x300009
  6225                           ;	unspecified, using default values
  6226   300009                     	org	3145737
  6227   300009  FF                 	db	255
  6228                           
  6229                           ;Config register CONFIG6L @ 0x30000A
  6230                           ;	unspecified, using default values
  6231                           ;	Table Read Protection Block 0
  6232                           ;	EBTR0 = 0x1, unprogrammed default
  6233                           ;	Table Read Protection Block 1
  6234                           ;	EBTR1 = 0x1, unprogrammed default
  6235                           ;	Table Read Protection Block 2
  6236                           ;	EBTR2 = 0x1, unprogrammed default
  6237                           ;	Table Read Protection Block 3
  6238                           ;	EBTR3 = 0x1, unprogrammed default
  6239                           ;	Table Read Protection Block 4
  6240                           ;	EBTR4 = 0x1, unprogrammed default
  6241                           ;	Table Read Protection Block 5
  6242                           ;	EBTR5 = 0x1, unprogrammed default
  6243                           ;	Table Read Protection Block 6
  6244                           ;	EBTR6 = 0x1, unprogrammed default
  6245                           ;	Table Read Protection Block 7
  6246                           ;	EBTR7 = 0x1, unprogrammed default
  6247   30000A                     	org	3145738
  6248   30000A  FF                 	db	255
  6249                           
  6250                           ;Config register CONFIG6H @ 0x30000B
  6251                           ;	unspecified, using default values
  6252                           ;	Boot Block Table Read Protection bit
  6253                           ;	EBTRB = 0x1, unprogrammed default
  6254   30000B                     	org	3145739
  6255   30000B  FF                 	db	255
  6256                           tosu	equ	0xFFF
  6257                           tosh	equ	0xFFE
  6258                           tosl	equ	0xFFD
  6259                           stkptr	equ	0xFFC
  6260                           pclatu	equ	0xFFB
  6261                           pclath	equ	0xFFA
  6262                           pcl	equ	0xFF9
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           indf0	equ	0xFEF
  6270                           postinc0	equ	0xFEE
  6271                           postdec0	equ	0xFED
  6272                           preinc0	equ	0xFEC
  6273                           plusw0	equ	0xFEB
  6274                           fsr0h	equ	0xFEA
  6275                           fsr0l	equ	0xFE9
  6276                           wreg	equ	0xFE8
  6277                           indf1	equ	0xFE7
  6278                           postinc1	equ	0xFE6
  6279                           postdec1	equ	0xFE5
  6280                           preinc1	equ	0xFE4
  6281                           plusw1	equ	0xFE3
  6282                           fsr1h	equ	0xFE2
  6283                           fsr1l	equ	0xFE1
  6284                           bsr	equ	0xFE0
  6285                           indf2	equ	0xFDF
  6286                           postinc2	equ	0xFDE
  6287                           postdec2	equ	0xFDD
  6288                           preinc2	equ	0xFDC
  6289                           plusw2	equ	0xFDB
  6290                           fsr2h	equ	0xFDA
  6291                           fsr2l	equ	0xFD9
  6292                           status	equ	0xFD8

Data Sizes:
    Strings     46
    Constant    0
    Data        86
    BSS         310
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     85      89
    BANK0           160     72     158
    BANK1           256      0     182
    BANK2           256      0     124
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    S2032$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 4
		 -> main@ADC(BANK0[3]), main@Yea(BANK0[4]), main@Mon(BANK0[2]), main@Day(BANK0[2]), 
		 -> main@Hou(BANK0[2]), main@Min(BANK0[2]), main@Sec(BANK0[2]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1984$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S1984$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    ADC2String@buf	PTR unsigned char  size(2) Largest target is 4
		 -> main@ADC(BANK0[3]), main@Yea(BANK0[4]), main@Mon(BANK0[2]), main@Day(BANK0[2]), 
		 -> main@Hou(BANK0[2]), main@Min(BANK0[2]), main@Sec(BANK0[2]), 

    LCD_sendstring@strlst	PTR PTR unsigned char  size(2) Largest target is 16
		 -> main@lst(BANK0[16]), 

    sp__get_week_day	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    main@lst	PTR unsigned char [8] size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), NULL(NULL[0]), 
		 -> main@ADC(BANK0[3]), main@Yea(BANK0[4]), main@Mon(BANK0[2]), main@Day(BANK0[2]), 
		 -> main@Hou(BANK0[2]), main@Min(BANK0[2]), main@Sec(BANK0[2]), 

    main@F14269	PTR unsigned char [8] size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _set_light->___awdiv
    _LCD_sendstring->_LCD_setline
    _LCD_setline->_LCD_sendbyte
    _LCD_clear->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _atoi->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_increment_seconds

Critical Paths under _main in BANK0

    _main->_ADC2String
    _ADC2String->_sprintf
    _sprintf->_vfprintf

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0   29860
                                             33 BANK0     39    39      0
                         _ADC2String
                         _ADC_getval
                           _ADC_init
                    _Interrupts_init
                           _LCD_Init
                          _LCD_clear
                     _LCD_sendstring
                         _Light_init
                        _Timer0_init
                            _get_day
                          _get_hours
                        _get_minutes
                          _get_month
                        _get_seconds
                       _get_week_day
                           _get_year
                          _set_light
 ---------------------------------------------------------------------------------
 (1) _set_light                                           24    14     10    3440
                                             12 COMRAM    24    14     10
                         _ADC_getval (ARG)
                            ___awdiv
                             ___wmul
                            _get_day (ARG)
                          _get_hours (ARG)
                          _get_month (ARG)
                    _increment_hours
 ---------------------------------------------------------------------------------
 (2) _increment_hours                                      2     0      2      98
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _get_year                                             2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_week_day                                         2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_seconds                                          2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_month                                            2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_minutes                                          2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_hours                                            2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Light_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_sendstring                                       6     4      2    6720
                                              9 COMRAM     6     4      2
                       _LCD_sendbyte
                        _LCD_setline
 ---------------------------------------------------------------------------------
 (2) _LCD_setline                                          2     0      2    3370
                                              7 COMRAM     2     0      2
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            1     1      0    3118
                                              7 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0    3206
                                              7 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendbyte                                         2     1      1    3118
                                              5 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (4) _LCD_sendnibble                                       1     1      0      88
                                              4 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (5) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC2String                                           6     0      6   12462
                                             27 BANK0      6     0      6
                         _ADC_getval (ARG)
                            _get_day (ARG)
                          _get_hours (ARG)
                        _get_minutes (ARG)
                          _get_month (ARG)
                        _get_seconds (ARG)
                           _get_year (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10231
                                              8 BANK0     19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    9199
                                              0 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           25    19      6    8705
                                             63 COMRAM    22    16      6
                               _atoi
                              _fputc
                            _isdigit
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                32    22     10    4187
                                             31 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2775
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1357
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                9     5      4     857
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) ___lomod                                             17     1     16     412
                                              4 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (6) ___lodiv                                             25     9     16     421
                                              4 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (5) _atoi                                                 9     7      2    2354
                                             10 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              5     3      2     259
                                              4 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              4     2      2     281
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1362
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             2     2      0       0
                                              2 COMRAM     2     2      0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (11) _increment_seconds                                   2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC2String
     _ADC_getval (ARG)
     _get_day (ARG)
     _get_hours (ARG)
     _get_minutes (ARG)
     _get_month (ARG)
     _get_seconds (ARG)
     _get_year (ARG)
     _sprintf (ARG)
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _fputc
             _putch
           _isdigit
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
               _fputs
                 _fputc
   _ADC_getval
   _ADC_init
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LCD_clear
     _LCD_sendbyte
   _LCD_sendstring
     _LCD_sendbyte
     _LCD_setline
       _LCD_sendbyte
   _Light_init
   _Timer0_init
   _get_day
   _get_hours
   _get_minutes
   _get_month
   _get_seconds
   _get_week_day
   _get_year
   _set_light
     _ADC_getval (ARG)
     ___awdiv (ARG)
     ___wmul (ARG)
     _get_day (ARG)
     _get_hours (ARG)
     _get_month (ARG)
     _increment_hours (ARG)

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      48        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      7C       9       48.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B6       7       71.1%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     48      9E       5       98.8%
BITBIGSFRllllhh     84      0       0      40        0.0%
BITBIGSFRlllllh     5E      0       0      43        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     55      59       1       94.7%
BITBIGSFRhhll       43      0       0      34        0.0%
BITBIGSFRllllll     3A      0       0      46        0.0%
BITBIGSFRlllllh     33      0       0      42        0.0%
BITBIGSFRhhlhh      1B      0       0      33        0.0%
BITBIGSFRllllhh     14      0       0      37        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllhl      8      0       0      41        0.0%
BITBIGSFRlllllh      7      0       0      44        0.0%
BITBIGSFRllllhh      6      0       0      39        0.0%
BITBIGSFRllllhh      3      0       0      38        0.0%
BITBIGSFRhlh         3      0       0      35        0.0%
BITBIGSFRlllllh      1      0       0      45        0.0%
BITBIGSFRlh          1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     229      47        0.0%
DATA                 0      0     229       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Nov 09 20:08:29 2022

             ?_get_minutes 0005               ?_get_seconds 0005              ?_get_week_day 0005  
             ___awdiv@sign 000A        ___wmul@multiplicand 0007          ??_Interrupts_init 0005  
                      l300 2746                        l221 27D2                        l151 27A0  
                      l303 23C0                        l215 27B4                        l224 27DC  
                      l400 1194                        l306 2666                        l218 27C8  
                      l403 2722                        l243 27BE                        l235 1F5A  
                      l324 1D8C                        l332 19C8                        l228 1F5A  
                      l261 277A                        l318 1D8C                        l246 27AA  
                      l351 2270                        l264 26A4                        l192 25E2  
                      l266 26B2                        l267 26D0                        l291 2478  
                      l364 27E0                        l293 248E                        l286 2788  
                      l198 2794                        l295 24A4                        l297 24B2  
                      l289 2462                        l634 21B8                        l378 0F5A  
                      l841 1E5C                        l851 200A                        l848 1E7C  
                      l858 202A                        _day 00DE                        _pad 2272  
                      wreg 000FE8                       l1111 231A                       l1106 22B6  
                     l1116 149E                       l1109 22F8                       l1126 165E  
                     l1118 14A6                       l1150 1464                       l1208 20F4  
                     l1216 2626                       l3001 1FA4                       l1081 2558  
                     l3003 1FD2                       l1219 27E4                       l3011 2280  
                     l3101 1ABC                       l3005 1FF2                       l3021 22D6  
                     l3013 2294                       l1157 2506                       l2221 277C  
                     l2301 2472                       l1182 1B26                       l3031 255A  
                     l3103 1AF0                       l3007 2004                       l3023 22DA  
                     l3015 22A2                       l3111 1196                       l2223 277E  
                     l2311 24A6                       l2303 247A                       l1185 26FC  
                     l1193 259E                       l3033 255E                       l3105 1B02  
                     l3025 2306                       l3017 22AE                       l3009 2272  
                     l3121 11EA                       l3113 11BE                       l2225 2786  
                     l2313 24AA                       l2305 2488                       l3027 26D2  
                     l3035 2572                       l1179 1B1E                       l3019 22C2  
                     l3051 14CE                       l3043 1466                       l3123 11EC  
                     l3131 1242                       l3115 11CC                       l3211 2220  
                     l3203 21BA                       l2307 2490                       l2411 1CB2  
                     l2403 278A                       l3037 2594                       l3061 1562  
                     l3053 14D6                       l3045 1476                       l3141 12D0  
                     l3133 1254                       l3125 11FE                       l3117 11DA  
                     l3213 2234                       l3205 21CE                       l2309 249E  
                     l2421 1D04                       l2413 1CC0                       l2405 1C80  
                     l2501 25D2                       l3301 1190                       l3221 0E58  
                     l3039 2598                       l3071 1616                       l3063 1568  
                     l3055 14E0                       l3047 1478                       l3151 134A  
                     l3143 12F0                       l3135 127C                       l3119 11DE  
                     l3215 2254                       l3207 21EE                       l2511 2334  
                     l2431 1D5C                       l2423 1D18                       l2415 1CD4  
                     l2407 1C92                       l2503 25DE                       l3231 0EAE  
                     l3223 0E5A                       l3311 1670                       l3303 1660  
                     l3081 19DE                       l3073 1630                       l3057 14E6  
                     l3065 15CC                       l3049 1492                       l3161 13F6  
                     l3153 136A                       l3137 12B2                       l3129 120A  
                     l3209 2200                       l2521 2370                       l2513 234A  
                     l2433 1D6A                       l2425 1D26                       l2417 1CE2  
                     l2409 1CA0                       l2505 25E0                       l3241 0F14  
                     l3233 0EBE                       l3225 0E5E                       l3217 0E30  
                     l3321 16D0                       l3313 1674                       l3305 1664  
                     l3091 1A42                       l3067 15DE                       l3075 163E  
                     l3059 155C                       l3155 13C6                       l3163 1426  
                     l3147 12FE                       l3139 12C2                       l2507 2796  
                     l2531 23A2                       l2523 2378                       l2515 2350  
                     l2435 1D7E                       l2427 1D3A                       l2419 1CF6  
                     l2451 20FA                       l3251 0FAC                       l3243 0F16  
                     l3235 0EC0                       l3227 0E70                       l3219 0E42  
                     l3331 1788                       l3323 16F4                       l3315 1684  
                     l3307 1668                       l3093 1A4A                       l3085 19E2  
                     l3069 15FC                       l3149 133A                       l3181 24B4  
                     l2541 2774                       l2533 23AC                       l2525 2382  
                     l2517 235E                       l2509 231C                       l2429 1D48  
                     l2621 1EFA                       l2613 1EDA                       l2605 1EBA  
                     l2461 212A                       l2453 2108                       l3261 0FE6  
                     l3253 0FBC                       l3245 0F3C                       l3237 0EE6  
                     l3229 0E98                       l3341 17BA                       l3333 1794  
                     l3325 1718                       l3317 1688                       l3309 166C  
                     l3095 1A82                       l3087 1A02                       l3079 19CA  
                     l3415 1234                       l3167 1438                       l3183 24C0  
                     l3191 2508                       l2543 2776                       l2295 244E  
                     l2391 273E                       l2535 23B6                       l2527 238A  
                     l2519 2366                       l2551 2630                       l2631 1F2E  
                     l2623 1F0E                       l2615 1EEE                       l2607 1ECE  
                     l2471 2158                       l2463 212E                       l2455 2110  
                     l3271 1014                       l3263 0FF8                       l3255 0FC2  
                     l3247 0F5C                       l3239 0F04                       l3351 17E6  
                     l3343 17C2                       l3335 17A0                       l3327 1740  
                     l3319 16AC                       l3089 1A3A                       l3417 1418  
                     l3185 24DC                       l3193 251A                       l2545 2778  
                     l2537 2762                       l2297 245C                       l2385 2726  
                     l2529 2394                       l2553 263A                       l2481 218C  
                     l2473 2166                       l2465 2136                       l2457 2114  
                     l2449 20F6                       l3281 108C                       l3273 1048  
                     l3265 100C                       l3257 0FD2                       l3249 0F84  
                     l3353 1822                       l3345 17CA                       l3337 17AA  
                     l3329 1764                       l3419 1A6C                       l3187 24FC  
                     l3195 2522                       l2539 276C                       l2299 2464  
                     l2387 2730                       l2651 185C                       l2643 1844  
                     l2547 27DE                       l2571 27C0                       l2555 27AC  
                     l2483 2192                       l2475 216C                       l2467 2148  
                     l2459 2122                       l3291 111E                       l3283 10A0  
                     l3275 104C                       l3259 0FD4                       l3347 17D2  
                     l3339 17B2                       l3197 252A                       l2581 26A2  
                     l2389 2738                       l2549 2628                       l2653 18A8  
                     l2493 25A0                       l2573 27CA                       l2637 1F3A  
                     l2629 1F1A                       l2477 2182                       l2469 2150  
                     l2485 2198                       l3293 1148                       l3277 1066  
                     l3349 17DA                       l3199 2546                       l2583 26B8  
                     l2655 18F4                       l2495 25A8                       l2575 27D4  
                     l2639 1F4E                       l2591 1E90                       l2487 21A8  
                     l2479 218A                       l3295 114C                       l3279 1078  
                     l2585 26C8                       l2657 19A8                       l2649 184C  
                     l2497 25AA                       l2577 27B6                       l2489 21B0  
                     l3297 1162                       l3289 10B0                       l2659 19AC  
                     l2499 25BE                       l2579 27A2                       l3299 117E  
                     l2597 1E9C                       l2589 1E7E                       ?_pad 0015  
                     l2951 2078                       l2943 202C                       l2599 1EAE  
                     l2953 20AE                       l2945 203E                       l2961 2602  
                     l2971 1D8E                       l2947 2050                       l2963 2606  
                     l2965 26FE                       l2981 1DE2                       l2973 1D9A  
                     l2949 205A                       l2957 25E4                       l2967 271A  
                     l2991 1E56                       l2983 1DF4                       l2975 1DB8  
                     l2959 25F0                       l2985 1E22                       l2977 1DC0  
                     l2993 1F5C                       l2987 1E42                       l2979 1DD4  
                     l2995 1F7A                       l2989 1E44                       l2997 1F82  
                     l2999 1F96                       STR_1 0E1C                       STR_2 0E14  
                     STR_3 0E10                       STR_4 0E28                       STR_5 0E18  
                     STR_6 0E24                       STR_7 0E20                       STR_8 0E2C  
                     STR_9 0E01                       u3001 178E                       u2400 20AE  
                     u1600 249E                       u2401 20AA                       u1601 249A  
                     u3017 182E                       u2410 2626                       u2411 2622  
                     u3107 2740                       u3027 262A                       u2500 22A2  
                     u1700 1CB2                       u2421 1D94                       u2501 229E  
                     u3117 24AC                       u3037 2640                       u1701 1CAE  
                     u2430 1DB8                       u2510 22F8                       u1710 1CD4  
                     u2431 1DB4                       u2511 22F4                       u3127 2780  
                     u3047 233E                       u1711 1CD0                       u2440 1DE2  
                     u2520 2306                       u2600 15FC                       u1720 1CF6  
                     u1800 2166                       u2441 1DDE                       u2521 2302  
                     u2601 15F8                       u3057 2352                       u1721 1CF2  
                     u1801 2162                       u2530 26F6                       u2450 1E22  
                     u2370 203E                       u2610 1616                       u1570 245C  
                     u1730 1D18                       u1810 2182                       u2531 26F0  
                     u2451 1E1E                       u2371 203A                       u2611 1612  
                     u1571 2458                       u3067 2360                       u1731 1D14  
                     u1811 217E                       u2540 26F8                       u2460 1F7A  
                     u2380 2050                       u2620 1630                       u2700 127C  
                     u1580 2472                       u1740 1D3A                       u1900 1ECE  
                     u1820 21A8                       u2461 1F76                       u2381 204C  
                     u2621 162C                       u2701 1278                       u1581 246E  
                     u3077 2372                       u1741 1D36                       u1901 1ECA  
                     u1821 21A4                       u2550 2572                       u2470 1FA4  
                     u2390 2078                       u2630 163E                       u2710 12C2  
                     u1590 2488                       u1750 1D5C                       u1830 25BE  
                     u1910 1EEE                       u2551 256E                       u2471 1FA0  
                     u2391 2074                       u2631 163A                       u2711 12BE  
                     u1591 2484                       u3087 2384                       u1751 1D58  
                     u1831 25BA                       u1911 1EEA                       u2560 2594  
                     u2640 1A02                       u2480 1FD2                       u2720 133A  
                     u1760 1D7E                       u1920 1F0E                       u2800 0E70  
                     u2561 2590                       u2641 19FE                       u2481 1FCE  
                     u2721 1336                       u3097 239A                       u1761 1D7A  
                     u1921 1F0A                       u2801 0E6C                       u2650 1A36  
                     u2490 2280                       u2570 1476                       u2730 136A  
                     u1690 1C92                       u1930 1F2E                       u1770 2108  
                     u2810 0EAE                       u2651 1A32                       u2491 227C  
                     u2571 1472                       u2731 1366                       u1675 272E  
                     u1691 1C8E                       u1931 1F2A                       u1771 2104  
                     u2811 0EAA                       u2660 1AF0                       u2580 1492  
                     u2740 24FC                       u1676 2730                       u1940 1F4E  
                     u1780 2122                       u2900 0FE6                       u2820 0EBE  
                     u2661 1AEC                       u2581 148E                       u2741 24F8  
                     u1941 1F4A                       u1781 211E                       u2901 0FE2  
                     u2821 0EBA                       u2670 1B02                       u2590 15DE  
                     u2750 21CE                       u1870 26B2                       u1950 18A4  
                     u1790 2148                       u2910 0FF8                       u2830 0EE6  
                     u2671 1AFE                       u2591 15DA                       u2751 21CA  
                     u1871 26AE                       u1791 2144                       u2911 0FF4  
                     u2831 0EE2                       u2680 11BE                       u2760 2200  
                     u1960 18E4                       u1880 1E90                       u2920 100C  
                     u2840 0F14                       u2681 11BA                       u2761 21FC  
                     u1881 1E8C                       u2921 1008                       u2841 0F10  
                     u2690 1254                       u2770 2234                       u1970 18F4  
                     u1890 1EAE                       u2930 1062                       u2850 0F3C  
                     u2691 1250                       u2771 2230                       u1971 18F0  
                     u1891 1EAA                       u2931 105E                       u2851 0F38  
                     u1980 19C8                       u2940 1078                       u2860 0F84  
                     u2780 0E42                       u1981 19C4                       u1957 189A  
                     u2941 1074                       u2861 0F80                       u2781 0E3E  
                     u2950 108C                       u2870 0FAC                       u2790 0E58  
                     u1967 18DA                       u2951 1088                       u2871 0FA8  
                     u2791 0E54                       u2960 10A0                       u2880 0FBC  
                     u2961 109C                       u2881 0FB8                       u2970 111E  
                     u2890 0FD2                       u2971 111A                       u2891 0FCE  
                     u2980 1144                       u2981 1140                       u2990 1162  
                     u2991 115E                       _dbuf 017C                       _flag 0057  
                     _atoi 19CA                       _main 1660                       _prec 00F4  
                     _year 00DC                       pad@i 001C                       pad@p 0019  
                     fsr0h 000FEA                       fsr1h 000FE2                       indf0 000FEF  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       pad@w 001E                       fsr2l 000FD9  
                     btemp 005A                       _utoa 1466               ?_LCD_setline 0008  
                     prodh 000FF4                       prodl 000FF3                       start 005E  
         __end_of_ADC_init 277C            __end_of_HighISR 005E               ___param_bank 000000  
           ??_get_week_day 0007                      ??_pad 001B           __end_of_LCD_Init 23C2  
              _sunset_list 00C0                      ?_atoi 000B                      ?_main 0001  
                    _ADPCH 000F5F            __end_of___awdiv 21BA                      STR_10 0E06  
                    STR_11 0E0B                      ?_utoa 0020            __end_of___lodiv 1E7E  
          ___awdiv@divisor 0007            __end_of___lomod 202C                      i2l202 1B4C  
                    i2l212 1C7E                      i2l159 0052            ___awdiv@counter 0009  
             vfpfcnvrt@fmt 0042                      _TMR0H 000FD4                      _TMR0L 000FD3  
          __end_of_get_day 27DE                      _flags 0056                      _fputc 202C  
                    _fputs 25E4            __end_of_isdigit 26FE                      _hours 00F8  
                    _month 00F6                      atoi@n 0012                      pad@fp 0015  
                    atoi@s 000B                      _width 00F2                      _putch 27E4  
          __end_of_isspace 25A0              ?_LCD_sendbyte 0006                      tablat 000FF5  
                    ttemp5 005B                      ttemp6 005E                      ttemp7 0062  
                    utoa@d 0022                      utoa@i 003E                      utoa@n 0036  
                    utoa@p 0032                      utoa@w 0034                      status 000FD8  
                    wtemp8 005B            __end_of_sprintf 255A           ___lodiv@dividend 0005  
         ?_increment_hours 0005            __initialization 23C2               __end_of_atoi 1B28  
             __end_of_main 1844                 _Light_init 27DE               __end_of_utoa 1660  
             ??_ADC2String 0056          __end_of_LCD_E_TOG 278A                     ??_atoi 000D  
                   ??_main 0081                     ??_utoa 002A              __activetblptr 000003  
         ___lodiv@quotient 0015          __end_of_LCD_clear 2668               _sunrise_list 00A8  
                   ?_fputc 0005                     ?_fputs 000E                     _ADRESH 000F64  
            ADC2String@buf 007B             ??_LCD_sendbyte 0007           ___awdiv@dividend 0005  
                   ?_putch 0001                     i2l2751 1B44                     i2l2761 1B88  
                   i2l2753 1B60                     i2l2771 1BB0                     i2l2763 1B8C  
                   i2l2755 1B68                     i2l2747 1B28                     i2l2851 0022  
                   i2l2781 1C10                     i2l2773 1BC4                     i2l2765 1BA0  
                   i2l2757 1B6C                     i2l2749 1B3C                     i2l2853 0026  
                   i2l2783 1C18                     i2l2791 1C5E                     i2l2775 1BCC  
                   i2l2767 1BA8                     i2l2759 1B80                     i2l2855 003A  
                   i2l2793 1C72                     i2l2777 1BDE                     i2l2785 1C20  
                   i2l2769 1BAC                     i2l2857 0046                     i2l2849 0012  
                   i2l2795 1C7A                     i2l2779 1BFC                     i2l2859 004E  
            vfpfcnvrt@done 0052                  ??_HighISR 0003         __end_of_ADC2String 2272  
             ??_ADC_getval 0007              ??_Timer0_init 0005               vfprintf@cfmt 0066  
         __end_of_get_year 27AC                     ___wmul 26FE                  ??___awdiv 0009  
                ??___lodiv 0015                  ??___lomod 0015                     clear_0 2420  
                   clear_1 242C                     clear_2 2438           ___awdiv@quotient 000B  
                   isa$std 000001                     pad@buf 0017                  ??_get_day 0007  
                   fputc@c 0005                     fputs@c 0012                     fputs@i 0013  
             __pdataCOMRAM 0058                     fputs@s 000E                  ??_isdigit 0007  
 set_light@midnight_approx 001D               __mediumconst 0000                  ??_isspace 0007  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ?_ADC_init 0001                     putch@c 0001           __end_of_vfprintf 2508  
                   utoa@fp 0020                  ??_sprintf 0056         __end_of_ADC_getval 26D2  
     __end_of_get_week_day 1F5C                 __accesstop 0060    __end_of__initialization 2442  
                ?_LCD_Init 0001              ___rparam_used 000001            _Interrupts_init 2796  
           __pcstackCOMRAM 0001                ?_Light_init 0001               __pidataBANK0 2668  
             __pidataBANK1 2748              __end_of_fputc 20F6              __end_of_fputs 2628  
            __end_of_putch 27E6        __end_of_Timer0_init 25E4                 ??_ADC_init 0005  
                  ??_fputc 0009                    ??_fputs 0012                    ??_putch 0005  
               __pbssBANK0 00E2                 __pbssBANK1 0100                 __pbssBANK2 0200  
               ??_LCD_Init 0008             _LCD_sendnibble 244C             _LCD_sendstring 1844  
                  ?___wmul 0005       __end_of_LCD_sendbyte 2748            _sunrise_records 0100  
                ?_get_year 0005           ___lomod@dividend 0005     __end_of_LCD_sendnibble 24B4  
      set_light@curr_month 0011    __end_of_Interrupts_init 27A2                    _HighISR 0008  
   __end_of_LCD_sendstring 19CA                  _ADREFbits 000F58            LCD_sendstring@i 000E  
                  __Hparam 0000                    __Lparam 0000                _Timer0_init 25A0  
        __end_of_get_hours 27D4          __end_of_get_month 27C0                    ___awdiv 20F6  
                  ___lodiv 1D8E                    ___lomod 1F5C                  ?_vfprintf 0060  
             __psmallconst 0E00                    __pcinit 23C2                    __ramtop 0E00  
                  __ptext0 1660                    __ptext1 0E30                    __ptext2 278A  
                  __ptext3 20F6                    __ptext4 27A2                    __ptext5 1E7E  
                  __ptext6 27AC                    __ptext7 27B6                    __ptext8 27C0  
                  __ptext9 27CA                    _get_day 27D4                    _isdigit 26D2  
                  _minutes 00FA                    _seconds 00FC                    _isspace 255A  
                _LCD_E_TOG 277C            LCD_setline@line 0008                    main@ADC 008B  
                  atoi@neg 0010                    main@Day 00A4                    main@Hou 00A2  
                  main@Min 00A0                    main@Sec 009E                    main@Mon 00A6  
                  main@Yea 0087                    _sprintf 2508                    main@lst 008E  
               ??_get_year 0007                  _LCD_clear 2628       end_of_initialization 2442  
      set_light@luminosity 0013            ?_LCD_sendnibble 0001           ADC_getval@tmpval 0007  
                  fputc@fp 0007                    fputs@fp 0010          __end_of_set_light 1196  
          ?_LCD_sendstring 000A                 _month_days 019C          __end_of_vfpfcnvrt 1466  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE           vfpfcnvrt@convarg 004A  
               main@F14267 00D8                 main@F14269 00E2                 ??_vfprintf 0056  
             _get_week_day 1E7E             set_light@state 0015                  _PORTAbits 000F89  
                _PORTBbits 000F8A                  _PORTFbits 000F8E                  _PORTGbits 000F8F  
               ?_LCD_E_TOG 0001                  _TRISAbits 000F81                  _TRISBbits 000F82  
                _TRISCbits 000F83                  _TRISEbits 000F85                  _TRISFbits 000F86  
                _TRISGbits 000F87                  _TRISHbits 000F88                 ?_LCD_clear 0001  
              _CM1CON0bits 000ED0                _CM1CON1bits 000ED1           ?_Interrupts_init 0001  
        _increment_seconds 1B28         ?_increment_seconds 0001              ??_get_minutes 0007  
            ??_get_seconds 0007               ??_Light_init 0005                ADC2String@x 007D  
      ??_increment_seconds 0001                vfpfcnvrt@ap 0044                vfpfcnvrt@cp 0054  
              vfpfcnvrt@fp 0040             __end_of___wmul 2724       LCD_sendnibble@number 0005  
            __pidataCOMRAM 27E2        start_initialization 23C2            ___lodiv@divisor 000D  
          ___lodiv@counter 001D                __end_of_pad 231C  __end_of_increment_seconds 1C80  
       __end_of_Light_init 27E2               _LCD_sendbyte 2724              ??_LCD_setline 000A  
              vfprintf@fmt 0062                   ??___wmul 0009       LCD_sendstring@strlst 000A  
              __pdataBANK0 00A8                __pdataBANK1 019C        __end_of_get_minutes 27CA  
      __end_of_get_seconds 27B6        main@day_of_the_week 0083                __pbssCOMRAM 0056  
              ??_LCD_E_TOG 0005              __pcstackBANK0 0060      set_light@record_index 001F  
        ??_increment_hours 0007                ??_LCD_clear 0008                   ?_HighISR 0001  
             ?_Timer0_init 0001                  __pintcode 0008             _sunset_records 0200  
                 ?___awdiv 0005        __end_of_LCD_setline 1D8E                   ?___lodiv 0005  
                 ?___lomod 0005                  _get_hours 27CA                  _get_month 27B6  
                 ?_get_day 0005         set_light@curr_hour 000D            ___lomod@divisor 000D  
              __smallconst 0E00            ___lomod@counter 0015                   ?_isdigit 0005  
                 ?_isspace 0005           ??_LCD_sendnibble 0005                   _ADC_init 2762  
         ??_LCD_sendstring 000C                   ?_sprintf 0068           LCD_sendbyte@Byte 0007  
               set_light@i 0021                   _LCD_Init 231C           LCD_sendbyte@type 0006  
           ___wmul@product 0009                   _LATAbits 000F79                   _LATBbits 000F7A  
                 _LATCbits 000F7B                   _LATDbits 000F7C                   _LATEbits 000F7D  
                 _LATFbits 000F7E                   _LATGbits 000F7F                   _LATHbits 000F80  
                 _PIE0bits 000E29                   _PIE2bits 000E2B                   i2u221_40 1B3C  
                 i2u221_41 1B38                   i2u230_40 1C72                   i2u222_40 1B60  
                 i2u230_41 1C6E                   i2u222_41 1B5C                   i2u223_40 1B80  
                 i2u223_41 1B7C                   i2u224_40 1BA0                   i2u232_40 0022  
                 i2u224_41 1B9C                   i2u232_41 001E                   i2u225_40 1BC4  
                 i2u233_40 003A                   i2u225_41 1BC0                   i2u233_41 0036  
                 i2u226_40 1BDE                   i2u226_41 1BDA                   i2u227_40 1BFC  
                 i2u227_41 1BF8                   i2u228_40 1C10                   i2u228_41 1C0C  
                 i2u229_40 1C5A                   i2u229_41 1C56                   _PIR0bits 000E33  
                _set_light 0E30                _get_minutes 27C0                _get_seconds 27AC  
               _ADC2String 21BA                  _test_mode 00E0                  _vfpfcnvrt 1196  
               ?_get_hours 0005                 ?_get_month 0005                 _ADCON0bits 000F60  
        ___wmul@multiplier 0005               _isspace$2115 0009                 _CM1NCHbits 000ED2  
               _CM1PCHbits 000ED3                  copy_data0 23D6                  copy_data1 23F6  
              _LCD_setline 1C80                   __Hrparam 0000                 _ADC_getval 26A2  
               ?_set_light 000D                 vfprintf@ap 0064                   __Lrparam 0000  
               vfprintf@fp 0060                 ?_vfpfcnvrt 0040                 _ANSELAbits 000E92  
               sprintf@fmt 006A                 _T0CON0bits 000FD5                 _T0CON1bits 000FD6  
                 __ptext10 27D4                   __ptext11 25A0                   __ptext20 2796  
                 __ptext12 27DE                   __ptext21 2762                   __ptext13 1844  
                 __ptext30 202C                   __ptext22 26A2                   __ptext14 1C80  
                 __ptext31 27E4                   __ptext23 21BA                   __ptext15 2628  
                 __ptext32 1F5C                   __ptext24 2508                   __ptext16 231C  
                 __ptext33 1D8E                   __ptext25 24B4                   __ptext17 2724  
                 __ptext34 19CA                   __ptext26 1196                   __ptext18 244C  
                 __ptext35 255A                   __ptext27 1466                   __ptext19 277C  
                 __ptext36 26D2                   __ptext28 2272                   __ptext37 26FE  
                 __ptext29 25E4                   __ptext39 1B28                   _get_year 27A2  
        set_light@curr_day 000F                   _week_day 0058       increment_hours@value 0005  
                 isa$xinst 000000                   int$flags 005A                ?_ADC2String 007B  
                 _vfprintf 24B4            _increment_hours 278A                ??_get_hours 0007  
              ??_get_month 0007    ADC2String@leading_zeros 007F                 _INTCONbits 000FF2  
                 isdigit@c 0005                   intlevel2 0000                  sprintf@ap 006E  
             _DAC1CON0bits 000EC6               _DAC1CON1bits 000EC7                   isspace@c 0005  
              ?_ADC_getval 0005                ??_set_light 0017            set_light@i_1545 0023  
              ??_vfpfcnvrt 0046                   sprintf@f 0070                   sprintf@s 0068  
  __end_of_increment_hours 2796  
