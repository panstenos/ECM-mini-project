

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Nov 08 20:27:19 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=3
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=3
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=3
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=3
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=3
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=3
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    57   000000                     
    58                           ; Version 2.35
    59                           ; Generated 05/05/2021 GMT
    60                           ; 
    61                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution. Publication is not required when
    75                           ;        this file is used in an embedded application.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F67K40 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93   000000                     
    94                           	psect	idataCOMRAM
    95   00230C                     __pidataCOMRAM:
    96                           	callstack 0
    97                           
    98                           ;initializer for _week_day
    99   00230C  0002               	dw	2
   100                           
   101                           	psect	idataBANK0
   102   002254                     __pidataBANK0:
   103                           	callstack 0
   104                           
   105                           ;initializer for _month_days
   106   002254  0000               	dw	0
   107   002256  001F               	dw	31
   108   002258  001C               	dw	28
   109   00225A  001F               	dw	31
   110   00225C  001E               	dw	30
   111   00225E  001F               	dw	31
   112   002260  001E               	dw	30
   113   002262  001F               	dw	31
   114   002264  001F               	dw	31
   115   002266  001E               	dw	30
   116   002268  001F               	dw	31
   117   00226A  001E               	dw	30
   118   00226C  001F               	dw	31
   119                           
   120                           ;initializer for main@F14258
   121   00226E  4D                 	db	77
   122   00226F  4F                 	db	79
   123   002270  4E                 	db	78
   124   002271  00                 	db	0
   125                           
   126                           ;initializer for _year
   127   002272  07E4               	dw	2020
   128                           
   129                           ;initializer for _day
   130   002274  0001               	dw	1
   131                           
   132                           ;initializer for _test_mode
   133   002276  0001               	dw	1
   134   000000                     _T0CON0bits	set	4053
   135   000000                     _T0CON1bits	set	4054
   136   000000                     _LATHbits	set	3968
   137   000000                     _CM1CON1bits	set	3793
   138   000000                     _PIE0bits	set	3625
   139   000000                     _DAC1CON0bits	set	3782
   140   000000                     _LATAbits	set	3961
   141   000000                     _LATGbits	set	3967
   142   000000                     _TRISAbits	set	3969
   143   000000                     _TRISGbits	set	3975
   144   000000                     _PORTAbits	set	3977
   145   000000                     _PORTGbits	set	3983
   146   000000                     _TRISEbits	set	3973
   147   000000                     _TRISCbits	set	3971
   148   000000                     _TRISBbits	set	3970
   149   000000                     _TRISFbits	set	3974
   150   000000                     _TMR0L	set	4051
   151   000000                     _TMR0H	set	4052
   152   000000                     _INTCONbits	set	4082
   153   000000                     _PORTBbits	set	3978
   154   000000                     _PORTFbits	set	3982
   155   000000                     _LATEbits	set	3965
   156   000000                     _LATCbits	set	3963
   157   000000                     _LATBbits	set	3962
   158   000000                     _LATFbits	set	3966
   159   000000                     _CM1CON0bits	set	3792
   160   000000                     _CM1NCHbits	set	3794
   161   000000                     _DAC1CON1bits	set	3783
   162   000000                     _ADREFbits	set	3928
   163   000000                     _CM1PCHbits	set	3795
   164   000000                     _PIE2bits	set	3627
   165   000000                     _PIR0bits	set	3635
   166   000000                     _ANSELAbits	set	3730
   167   000000                     _ADPCH	set	3935
   168   000000                     _ADRESH	set	3940
   169   000000                     _ADCON0bits	set	3936
   170                           
   171                           	psect	smallconst
   172   000E00                     __psmallconst:
   173                           	callstack 0
   174   000E00  00                 	db	0
   175   000E01                     STR_9:
   176                           
   177                           ; BSR set to: 0
   178   000E01  25                 	db	37
   179   000E02  30                 	db	48	;'0'
   180   000E03  31                 	db	49	;'1'
   181   000E04  75                 	db	117	;'u'
   182   000E05  00                 	db	0
   183   000E06                     STR_10:
   184                           
   185                           ; BSR set to: 0
   186   000E06  25                 	db	37
   187   000E07  30                 	db	48	;'0'
   188   000E08  32                 	db	50	;'2'
   189   000E09  75                 	db	117	;'u'
   190   000E0A  00                 	db	0
   191   000E0B                     STR_11:
   192                           
   193                           ; BSR set to: 0
   194   000E0B  25                 	db	37
   195   000E0C  30                 	db	48	;'0'
   196   000E0D  33                 	db	51	;'3'
   197   000E0E  75                 	db	117	;'u'
   198   000E0F  00                 	db	0
   199   000E10                     STR_3:
   200                           
   201                           ; BSR set to: 0
   202   000E10  57                 	db	87	;'W'
   203   000E11  45                 	db	69	;'E'
   204   000E12  44                 	db	68	;'D'
   205   000E13  00                 	db	0
   206   000E14                     STR_2:
   207                           
   208                           ; BSR set to: 0
   209   000E14  54                 	db	84	;'T'
   210   000E15  55                 	db	85	;'U'
   211   000E16  45                 	db	69	;'E'
   212   000E17  00                 	db	0
   213   000E18                     STR_5:
   214                           
   215                           ; BSR set to: 0
   216   000E18  46                 	db	70	;'F'
   217   000E19  52                 	db	82	;'R'
   218   000E1A  49                 	db	73	;'I'
   219   000E1B  00                 	db	0
   220   000E1C                     STR_1:
   221                           
   222                           ; BSR set to: 0
   223   000E1C  4D                 	db	77	;'M'
   224   000E1D  4F                 	db	79	;'O'
   225   000E1E  4E                 	db	78	;'N'
   226   000E1F  00                 	db	0
   227   000E20                     STR_7:
   228                           
   229                           ; BSR set to: 0
   230   000E20  53                 	db	83	;'S'
   231   000E21  55                 	db	85	;'U'
   232   000E22  4E                 	db	78	;'N'
   233   000E23  00                 	db	0
   234   000E24                     STR_6:
   235                           
   236                           ; BSR set to: 0
   237   000E24  53                 	db	83	;'S'
   238   000E25  41                 	db	65	;'A'
   239   000E26  54                 	db	84	;'T'
   240   000E27  00                 	db	0
   241   000E28                     STR_4:
   242                           
   243                           ; BSR set to: 0
   244   000E28  54                 	db	84	;'T'
   245   000E29  48                 	db	72	;'H'
   246   000E2A  55                 	db	85	;'U'
   247   000E2B  00                 	db	0
   248   000E2C                     STR_8:
   249                           
   250                           ; BSR set to: 0
   251   000E2C  25                 	db	37
   252   000E2D  75                 	db	117	;'u'
   253   000E2E  00                 	db	0
   254   000E2F  00                 	db	0	; dummy byte at the end
   255   000000                     
   256                           ; #config settings
   257                           
   258                           	psect	cinit
   259   001FBE                     __pcinit:
   260                           	callstack 0
   261   001FBE                     start_initialization:
   262                           	callstack 0
   263   001FBE                     __initialization:
   264                           	callstack 0
   265                           
   266                           ; Initialize objects allocated to BANK0 (36 bytes)
   267                           ; load TBLPTR registers with __pidataBANK0
   268   001FBE  0E54               	movlw	low __pidataBANK0
   269   001FC0  6EF6               	movwf	tblptrl,c
   270   001FC2  0E22               	movlw	high __pidataBANK0
   271   001FC4  6EF7               	movwf	tblptrh,c
   272   001FC6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   273   001FC8  6EF8               	movwf	tblptru,c
   274   001FCA  EE00  F0B0         	lfsr	0,__pdataBANK0
   275   001FCE  EE10 F024          	lfsr	1,36
   276   001FD2                     copy_data0:
   277   001FD2  0009               	tblrd		*+
   278   001FD4  CFF5 FFEE          	movff	tablat,postinc0
   279   001FD8  50E5               	movf	postdec1,w,c
   280   001FDA  50E1               	movf	fsr1l,w,c
   281   001FDC  E1FA               	bnz	copy_data0
   282                           
   283                           ; Initialize objects allocated to COMRAM (2 bytes)
   284                           ; load TBLPTR registers with __pidataCOMRAM
   285   001FDE  0E0C               	movlw	low __pidataCOMRAM
   286   001FE0  6EF6               	movwf	tblptrl,c
   287   001FE2  0E23               	movlw	high __pidataCOMRAM
   288   001FE4  6EF7               	movwf	tblptrh,c
   289   001FE6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   290   001FE8  6EF8               	movwf	tblptru,c
   291   001FEA  0009               	tblrd		*+	;fetch initializer
   292   001FEC  CFF5 F052          	movff	tablat,__pdataCOMRAM
   293   001FF0  0009               	tblrd		*+	;fetch initializer
   294   001FF2  CFF5 F053          	movff	tablat,__pdataCOMRAM+1
   295                           
   296                           ; Clear objects allocated to BANK1 (32 bytes)
   297   001FF6  EE01  F000         	lfsr	0,__pbssBANK1
   298   001FFA  0E20               	movlw	32
   299   001FFC                     clear_0:
   300   001FFC  6AEE               	clrf	postinc0,c
   301   001FFE  06E8               	decf	wreg,f,c
   302   002000  E1FD               	bnz	clear_0
   303                           
   304                           ; Clear objects allocated to BANK0 (26 bytes)
   305   002002  EE00  F0D4         	lfsr	0,__pbssBANK0
   306   002006  0E1A               	movlw	26
   307   002008                     clear_1:
   308   002008  6AEE               	clrf	postinc0,c
   309   00200A  06E8               	decf	wreg,f,c
   310   00200C  E1FD               	bnz	clear_1
   311                           
   312                           ; Clear objects allocated to COMRAM (3 bytes)
   313   00200E  6A51               	clrf	(__pbssCOMRAM+2)& (0+255),c
   314   002010  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   315   002012  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   316   002014                     end_of_initialization:
   317                           	callstack 0
   318   002014                     __end_of__initialization:
   319                           	callstack 0
   320   002014  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   321   002016  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   322   002018  0100               	movlb	0
   323   00201A  EF7D  F009         	goto	_main	;jump to C main() function
   324                           
   325                           	psect	bssCOMRAM
   326   00004F                     __pbssCOMRAM:
   327                           	callstack 0
   328   00004F                     _month:
   329                           	callstack 0
   330   00004F                     	ds	2
   331   000051                     _flags:
   332                           	callstack 0
   333   000051                     	ds	1
   334                           
   335                           	psect	dataCOMRAM
   336   000052                     __pdataCOMRAM:
   337                           	callstack 0
   338   000052                     _week_day:
   339                           	callstack 0
   340   000052                     	ds	2
   341                           
   342                           	psect	bssBANK0
   343   0000D4                     __pbssBANK0:
   344                           	callstack 0
   345   0000D4                     	ds	16
   346   0000E4                     _width:
   347                           	callstack 0
   348   0000E4                     	ds	2
   349   0000E6                     _prec:
   350                           	callstack 0
   351   0000E6                     	ds	2
   352   0000E8                     _hours:
   353                           	callstack 0
   354   0000E8                     	ds	2
   355   0000EA                     _minutes:
   356                           	callstack 0
   357   0000EA                     	ds	2
   358   0000EC                     _seconds:
   359                           	callstack 0
   360   0000EC                     	ds	2
   361                           
   362                           	psect	dataBANK0
   363   0000B0                     __pdataBANK0:
   364                           	callstack 0
   365   0000B0                     _month_days:
   366                           	callstack 0
   367   0000B0                     	ds	26
   368   0000CA                     main@F14258:
   369                           	callstack 0
   370   0000CA                     	ds	4
   371   0000CE                     _year:
   372                           	callstack 0
   373   0000CE                     	ds	2
   374   0000D0                     _day:
   375                           	callstack 0
   376   0000D0                     	ds	2
   377   0000D2                     _test_mode:
   378                           	callstack 0
   379   0000D2                     	ds	2
   380                           
   381                           	psect	bssBANK1
   382   000100                     __pbssBANK1:
   383                           	callstack 0
   384   000100                     _dbuf:
   385                           	callstack 0
   386   000100                     	ds	32
   387                           
   388                           	psect	cstackBANK0
   389   000060                     __pcstackBANK0:
   390                           	callstack 0
   391   000060                     vfpfcnvrt@convarg:
   392                           	callstack 0
   393                           
   394                           ; 8 bytes @ 0x0
   395   000060                     	ds	8
   396   000068                     vfpfcnvrt@done:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x8
   400   000068                     	ds	2
   401   00006A                     vfpfcnvrt@cp:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0xA
   405   00006A                     	ds	2
   406   00006C                     ?_vfprintf:
   407                           	callstack 0
   408   00006C                     vfprintf@fp:
   409                           	callstack 0
   410                           
   411                           ; 2 bytes @ 0xC
   412   00006C                     	ds	2
   413   00006E                     vfprintf@fmt:
   414                           	callstack 0
   415                           
   416                           ; 2 bytes @ 0xE
   417   00006E                     	ds	2
   418   000070                     vfprintf@ap:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0x10
   422   000070                     	ds	2
   423   000072                     ?_sprintf:
   424                           	callstack 0
   425   000072                     sprintf@s:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x12
   429   000072                     	ds	2
   430   000074                     sprintf@fmt:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0x14
   434   000074                     	ds	4
   435   000078                     sprintf@ap:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x18
   439   000078                     	ds	2
   440   00007A                     sprintf@f:
   441                           	callstack 0
   442                           
   443                           ; 11 bytes @ 0x1A
   444   00007A                     	ds	11
   445   000085                     ADC2String@buf:
   446                           	callstack 0
   447                           
   448                           ; 2 bytes @ 0x25
   449   000085                     	ds	2
   450   000087                     ADC2String@x:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x27
   454   000087                     	ds	2
   455   000089                     ADC2String@leading_zeros:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x29
   459   000089                     	ds	2
   460   00008B                     main@day_of_the_week:
   461                           	callstack 0
   462                           
   463                           ; 4 bytes @ 0x2B
   464   00008B                     	ds	4
   465   00008F                     main@Yea:
   466                           	callstack 0
   467                           
   468                           ; 4 bytes @ 0x2F
   469   00008F                     	ds	4
   470   000093                     main@ADC:
   471                           	callstack 0
   472                           
   473                           ; 3 bytes @ 0x33
   474   000093                     	ds	3
   475   000096                     main@lst:
   476                           	callstack 0
   477                           
   478                           ; 16 bytes @ 0x36
   479   000096                     	ds	16
   480   0000A6                     main@Sec:
   481                           	callstack 0
   482                           
   483                           ; 2 bytes @ 0x46
   484   0000A6                     	ds	2
   485   0000A8                     main@Min:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x48
   489   0000A8                     	ds	2
   490   0000AA                     main@Hou:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x4A
   494   0000AA                     	ds	2
   495   0000AC                     main@Day:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x4C
   499   0000AC                     	ds	2
   500   0000AE                     main@Mon:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x4E
   504   0000AE                     	ds	2
   505                           
   506                           	psect	cstackCOMRAM
   507   000001                     __pcstackCOMRAM:
   508                           	callstack 0
   509   000001                     ??_increment_seconds:
   510   000001                     
   511                           ; 1 bytes @ 0x0
   512   000001                     	ds	2
   513   000003                     ??_HighISR:
   514                           
   515                           ; 1 bytes @ 0x2
   516   000003                     	ds	3
   517   000006                     ?_get_seconds:
   518                           	callstack 0
   519   000006                     ?_get_minutes:
   520                           	callstack 0
   521   000006                     ?_get_hours:
   522                           	callstack 0
   523   000006                     ?_get_day:
   524                           	callstack 0
   525   000006                     ?_get_month:
   526                           	callstack 0
   527   000006                     ?_get_year:
   528                           	callstack 0
   529   000006                     ?_ADC_getval:
   530                           	callstack 0
   531   000006                     ?_get_week_day:
   532                           	callstack 0
   533   000006                     ?_isdigit:
   534                           	callstack 0
   535   000006                     ?_isspace:
   536                           	callstack 0
   537   000006                     ?___wmul:
   538                           	callstack 0
   539   000006                     ?___lodiv:
   540                           	callstack 0
   541   000006                     ?___lomod:
   542                           	callstack 0
   543   000006                     LCD_sendnibble@number:
   544                           	callstack 0
   545   000006                     ___wmul@multiplier:
   546                           	callstack 0
   547   000006                     isdigit@c:
   548                           	callstack 0
   549   000006                     isspace@c:
   550                           	callstack 0
   551   000006                     fputc@c:
   552                           	callstack 0
   553   000006                     ___lodiv@dividend:
   554                           	callstack 0
   555   000006                     ___lomod@dividend:
   556                           	callstack 0
   557                           
   558                           ; 8 bytes @ 0x5
   559   000006                     	ds	1
   560   000007                     LCD_sendbyte@type:
   561                           	callstack 0
   562                           
   563                           ; 1 bytes @ 0x6
   564   000007                     	ds	1
   565   000008                     ??_isdigit:
   566   000008                     ??_isspace:
   567   000008                     LCD_sendbyte@Byte:
   568                           	callstack 0
   569   000008                     ADC_getval@tmpval:
   570                           	callstack 0
   571   000008                     ___wmul@multiplicand:
   572                           	callstack 0
   573   000008                     fputc@fp:
   574                           	callstack 0
   575                           
   576                           ; 2 bytes @ 0x7
   577   000008                     	ds	1
   578   000009                     ??_LCD_Init:
   579   000009                     ??_LCD_clear:
   580   000009                     LCD_setline@line:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x8
   584   000009                     	ds	1
   585   00000A                     ??_fputc:
   586   00000A                     _isspace$2016:
   587                           	callstack 0
   588   00000A                     ___wmul@product:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x9
   592   00000A                     	ds	1
   593   00000B                     LCD_sendstring@strlst:
   594                           	callstack 0
   595                           
   596                           ; 2 bytes @ 0xA
   597   00000B                     	ds	1
   598   00000C                     ?_atoi:
   599                           	callstack 0
   600   00000C                     atoi@s:
   601                           	callstack 0
   602                           
   603                           ; 2 bytes @ 0xB
   604   00000C                     	ds	1
   605   00000D                     ??_LCD_sendstring:
   606                           
   607                           ; 1 bytes @ 0xC
   608   00000D                     	ds	1
   609   00000E                     ??_atoi:
   610   00000E                     ___lodiv@divisor:
   611                           	callstack 0
   612   00000E                     ___lomod@divisor:
   613                           	callstack 0
   614                           
   615                           ; 8 bytes @ 0xD
   616   00000E                     	ds	1
   617   00000F                     LCD_sendstring@i:
   618                           	callstack 0
   619   00000F                     fputs@s:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0xE
   623   00000F                     	ds	2
   624   000011                     atoi@neg:
   625                           	callstack 0
   626   000011                     fputs@fp:
   627                           	callstack 0
   628                           
   629                           ; 2 bytes @ 0x10
   630   000011                     	ds	2
   631   000013                     fputs@c:
   632                           	callstack 0
   633   000013                     atoi@n:
   634                           	callstack 0
   635                           
   636                           ; 2 bytes @ 0x12
   637   000013                     	ds	1
   638   000014                     fputs@i:
   639                           	callstack 0
   640                           
   641                           ; 2 bytes @ 0x13
   642   000014                     	ds	2
   643   000016                     ___lomod@counter:
   644                           	callstack 0
   645   000016                     pad@fp:
   646                           	callstack 0
   647   000016                     ___lodiv@quotient:
   648                           	callstack 0
   649                           
   650                           ; 8 bytes @ 0x15
   651   000016                     	ds	2
   652   000018                     pad@buf:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0x17
   656   000018                     	ds	2
   657   00001A                     pad@p:
   658                           	callstack 0
   659                           
   660                           ; 2 bytes @ 0x19
   661   00001A                     	ds	2
   662   00001C                     ??_pad:
   663                           
   664                           ; 1 bytes @ 0x1B
   665   00001C                     	ds	1
   666   00001D                     pad@i:
   667                           	callstack 0
   668                           
   669                           ; 2 bytes @ 0x1C
   670   00001D                     	ds	1
   671   00001E                     ___lodiv@counter:
   672                           	callstack 0
   673                           
   674                           ; 1 bytes @ 0x1D
   675   00001E                     	ds	1
   676   00001F                     pad@w:
   677                           	callstack 0
   678                           
   679                           ; 2 bytes @ 0x1E
   680   00001F                     	ds	2
   681   000021                     utoa@fp:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0x20
   685   000021                     	ds	2
   686   000023                     utoa@d:
   687                           	callstack 0
   688                           
   689                           ; 8 bytes @ 0x22
   690   000023                     	ds	8
   691   00002B                     ??_utoa:
   692                           
   693                           ; 1 bytes @ 0x2A
   694   00002B                     	ds	8
   695   000033                     utoa@p:
   696                           	callstack 0
   697                           
   698                           ; 2 bytes @ 0x32
   699   000033                     	ds	2
   700   000035                     utoa@w:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x34
   704   000035                     	ds	2
   705   000037                     utoa@n:
   706                           	callstack 0
   707                           
   708                           ; 8 bytes @ 0x36
   709   000037                     	ds	8
   710   00003F                     utoa@i:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0x3E
   714   00003F                     	ds	2
   715   000041                     vfpfcnvrt@fp:
   716                           	callstack 0
   717                           
   718                           ; 2 bytes @ 0x40
   719   000041                     	ds	2
   720   000043                     vfpfcnvrt@fmt:
   721                           	callstack 0
   722                           
   723                           ; 2 bytes @ 0x42
   724   000043                     	ds	2
   725   000045                     vfpfcnvrt@ap:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x44
   729   000045                     	ds	2
   730   000047                     ??_vfpfcnvrt:
   731                           
   732                           ; 1 bytes @ 0x46
   733   000047                     	ds	4
   734   00004B                     vfprintf@cfmt:
   735                           	callstack 0
   736                           
   737                           ; 2 bytes @ 0x4A
   738   00004B                     	ds	2
   739   00004D                     ??_main:
   740                           
   741                           ; 1 bytes @ 0x4C
   742   00004D                     	ds	2
   743                           
   744 ;;
   745 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   746 ;;
   747 ;; *************** function _main *****************
   748 ;; Defined at:
   749 ;;		line 19 in file "main.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;		None
   752 ;; Auto vars:     Size  Location     Type
   753 ;;  lst            16   54[BANK0 ] PTR unsigned char [8]
   754 ;;		 -> STR_7(4), STR_6(4), STR_5(4), STR_4(4), 
   755 ;;		 -> STR_3(4), STR_2(4), STR_1(4), NULL(0), 
   756 ;;		 -> main@ADC(3), main@Yea(4), main@Mon(2), main@Day(2), 
   757 ;;		 -> main@Hou(2), main@Min(2), main@Sec(2), 
   758 ;;  Yea             4   47[BANK0 ] unsigned char [4]
   759 ;;  day_of_the_w    4   43[BANK0 ] unsigned char [4]
   760 ;;  ADC             3   51[BANK0 ] unsigned char [3]
   761 ;;  Mon             2   78[BANK0 ] unsigned char [2]
   762 ;;  Day             2   76[BANK0 ] unsigned char [2]
   763 ;;  Hou             2   74[BANK0 ] unsigned char [2]
   764 ;;  Min             2   72[BANK0 ] unsigned char [2]
   765 ;;  Sec             2   70[BANK0 ] unsigned char [2]
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : 0/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   776 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   777 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   778 ;;      Totals:         2      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   779 ;;Total ram usage:       39 bytes
   780 ;; Hardware stack levels required when called: 11
   781 ;; This function calls:
   782 ;;		_ADC2String
   783 ;;		_ADC_getval
   784 ;;		_ADC_init
   785 ;;		_Interrupts_init
   786 ;;		_LCD_Init
   787 ;;		_LCD_clear
   788 ;;		_LCD_sendstring
   789 ;;		_Timer0_init
   790 ;;		_get_day
   791 ;;		_get_hours
   792 ;;		_get_minutes
   793 ;;		_get_month
   794 ;;		_get_seconds
   795 ;;		_get_week_day
   796 ;;		_get_year
   797 ;; This function is called by:
   798 ;;		Startup code after reset
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text0
   803   0012FA                     __ptext0:
   804                           	callstack 0
   805   0012FA                     _main:
   806                           	callstack 20
   807   0012FA                     
   808                           ;main.c: 22:     Timer0_init();
   809   0012FA  EC85  F010         	call	_Timer0_init	;wreg free
   810   0012FE                     
   811                           ;main.c: 23:     Interrupts_init();
   812   0012FE  EC62  F011         	call	_Interrupts_init	;wreg free
   813   001302                     
   814                           ;main.c: 24:     LCD_Init();
   815   001302  EC58  F00F         	call	_LCD_Init	;wreg free
   816   001306                     
   817                           ;main.c: 25:     ADC_init();
   818   001306  EC4E  F011         	call	_ADC_init	;wreg free
   819   00130A                     
   820                           ;main.c: 27:     char Sec[2];;main.c: 28:     char Min[2];;main.c: 29:     char Hou[2];;
      +                          main.c: 30:     char Day[2];;main.c: 31:     char Mon[2];;main.c: 32:     char Yea[4];;m
      +                          ain.c: 33:     char ADC[3];;main.c: 34:     char day_of_the_week[] = {"MON","TUE","WED",
      +                          "THU","FRI","SAT","SUN"};
   821   00130A  C0CA  F08B         	movff	main@F14258,main@day_of_the_week
   822   00130E  C0CB  F08C         	movff	main@F14258+1,main@day_of_the_week+1
   823   001312  C0CC  F08D         	movff	main@F14258+2,main@day_of_the_week+2
   824   001316  C0CD  F08E         	movff	main@F14258+3,main@day_of_the_week+3
   825   00131A                     l2909:
   826                           
   827                           ;main.c: 36:         LCD_clear();
   828   00131A  ECC9  F010         	call	_LCD_clear	;wreg free
   829   00131E                     
   830                           ;main.c: 49:         ADC2String(Sec, get_seconds(), 2);
   831   00131E  0EA6               	movlw	low main@Sec
   832   001320  0100               	movlb	0	; () banked
   833   001322  6F85               	movwf	ADC2String@buf& (0+255),b
   834   001324  0E00               	movlw	high main@Sec
   835   001326  6F86               	movwf	(ADC2String@buf+1)& (0+255),b
   836   001328  EC6D  F011         	call	_get_seconds	;wreg free
   837   00132C  C006  F087         	movff	?_get_seconds,ADC2String@x
   838   001330  C007  F088         	movff	?_get_seconds+1,ADC2String@x+1
   839   001334  0E00               	movlw	0
   840   001336  0100               	movlb	0	; () banked
   841   001338  6F8A               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   842   00133A  0E02               	movlw	2
   843   00133C  6F89               	movwf	ADC2String@leading_zeros& (0+255),b
   844   00133E  ECA7  F00E         	call	_ADC2String	;wreg free
   845   001342                     
   846                           ;main.c: 50:         ADC2String(Min, get_minutes(), 2);
   847   001342  0EA8               	movlw	low main@Min
   848   001344  0100               	movlb	0	; () banked
   849   001346  6F85               	movwf	ADC2String@buf& (0+255),b
   850   001348  0E00               	movlw	high main@Min
   851   00134A  6F86               	movwf	(ADC2String@buf+1)& (0+255),b
   852   00134C  EC77  F011         	call	_get_minutes	;wreg free
   853   001350  C006  F087         	movff	?_get_minutes,ADC2String@x
   854   001354  C007  F088         	movff	?_get_minutes+1,ADC2String@x+1
   855   001358  0E00               	movlw	0
   856   00135A  0100               	movlb	0	; () banked
   857   00135C  6F8A               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   858   00135E  0E02               	movlw	2
   859   001360  6F89               	movwf	ADC2String@leading_zeros& (0+255),b
   860   001362  ECA7  F00E         	call	_ADC2String	;wreg free
   861   001366                     
   862                           ;main.c: 51:         ADC2String(Hou, get_hours(), 2);
   863   001366  0EAA               	movlw	low main@Hou
   864   001368  0100               	movlb	0	; () banked
   865   00136A  6F85               	movwf	ADC2String@buf& (0+255),b
   866   00136C  0E00               	movlw	high main@Hou
   867   00136E  6F86               	movwf	(ADC2String@buf+1)& (0+255),b
   868   001370  EC7C  F011         	call	_get_hours	;wreg free
   869   001374  C006  F087         	movff	?_get_hours,ADC2String@x
   870   001378  C007  F088         	movff	?_get_hours+1,ADC2String@x+1
   871   00137C  0E00               	movlw	0
   872   00137E  0100               	movlb	0	; () banked
   873   001380  6F8A               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   874   001382  0E02               	movlw	2
   875   001384  6F89               	movwf	ADC2String@leading_zeros& (0+255),b
   876   001386  ECA7  F00E         	call	_ADC2String	;wreg free
   877   00138A                     
   878                           ;main.c: 52:         ADC2String(Day, get_day(), 2);
   879   00138A  0EAC               	movlw	low main@Day
   880   00138C  0100               	movlb	0	; () banked
   881   00138E  6F85               	movwf	ADC2String@buf& (0+255),b
   882   001390  0E00               	movlw	high main@Day
   883   001392  6F86               	movwf	(ADC2String@buf+1)& (0+255),b
   884   001394  EC81  F011         	call	_get_day	;wreg free
   885   001398  C006  F087         	movff	?_get_day,ADC2String@x
   886   00139C  C007  F088         	movff	?_get_day+1,ADC2String@x+1
   887   0013A0  0E00               	movlw	0
   888   0013A2  0100               	movlb	0	; () banked
   889   0013A4  6F8A               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   890   0013A6  0E02               	movlw	2
   891   0013A8  6F89               	movwf	ADC2String@leading_zeros& (0+255),b
   892   0013AA  ECA7  F00E         	call	_ADC2String	;wreg free
   893   0013AE                     
   894                           ;main.c: 53:         ADC2String(Mon, get_month()+1, 2);
   895   0013AE  0EAE               	movlw	low main@Mon
   896   0013B0  0100               	movlb	0	; () banked
   897   0013B2  6F85               	movwf	ADC2String@buf& (0+255),b
   898   0013B4  0E00               	movlw	high main@Mon
   899   0013B6  6F86               	movwf	(ADC2String@buf+1)& (0+255),b
   900   0013B8  EC72  F011         	call	_get_month	;wreg free
   901   0013BC  0E01               	movlw	1
   902   0013BE  2406               	addwf	?_get_month^0,w,c
   903   0013C0  0100               	movlb	0	; () banked
   904   0013C2  6F87               	movwf	ADC2String@x& (0+255),b
   905   0013C4  0E00               	movlw	0
   906   0013C6  2007               	addwfc	(?_get_month+1)^0,w,c
   907   0013C8  6F88               	movwf	(ADC2String@x+1)& (0+255),b
   908   0013CA  0E00               	movlw	0
   909   0013CC  6F8A               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   910   0013CE  0E02               	movlw	2
   911   0013D0  6F89               	movwf	ADC2String@leading_zeros& (0+255),b
   912   0013D2  ECA7  F00E         	call	_ADC2String	;wreg free
   913   0013D6                     
   914                           ;main.c: 54:         ADC2String(Yea, get_year(), 4);
   915   0013D6  0E8F               	movlw	low main@Yea
   916   0013D8  0100               	movlb	0	; () banked
   917   0013DA  6F85               	movwf	ADC2String@buf& (0+255),b
   918   0013DC  0E00               	movlw	high main@Yea
   919   0013DE  6F86               	movwf	(ADC2String@buf+1)& (0+255),b
   920   0013E0  EC68  F011         	call	_get_year	;wreg free
   921   0013E4  C006  F087         	movff	?_get_year,ADC2String@x
   922   0013E8  C007  F088         	movff	?_get_year+1,ADC2String@x+1
   923   0013EC  0E00               	movlw	0
   924   0013EE  0100               	movlb	0	; () banked
   925   0013F0  6F8A               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   926   0013F2  0E04               	movlw	4
   927   0013F4  6F89               	movwf	ADC2String@leading_zeros& (0+255),b
   928   0013F6  ECA7  F00E         	call	_ADC2String	;wreg free
   929   0013FA                     
   930                           ;main.c: 55:         ADC2String(ADC, ADC_getval(), 3);
   931   0013FA  0E93               	movlw	low main@ADC
   932   0013FC  0100               	movlb	0	; () banked
   933   0013FE  6F85               	movwf	ADC2String@buf& (0+255),b
   934   001400  0E00               	movlw	high main@ADC
   935   001402  6F86               	movwf	(ADC2String@buf+1)& (0+255),b
   936   001404  ECE9  F010         	call	_ADC_getval	;wreg free
   937   001408  C006  F087         	movff	?_ADC_getval,ADC2String@x
   938   00140C  C007  F088         	movff	?_ADC_getval+1,ADC2String@x+1
   939   001410  0E00               	movlw	0
   940   001412  0100               	movlb	0	; () banked
   941   001414  6F8A               	movwf	(ADC2String@leading_zeros+1)& (0+255),b
   942   001416  0E03               	movlw	3
   943   001418  6F89               	movwf	ADC2String@leading_zeros& (0+255),b
   944   00141A  ECA7  F00E         	call	_ADC2String	;wreg free
   945   00141E                     
   946                           ;main.c: 57:         char *lst[8] = {get_week_day(),Day,Mon,Yea,Hou,Min,Sec,ADC};
   947   00141E  EE20  F096         	lfsr	2,main@lst
   948   001422  0E0F               	movlw	15
   949   001424                     u2261:
   950   001424  6ADE               	clrf	postinc2,c
   951   001426  06E8               	decf	wreg,f,c
   952   001428  E2FD               	bc	u2261
   953   00142A  EC6B  F00D         	call	_get_week_day	;wreg free
   954   00142E  C006  F096         	movff	?_get_week_day,main@lst
   955   001432  C007  F097         	movff	?_get_week_day+1,main@lst+1
   956   001436  0EAC               	movlw	low main@Day
   957   001438  0100               	movlb	0	; () banked
   958   00143A  6F98               	movwf	(main@lst+2)& (0+255),b
   959   00143C  0E00               	movlw	high main@Day
   960   00143E  6F99               	movwf	(main@lst+3)& (0+255),b
   961   001440                     
   962                           ; BSR set to: 0
   963   001440  0EAE               	movlw	low main@Mon
   964   001442  6F9A               	movwf	(main@lst+4)& (0+255),b
   965   001444  0E00               	movlw	high main@Mon
   966   001446  6F9B               	movwf	(main@lst+5)& (0+255),b
   967   001448                     
   968                           ; BSR set to: 0
   969   001448  0E8F               	movlw	low main@Yea
   970   00144A  6F9C               	movwf	(main@lst+6)& (0+255),b
   971   00144C  0E00               	movlw	high main@Yea
   972   00144E  6F9D               	movwf	(main@lst+7)& (0+255),b
   973   001450                     
   974                           ; BSR set to: 0
   975   001450  0EAA               	movlw	low main@Hou
   976   001452  6F9E               	movwf	(main@lst+8)& (0+255),b
   977   001454  0E00               	movlw	high main@Hou
   978   001456  6F9F               	movwf	(main@lst+9)& (0+255),b
   979   001458                     
   980                           ; BSR set to: 0
   981   001458  0EA8               	movlw	low main@Min
   982   00145A  6FA0               	movwf	(main@lst+10)& (0+255),b
   983   00145C  0E00               	movlw	high main@Min
   984   00145E  6FA1               	movwf	(main@lst+11)& (0+255),b
   985   001460                     
   986                           ; BSR set to: 0
   987   001460  0EA6               	movlw	low main@Sec
   988   001462  6FA2               	movwf	(main@lst+12)& (0+255),b
   989   001464  0E00               	movlw	high main@Sec
   990   001466  6FA3               	movwf	(main@lst+13)& (0+255),b
   991   001468                     
   992                           ; BSR set to: 0
   993   001468  0E93               	movlw	low main@ADC
   994   00146A  6FA4               	movwf	(main@lst+14)& (0+255),b
   995   00146C  0E00               	movlw	high main@ADC
   996   00146E  6FA5               	movwf	(main@lst+15)& (0+255),b
   997   001470                     
   998                           ; BSR set to: 0
   999                           ;main.c: 58:         LCD_sendstring(lst);
  1000   001470  0E96               	movlw	low main@lst
  1001   001472  6E0B               	movwf	LCD_sendstring@strlst^0,c
  1002   001474  0E00               	movlw	high main@lst
  1003   001476  6E0C               	movwf	(LCD_sendstring@strlst+1)^0,c
  1004   001478  EC4E  F00A         	call	_LCD_sendstring	;wreg free
  1005   00147C                     
  1006                           ;main.c: 59:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1007   00147C  0E09               	movlw	9
  1008   00147E  6E4E               	movwf	(??_main+1)^0,c
  1009   001480  0E1E               	movlw	30
  1010   001482  6E4D               	movwf	??_main^0,c
  1011   001484  0EE4               	movlw	228
  1012   001486                     u2277:
  1013   001486  2EE8               	decfsz	wreg,f,c
  1014   001488  D7FE               	bra	u2277
  1015   00148A  2E4D               	decfsz	??_main^0,f,c
  1016   00148C  D7FC               	bra	u2277
  1017   00148E  2E4E               	decfsz	(??_main+1)^0,f,c
  1018   001490  D7FA               	bra	u2277
  1019   001492  D000               	nop2	
  1020   001494  EF8D  F009         	goto	l2909
  1021   001498  EF41  F000         	goto	start
  1022   00149C                     __end_of_main:
  1023                           	callstack 0
  1024                           
  1025 ;; *************** function _get_year *****************
  1026 ;; Defined at:
  1027 ;;		line 121 in file "timers.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;		None
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;		None
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  2    5[COMRAM] unsigned int 
  1034 ;; Registers used:
  1035 ;;		None
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1041 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1044 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1045 ;;Total ram usage:        2 bytes
  1046 ;; Hardware stack levels used: 1
  1047 ;; Hardware stack levels required when called: 2
  1048 ;; This function calls:
  1049 ;;		Nothing
  1050 ;; This function is called by:
  1051 ;;		_main
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           	psect	text1
  1056   0022D0                     __ptext1:
  1057                           	callstack 0
  1058   0022D0                     _get_year:
  1059                           	callstack 28
  1060   0022D0                     
  1061                           ;timers.c: 122:     return year;
  1062   0022D0  C0CE  F006         	movff	_year,?_get_year
  1063   0022D4  C0CF  F007         	movff	_year+1,?_get_year+1
  1064   0022D8  0012               	return		;funcret
  1065   0022DA                     __end_of_get_year:
  1066                           	callstack 0
  1067                           
  1068 ;; *************** function _get_week_day *****************
  1069 ;; Defined at:
  1070 ;;		line 100 in file "timers.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;		None
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;		None
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  2    5[COMRAM] PTR const unsigned char 
  1077 ;; Registers used:
  1078 ;;		wreg, status,2, status,0
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1084 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1087 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1088 ;;Total ram usage:        2 bytes
  1089 ;; Hardware stack levels used: 1
  1090 ;; Hardware stack levels required when called: 2
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		_main
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098                           	psect	text2
  1099   001AD6                     __ptext2:
  1100                           	callstack 0
  1101   001AD6                     _get_week_day:
  1102                           	callstack 28
  1103   001AD6                     
  1104                           ;timers.c: 101:     if(week_day == 0){
  1105   001AD6  5052               	movf	_week_day^0,w,c
  1106   001AD8  1053               	iorwf	(_week_day+1)^0,w,c
  1107   001ADA  A4D8               	btfss	status,2,c
  1108   001ADC  EF72  F00D         	goto	u1561
  1109   001AE0  EF74  F00D         	goto	u1560
  1110   001AE4                     u1561:
  1111   001AE4  EF7A  F00D         	goto	l2359
  1112   001AE8                     u1560:
  1113   001AE8                     
  1114                           ;timers.c: 102:         return("MON");
  1115   001AE8  0E1C               	movlw	low STR_1
  1116   001AEA  6E06               	movwf	?_get_week_day^0,c
  1117   001AEC  0E0E               	movlw	high STR_1
  1118   001AEE  6E07               	movwf	(?_get_week_day+1)^0,c
  1119   001AF0  EFD9  F00D         	goto	l223
  1120   001AF4                     l2359:
  1121   001AF4  0452               	decf	_week_day^0,w,c
  1122   001AF6  1053               	iorwf	(_week_day+1)^0,w,c
  1123   001AF8  A4D8               	btfss	status,2,c
  1124   001AFA  EF81  F00D         	goto	u1571
  1125   001AFE  EF83  F00D         	goto	u1570
  1126   001B02                     u1571:
  1127   001B02  EF89  F00D         	goto	l2367
  1128   001B06                     u1570:
  1129   001B06                     
  1130                           ;timers.c: 104:         return("TUE");
  1131   001B06  0E14               	movlw	low STR_2
  1132   001B08  6E06               	movwf	?_get_week_day^0,c
  1133   001B0A  0E0E               	movlw	high STR_2
  1134   001B0C  6E07               	movwf	(?_get_week_day+1)^0,c
  1135   001B0E  EFD9  F00D         	goto	l223
  1136   001B12                     l2367:
  1137   001B12  0E02               	movlw	2
  1138   001B14  1852               	xorwf	_week_day^0,w,c
  1139   001B16  1053               	iorwf	(_week_day+1)^0,w,c
  1140   001B18  A4D8               	btfss	status,2,c
  1141   001B1A  EF91  F00D         	goto	u1581
  1142   001B1E  EF93  F00D         	goto	u1580
  1143   001B22                     u1581:
  1144   001B22  EF99  F00D         	goto	l2375
  1145   001B26                     u1580:
  1146   001B26                     
  1147                           ;timers.c: 106:         return("WED");
  1148   001B26  0E10               	movlw	low STR_3
  1149   001B28  6E06               	movwf	?_get_week_day^0,c
  1150   001B2A  0E0E               	movlw	high STR_3
  1151   001B2C  6E07               	movwf	(?_get_week_day+1)^0,c
  1152   001B2E  EFD9  F00D         	goto	l223
  1153   001B32                     l2375:
  1154   001B32  0E03               	movlw	3
  1155   001B34  1852               	xorwf	_week_day^0,w,c
  1156   001B36  1053               	iorwf	(_week_day+1)^0,w,c
  1157   001B38  A4D8               	btfss	status,2,c
  1158   001B3A  EFA1  F00D         	goto	u1591
  1159   001B3E  EFA3  F00D         	goto	u1590
  1160   001B42                     u1591:
  1161   001B42  EFA9  F00D         	goto	l2383
  1162   001B46                     u1590:
  1163   001B46                     
  1164                           ;timers.c: 108:         return("THU");
  1165   001B46  0E28               	movlw	low STR_4
  1166   001B48  6E06               	movwf	?_get_week_day^0,c
  1167   001B4A  0E0E               	movlw	high STR_4
  1168   001B4C  6E07               	movwf	(?_get_week_day+1)^0,c
  1169   001B4E  EFD9  F00D         	goto	l223
  1170   001B52                     l2383:
  1171   001B52  0E04               	movlw	4
  1172   001B54  1852               	xorwf	_week_day^0,w,c
  1173   001B56  1053               	iorwf	(_week_day+1)^0,w,c
  1174   001B58  A4D8               	btfss	status,2,c
  1175   001B5A  EFB1  F00D         	goto	u1601
  1176   001B5E  EFB3  F00D         	goto	u1600
  1177   001B62                     u1601:
  1178   001B62  EFB9  F00D         	goto	l2391
  1179   001B66                     u1600:
  1180   001B66                     
  1181                           ;timers.c: 110:         return("FRI");
  1182   001B66  0E18               	movlw	low STR_5
  1183   001B68  6E06               	movwf	?_get_week_day^0,c
  1184   001B6A  0E0E               	movlw	high STR_5
  1185   001B6C  6E07               	movwf	(?_get_week_day+1)^0,c
  1186   001B6E  EFD9  F00D         	goto	l223
  1187   001B72                     l2391:
  1188   001B72  0E05               	movlw	5
  1189   001B74  1852               	xorwf	_week_day^0,w,c
  1190   001B76  1053               	iorwf	(_week_day+1)^0,w,c
  1191   001B78  A4D8               	btfss	status,2,c
  1192   001B7A  EFC1  F00D         	goto	u1611
  1193   001B7E  EFC3  F00D         	goto	u1610
  1194   001B82                     u1611:
  1195   001B82  EFC9  F00D         	goto	l2399
  1196   001B86                     u1610:
  1197   001B86                     
  1198                           ;timers.c: 112:         return("SAT");
  1199   001B86  0E24               	movlw	low STR_6
  1200   001B88  6E06               	movwf	?_get_week_day^0,c
  1201   001B8A  0E0E               	movlw	high STR_6
  1202   001B8C  6E07               	movwf	(?_get_week_day+1)^0,c
  1203   001B8E  EFD9  F00D         	goto	l223
  1204   001B92                     l2399:
  1205   001B92  0E06               	movlw	6
  1206   001B94  1852               	xorwf	_week_day^0,w,c
  1207   001B96  1053               	iorwf	(_week_day+1)^0,w,c
  1208   001B98  A4D8               	btfss	status,2,c
  1209   001B9A  EFD1  F00D         	goto	u1621
  1210   001B9E  EFD3  F00D         	goto	u1620
  1211   001BA2                     u1621:
  1212   001BA2  EFD9  F00D         	goto	l230
  1213   001BA6                     u1620:
  1214   001BA6                     
  1215                           ;timers.c: 114:         return("SUN");
  1216   001BA6  0E20               	movlw	low STR_7
  1217   001BA8  6E06               	movwf	?_get_week_day^0,c
  1218   001BAA  0E0E               	movlw	high STR_7
  1219   001BAC  6E07               	movwf	(?_get_week_day+1)^0,c
  1220   001BAE  EFD9  F00D         	goto	l223
  1221   001BB2                     l230:
  1222   001BB2                     l223:
  1223   001BB2  0012               	return		;funcret
  1224   001BB4                     __end_of_get_week_day:
  1225                           	callstack 0
  1226                           
  1227 ;; *************** function _get_seconds *****************
  1228 ;; Defined at:
  1229 ;;		line 88 in file "timers.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;		None
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;		None
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  2    5[COMRAM] unsigned int 
  1236 ;; Registers used:
  1237 ;;		None
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1247 ;;Total ram usage:        2 bytes
  1248 ;; Hardware stack levels used: 1
  1249 ;; Hardware stack levels required when called: 2
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text3
  1258   0022DA                     __ptext3:
  1259                           	callstack 0
  1260   0022DA                     _get_seconds:
  1261                           	callstack 28
  1262   0022DA                     
  1263                           ;timers.c: 89:     return seconds;
  1264   0022DA  C0EC  F006         	movff	_seconds,?_get_seconds
  1265   0022DE  C0ED  F007         	movff	_seconds+1,?_get_seconds+1
  1266   0022E2  0012               	return		;funcret
  1267   0022E4                     __end_of_get_seconds:
  1268                           	callstack 0
  1269                           
  1270 ;; *************** function _get_month *****************
  1271 ;; Defined at:
  1272 ;;		line 118 in file "timers.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;		None
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  2    5[COMRAM] unsigned int 
  1279 ;; Registers used:
  1280 ;;		None
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1286 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1289 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1290 ;;Total ram usage:        2 bytes
  1291 ;; Hardware stack levels used: 1
  1292 ;; Hardware stack levels required when called: 2
  1293 ;; This function calls:
  1294 ;;		Nothing
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text4
  1301   0022E4                     __ptext4:
  1302                           	callstack 0
  1303   0022E4                     _get_month:
  1304                           	callstack 28
  1305   0022E4                     
  1306                           ;timers.c: 119:     return month;
  1307   0022E4  C04F  F006         	movff	_month,?_get_month
  1308   0022E8  C050  F007         	movff	_month+1,?_get_month+1
  1309   0022EC  0012               	return		;funcret
  1310   0022EE                     __end_of_get_month:
  1311                           	callstack 0
  1312                           
  1313 ;; *************** function _get_minutes *****************
  1314 ;; Defined at:
  1315 ;;		line 91 in file "timers.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;		None
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;		None
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  2    5[COMRAM] unsigned int 
  1322 ;; Registers used:
  1323 ;;		None
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1329 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1332 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1333 ;;Total ram usage:        2 bytes
  1334 ;; Hardware stack levels used: 1
  1335 ;; Hardware stack levels required when called: 2
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		_main
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text5
  1344   0022EE                     __ptext5:
  1345                           	callstack 0
  1346   0022EE                     _get_minutes:
  1347                           	callstack 28
  1348   0022EE                     
  1349                           ;timers.c: 92:     return minutes;
  1350   0022EE  C0EA  F006         	movff	_minutes,?_get_minutes
  1351   0022F2  C0EB  F007         	movff	_minutes+1,?_get_minutes+1
  1352   0022F6  0012               	return		;funcret
  1353   0022F8                     __end_of_get_minutes:
  1354                           	callstack 0
  1355                           
  1356 ;; *************** function _get_hours *****************
  1357 ;; Defined at:
  1358 ;;		line 94 in file "timers.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  2    5[COMRAM] unsigned int 
  1365 ;; Registers used:
  1366 ;;		None
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1372 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1375 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1376 ;;Total ram usage:        2 bytes
  1377 ;; Hardware stack levels used: 1
  1378 ;; Hardware stack levels required when called: 2
  1379 ;; This function calls:
  1380 ;;		Nothing
  1381 ;; This function is called by:
  1382 ;;		_main
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text6
  1387   0022F8                     __ptext6:
  1388                           	callstack 0
  1389   0022F8                     _get_hours:
  1390                           	callstack 28
  1391   0022F8                     
  1392                           ;timers.c: 95:     return hours;
  1393   0022F8  C0E8  F006         	movff	_hours,?_get_hours
  1394   0022FC  C0E9  F007         	movff	_hours+1,?_get_hours+1
  1395   002300  0012               	return		;funcret
  1396   002302                     __end_of_get_hours:
  1397                           	callstack 0
  1398                           
  1399 ;; *************** function _get_day *****************
  1400 ;; Defined at:
  1401 ;;		line 97 in file "timers.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;		None
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  2    5[COMRAM] unsigned int 
  1408 ;; Registers used:
  1409 ;;		None
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1415 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1418 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1419 ;;Total ram usage:        2 bytes
  1420 ;; Hardware stack levels used: 1
  1421 ;; Hardware stack levels required when called: 2
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_main
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text7
  1430   002302                     __ptext7:
  1431                           	callstack 0
  1432   002302                     _get_day:
  1433                           	callstack 28
  1434   002302                     
  1435                           ;timers.c: 98:     return day;
  1436   002302  C0D0  F006         	movff	_day,?_get_day
  1437   002306  C0D1  F007         	movff	_day+1,?_get_day+1
  1438   00230A  0012               	return		;funcret
  1439   00230C                     __end_of_get_day:
  1440                           	callstack 0
  1441                           
  1442 ;; *************** function _Timer0_init *****************
  1443 ;; Defined at:
  1444 ;;		line 17 in file "timers.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;		None
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;		None
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		wreg, status,2, status,0
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1462 ;;Total ram usage:        0 bytes
  1463 ;; Hardware stack levels used: 1
  1464 ;; Hardware stack levels required when called: 2
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_main
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text8
  1473   00210A                     __ptext8:
  1474                           	callstack 0
  1475   00210A                     _Timer0_init:
  1476                           	callstack 28
  1477   00210A                     
  1478                           ;timers.c: 19:     T0CON1bits.T0CS=0b010;
  1479   00210A  50D6               	movf	214,w,c	;volatile
  1480   00210C  0B1F               	andlw	-225
  1481   00210E  0940               	iorlw	64
  1482   002110  6ED6               	movwf	214,c	;volatile
  1483   002112                     
  1484                           ;timers.c: 20:     T0CON1bits.T0ASYNC=1;
  1485   002112  88D6               	bsf	214,4,c	;volatile
  1486   002114                     
  1487                           ;timers.c: 21:     if(test_mode == 0){
  1488   002114  0100               	movlb	0	; () banked
  1489   002116  51D2               	movf	_test_mode& (0+255),w,b
  1490   002118  11D3               	iorwf	(_test_mode+1)& (0+255),w,b
  1491   00211A  A4D8               	btfss	status,2,c
  1492   00211C  EF92  F010         	goto	u1511
  1493   002120  EF94  F010         	goto	u1510
  1494   002124                     u1511:
  1495   002124  EF9E  F010         	goto	l2265
  1496   002128                     u1510:
  1497   002128                     
  1498                           ; BSR set to: 0
  1499                           ;timers.c: 22:         T0CON1bits.T0CKPS=0b1000;
  1500   002128  50D6               	movf	214,w,c	;volatile
  1501   00212A  0BF0               	andlw	-16
  1502   00212C  0908               	iorlw	8
  1503   00212E  6ED6               	movwf	214,c	;volatile
  1504                           
  1505                           ;timers.c: 23:         TMR0H=0b00001011;
  1506   002130  0E0B               	movlw	11
  1507   002132  6ED4               	movwf	212,c	;volatile
  1508                           
  1509                           ;timers.c: 24:         TMR0L=0b11011011;
  1510   002134  0EDB               	movlw	219
  1511   002136  6ED3               	movwf	211,c	;volatile
  1512                           
  1513                           ;timers.c: 25:     }else{
  1514   002138  EFA4  F010         	goto	l2267
  1515   00213C                     l2265:
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;timers.c: 26:         T0CON1bits.T0CKPS=0;
  1519   00213C  0EF0               	movlw	-16
  1520   00213E  16D6               	andwf	214,f,c	;volatile
  1521                           
  1522                           ;timers.c: 27:         TMR0H=0b00000000;
  1523   002140  0E00               	movlw	0
  1524   002142  6ED4               	movwf	212,c	;volatile
  1525                           
  1526                           ;timers.c: 28:         TMR0L=0b00000000;
  1527   002144  0E00               	movlw	0
  1528   002146  6ED3               	movwf	211,c	;volatile
  1529   002148                     l2267:
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;timers.c: 30:     T0CON0bits.T016BIT=1;
  1533   002148  88D5               	bsf	213,4,c	;volatile
  1534   00214A                     
  1535                           ; BSR set to: 0
  1536                           ;timers.c: 34:     T0CON0bits.T0EN=1;
  1537   00214A  8ED5               	bsf	213,7,c	;volatile
  1538   00214C                     
  1539                           ; BSR set to: 0
  1540   00214C  0012               	return		;funcret
  1541   00214E                     __end_of_Timer0_init:
  1542                           	callstack 0
  1543                           
  1544 ;; *************** function _LCD_sendstring *****************
  1545 ;; Defined at:
  1546 ;;		line 137 in file "LCD.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;  strlst          2   10[COMRAM] PTR PTR unsigned char 
  1549 ;;		 -> main@lst(16), 
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;  i               2   14[COMRAM] int 
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  1    wreg      void 
  1554 ;; Registers used:
  1555 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1561 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1563 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1564 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1565 ;;Total ram usage:        6 bytes
  1566 ;; Hardware stack levels used: 1
  1567 ;; Hardware stack levels required when called: 6
  1568 ;; This function calls:
  1569 ;;		_LCD_sendbyte
  1570 ;;		_LCD_setline
  1571 ;; This function is called by:
  1572 ;;		_main
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text9
  1577   00149C                     __ptext9:
  1578                           	callstack 0
  1579   00149C                     _LCD_sendstring:
  1580                           	callstack 24
  1581   00149C                     
  1582                           ;LCD.c: 137: void LCD_sendstring(char *strlst[8]);LCD.c: 138: { int i;;LCD.c: 139:      
      +                             for (i=0;i<8;i++){
  1583   00149C  0E00               	movlw	0
  1584   00149E  6E10               	movwf	(LCD_sendstring@i+1)^0,c
  1585   0014A0  0E00               	movlw	0
  1586   0014A2  6E0F               	movwf	LCD_sendstring@i^0,c
  1587   0014A4                     l2411:
  1588                           
  1589                           ;LCD.c: 140:             LCD_setline(i);
  1590   0014A4  C00F  F009         	movff	LCD_sendstring@i,LCD_setline@line
  1591   0014A8  C010  F00A         	movff	LCD_sendstring@i+1,LCD_setline@line+1
  1592   0014AC  EC6C  F00C         	call	_LCD_setline	;wreg free
  1593                           
  1594                           ;LCD.c: 142:             while(*strlst[i] !=0){
  1595   0014B0  EF80  F00A         	goto	l2415
  1596   0014B4                     l2413:
  1597                           
  1598                           ;LCD.c: 143:                 LCD_sendbyte(*strlst[i]++,1);
  1599   0014B4  0E01               	movlw	1
  1600   0014B6  6E07               	movwf	LCD_sendbyte@type^0,c
  1601   0014B8  90D8               	bcf	status,0,c
  1602   0014BA  340F               	rlcf	LCD_sendstring@i^0,w,c
  1603   0014BC  6ED9               	movwf	fsr2l,c
  1604   0014BE  3410               	rlcf	(LCD_sendstring@i+1)^0,w,c
  1605   0014C0  6EDA               	movwf	fsr2h,c
  1606   0014C2  500B               	movf	LCD_sendstring@strlst^0,w,c
  1607   0014C4  26D9               	addwf	fsr2l,f,c
  1608   0014C6  500C               	movf	(LCD_sendstring@strlst+1)^0,w,c
  1609   0014C8  22DA               	addwfc	fsr2h,f,c
  1610   0014CA  CFDF F00D          	movff	indf2,??_LCD_sendstring
  1611   0014CE  0E01               	movlw	1
  1612   0014D0  26DE               	addwf	postinc2,f,c
  1613   0014D2  CFDF F00E          	movff	indf2,??_LCD_sendstring+1
  1614   0014D6  0E00               	movlw	0
  1615   0014D8  22DD               	addwfc	postdec2,f,c
  1616   0014DA  C00D  FFF6         	movff	??_LCD_sendstring,tblptrl
  1617   0014DE  C00E  FFF7         	movff	??_LCD_sendstring+1,tblptrh
  1618   0014E2  0E00               	movlw	low (__smallconst shr (0+16))
  1619   0014E4  6EF8               	movwf	tblptru,c
  1620   0014E6  0E0D               	movlw	(high __ramtop+-1)
  1621   0014E8  64F7               	cpfsgt	tblptrh,c
  1622   0014EA  D003               	bra	u1637
  1623   0014EC  0008               	tblrd		*
  1624   0014EE  50F5               	movf	tablat,w,c
  1625   0014F0  D005               	bra	u1630
  1626   0014F2                     u1637:
  1627   0014F2  CFF6 FFE9          	movff	tblptrl,fsr0l
  1628   0014F6  CFF7 FFEA          	movff	tblptrh,fsr0h
  1629   0014FA  50EF               	movf	indf0,w,c
  1630   0014FC                     u1630:
  1631   0014FC  EC3C  F011         	call	_LCD_sendbyte
  1632   001500                     l2415:
  1633                           
  1634                           ;LCD.c: 142:             while(*strlst[i] !=0){
  1635   001500  90D8               	bcf	status,0,c
  1636   001502  340F               	rlcf	LCD_sendstring@i^0,w,c
  1637   001504  6ED9               	movwf	fsr2l,c
  1638   001506  3410               	rlcf	(LCD_sendstring@i+1)^0,w,c
  1639   001508  6EDA               	movwf	fsr2h,c
  1640   00150A  500B               	movf	LCD_sendstring@strlst^0,w,c
  1641   00150C  26D9               	addwf	fsr2l,f,c
  1642   00150E  500C               	movf	(LCD_sendstring@strlst+1)^0,w,c
  1643   001510  22DA               	addwfc	fsr2h,f,c
  1644   001512  CFDE F00D          	movff	postinc2,??_LCD_sendstring
  1645   001516  CFDD F00E          	movff	postdec2,??_LCD_sendstring+1
  1646   00151A  C00D  FFF6         	movff	??_LCD_sendstring,tblptrl
  1647   00151E  C00E  FFF7         	movff	??_LCD_sendstring+1,tblptrh
  1648   001522  0E00               	movlw	low (__smallconst shr (0+16))
  1649   001524  6EF8               	movwf	tblptru,c
  1650   001526  0E0D               	movlw	(high __ramtop+-1)
  1651   001528  64F7               	cpfsgt	tblptrh,c
  1652   00152A  D003               	bra	u1647
  1653   00152C  0008               	tblrd		*
  1654   00152E  50F5               	movf	tablat,w,c
  1655   001530  D005               	bra	u1640
  1656   001532                     u1647:
  1657   001532  CFF6 FFE9          	movff	tblptrl,fsr0l
  1658   001536  CFF7 FFEA          	movff	tblptrh,fsr0h
  1659   00153A  50EF               	movf	indf0,w,c
  1660   00153C                     u1640:
  1661   00153C  0900               	iorlw	0
  1662   00153E  A4D8               	btfss	status,2,c
  1663   001540  EFA4  F00A         	goto	u1651
  1664   001544  EFA6  F00A         	goto	u1650
  1665   001548                     u1651:
  1666   001548  EF5A  F00A         	goto	l2413
  1667   00154C                     u1650:
  1668   00154C                     
  1669                           ;LCD.c: 146:             LCD_sendbyte (0xC2,0);
  1670   00154C  0E00               	movlw	0
  1671   00154E  6E07               	movwf	LCD_sendbyte@type^0,c
  1672   001550  0EC2               	movlw	194
  1673   001552  EC3C  F011         	call	_LCD_sendbyte
  1674                           
  1675                           ;LCD.c: 147:             LCD_sendbyte (0b00111010,1);
  1676   001556  0E01               	movlw	1
  1677   001558  6E07               	movwf	LCD_sendbyte@type^0,c
  1678   00155A  0E3A               	movlw	58
  1679   00155C  EC3C  F011         	call	_LCD_sendbyte
  1680                           
  1681                           ;LCD.c: 148:             LCD_sendbyte (0xC5,0);
  1682   001560  0E00               	movlw	0
  1683   001562  6E07               	movwf	LCD_sendbyte@type^0,c
  1684   001564  0EC5               	movlw	197
  1685   001566  EC3C  F011         	call	_LCD_sendbyte
  1686                           
  1687                           ;LCD.c: 149:             LCD_sendbyte (0b00101110,1);
  1688   00156A  0E01               	movlw	1
  1689   00156C  6E07               	movwf	LCD_sendbyte@type^0,c
  1690   00156E  0E2E               	movlw	46
  1691   001570  EC3C  F011         	call	_LCD_sendbyte
  1692                           
  1693                           ;LCD.c: 150:             LCD_sendbyte (0xC8,0);
  1694   001574  0E00               	movlw	0
  1695   001576  6E07               	movwf	LCD_sendbyte@type^0,c
  1696   001578  0EC8               	movlw	200
  1697   00157A  EC3C  F011         	call	_LCD_sendbyte
  1698                           
  1699                           ;LCD.c: 151:             LCD_sendbyte (0b00100000,1);
  1700   00157E  0E01               	movlw	1
  1701   001580  6E07               	movwf	LCD_sendbyte@type^0,c
  1702   001582  0E20               	movlw	32
  1703   001584  EC3C  F011         	call	_LCD_sendbyte
  1704                           
  1705                           ;LCD.c: 152:             LCD_sendbyte (0xC9,0);
  1706   001588  0E00               	movlw	0
  1707   00158A  6E07               	movwf	LCD_sendbyte@type^0,c
  1708   00158C  0EC9               	movlw	201
  1709   00158E  EC3C  F011         	call	_LCD_sendbyte
  1710                           
  1711                           ;LCD.c: 153:             LCD_sendbyte (0b00100000,1);
  1712   001592  0E01               	movlw	1
  1713   001594  6E07               	movwf	LCD_sendbyte@type^0,c
  1714   001596  0E20               	movlw	32
  1715   001598  EC3C  F011         	call	_LCD_sendbyte
  1716                           
  1717                           ;LCD.c: 154:             LCD_sendbyte (0xCA,0);
  1718   00159C  0E00               	movlw	0
  1719   00159E  6E07               	movwf	LCD_sendbyte@type^0,c
  1720   0015A0  0ECA               	movlw	202
  1721   0015A2  EC3C  F011         	call	_LCD_sendbyte
  1722                           
  1723                           ;LCD.c: 155:             LCD_sendbyte (0b00100000,1);
  1724   0015A6  0E01               	movlw	1
  1725   0015A8  6E07               	movwf	LCD_sendbyte@type^0,c
  1726   0015AA  0E20               	movlw	32
  1727   0015AC  EC3C  F011         	call	_LCD_sendbyte
  1728                           
  1729                           ;LCD.c: 156:             LCD_sendbyte (0xCB,0);
  1730   0015B0  0E00               	movlw	0
  1731   0015B2  6E07               	movwf	LCD_sendbyte@type^0,c
  1732   0015B4  0ECB               	movlw	203
  1733   0015B6  EC3C  F011         	call	_LCD_sendbyte
  1734                           
  1735                           ;LCD.c: 157:             LCD_sendbyte (0b00100000,1);
  1736   0015BA  0E01               	movlw	1
  1737   0015BC  6E07               	movwf	LCD_sendbyte@type^0,c
  1738   0015BE  0E20               	movlw	32
  1739   0015C0  EC3C  F011         	call	_LCD_sendbyte
  1740                           
  1741                           ;LCD.c: 158:             LCD_sendbyte (0xCC,0);
  1742   0015C4  0E00               	movlw	0
  1743   0015C6  6E07               	movwf	LCD_sendbyte@type^0,c
  1744   0015C8  0ECC               	movlw	204
  1745   0015CA  EC3C  F011         	call	_LCD_sendbyte
  1746                           
  1747                           ;LCD.c: 159:             LCD_sendbyte (0b00100000,1);
  1748   0015CE  0E01               	movlw	1
  1749   0015D0  6E07               	movwf	LCD_sendbyte@type^0,c
  1750   0015D2  0E20               	movlw	32
  1751   0015D4  EC3C  F011         	call	_LCD_sendbyte
  1752                           
  1753                           ;LCD.c: 160:             LCD_sendbyte (0x88,0);
  1754   0015D8  0E00               	movlw	0
  1755   0015DA  6E07               	movwf	LCD_sendbyte@type^0,c
  1756   0015DC  0E88               	movlw	136
  1757   0015DE  EC3C  F011         	call	_LCD_sendbyte
  1758                           
  1759                           ;LCD.c: 161:             LCD_sendbyte (0b00101111,1);
  1760   0015E2  0E01               	movlw	1
  1761   0015E4  6E07               	movwf	LCD_sendbyte@type^0,c
  1762   0015E6  0E2F               	movlw	47
  1763   0015E8  EC3C  F011         	call	_LCD_sendbyte
  1764                           
  1765                           ;LCD.c: 162:             LCD_sendbyte (0x8B,0);
  1766   0015EC  0E00               	movlw	0
  1767   0015EE  6E07               	movwf	LCD_sendbyte@type^0,c
  1768   0015F0  0E8B               	movlw	139
  1769   0015F2  EC3C  F011         	call	_LCD_sendbyte
  1770                           
  1771                           ;LCD.c: 163:             LCD_sendbyte (0b00101111,1);
  1772   0015F6  0E01               	movlw	1
  1773   0015F8  6E07               	movwf	LCD_sendbyte@type^0,c
  1774   0015FA  0E2F               	movlw	47
  1775   0015FC  EC3C  F011         	call	_LCD_sendbyte
  1776   001600                     
  1777                           ;LCD.c: 164:     }
  1778   001600  4A0F               	infsnz	LCD_sendstring@i^0,f,c
  1779   001602  2A10               	incf	(LCD_sendstring@i+1)^0,f,c
  1780   001604  BE10               	btfsc	(LCD_sendstring@i+1)^0,7,c
  1781   001606  EF0E  F00B         	goto	u1661
  1782   00160A  5010               	movf	(LCD_sendstring@i+1)^0,w,c
  1783   00160C  E109               	bnz	u1660
  1784   00160E  0E08               	movlw	8
  1785   001610  5C0F               	subwf	LCD_sendstring@i^0,w,c
  1786   001612  A0D8               	btfss	status,0,c
  1787   001614  EF0E  F00B         	goto	u1661
  1788   001618  EF10  F00B         	goto	u1660
  1789   00161C                     u1661:
  1790   00161C  EF52  F00A         	goto	l2411
  1791   001620                     u1660:
  1792   001620  0012               	return		;funcret
  1793   001622                     __end_of_LCD_sendstring:
  1794                           	callstack 0
  1795                           
  1796 ;; *************** function _LCD_setline *****************
  1797 ;; Defined at:
  1798 ;;		line 112 in file "LCD.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  line            2    8[COMRAM] int 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;		None
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, status,2, status,0, cstack
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1812 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1815 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1816 ;;Total ram usage:        2 bytes
  1817 ;; Hardware stack levels used: 1
  1818 ;; Hardware stack levels required when called: 5
  1819 ;; This function calls:
  1820 ;;		_LCD_sendbyte
  1821 ;; This function is called by:
  1822 ;;		_LCD_sendstring
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text10
  1827   0018D8                     __ptext10:
  1828                           	callstack 0
  1829   0018D8                     _LCD_setline:
  1830                           	callstack 24
  1831   0018D8                     
  1832                           ;LCD.c: 112: void LCD_setline(int line);LCD.c: 113: {;LCD.c: 114:     if(line == 0){
  1833   0018D8  5009               	movf	LCD_setline@line^0,w,c
  1834   0018DA  100A               	iorwf	(LCD_setline@line+1)^0,w,c
  1835   0018DC  A4D8               	btfss	status,2,c
  1836   0018DE  EF73  F00C         	goto	u1431
  1837   0018E2  EF75  F00C         	goto	u1430
  1838   0018E6                     u1431:
  1839   0018E6  EF7C  F00C         	goto	l2217
  1840   0018EA                     u1430:
  1841   0018EA                     
  1842                           ;LCD.c: 115:         LCD_sendbyte(0x80,0);
  1843   0018EA  0E00               	movlw	0
  1844   0018EC  6E07               	movwf	LCD_sendbyte@type^0,c
  1845   0018EE  0E80               	movlw	128
  1846   0018F0  EC3C  F011         	call	_LCD_sendbyte
  1847                           
  1848                           ;LCD.c: 116:     }else if(line == 1){
  1849   0018F4  EFF2  F00C         	goto	l319
  1850   0018F8                     l2217:
  1851   0018F8  0409               	decf	LCD_setline@line^0,w,c
  1852   0018FA  100A               	iorwf	(LCD_setline@line+1)^0,w,c
  1853   0018FC  A4D8               	btfss	status,2,c
  1854   0018FE  EF83  F00C         	goto	u1441
  1855   001902  EF85  F00C         	goto	u1440
  1856   001906                     u1441:
  1857   001906  EF8C  F00C         	goto	l2221
  1858   00190A                     u1440:
  1859   00190A                     
  1860                           ;LCD.c: 117:         LCD_sendbyte(0x86,0);
  1861   00190A  0E00               	movlw	0
  1862   00190C  6E07               	movwf	LCD_sendbyte@type^0,c
  1863   00190E  0E86               	movlw	134
  1864   001910  EC3C  F011         	call	_LCD_sendbyte
  1865                           
  1866                           ;LCD.c: 118:     }else if(line == 2){
  1867   001914  EFF2  F00C         	goto	l319
  1868   001918                     l2221:
  1869   001918  0E02               	movlw	2
  1870   00191A  1809               	xorwf	LCD_setline@line^0,w,c
  1871   00191C  100A               	iorwf	(LCD_setline@line+1)^0,w,c
  1872   00191E  A4D8               	btfss	status,2,c
  1873   001920  EF94  F00C         	goto	u1451
  1874   001924  EF96  F00C         	goto	u1450
  1875   001928                     u1451:
  1876   001928  EF9D  F00C         	goto	l2225
  1877   00192C                     u1450:
  1878   00192C                     
  1879                           ;LCD.c: 119:         LCD_sendbyte(0x89,0);
  1880   00192C  0E00               	movlw	0
  1881   00192E  6E07               	movwf	LCD_sendbyte@type^0,c
  1882   001930  0E89               	movlw	137
  1883   001932  EC3C  F011         	call	_LCD_sendbyte
  1884                           
  1885                           ;LCD.c: 120:     }else if(line == 3){
  1886   001936  EFF2  F00C         	goto	l319
  1887   00193A                     l2225:
  1888   00193A  0E03               	movlw	3
  1889   00193C  1809               	xorwf	LCD_setline@line^0,w,c
  1890   00193E  100A               	iorwf	(LCD_setline@line+1)^0,w,c
  1891   001940  A4D8               	btfss	status,2,c
  1892   001942  EFA5  F00C         	goto	u1461
  1893   001946  EFA7  F00C         	goto	u1460
  1894   00194A                     u1461:
  1895   00194A  EFAE  F00C         	goto	l2229
  1896   00194E                     u1460:
  1897   00194E                     
  1898                           ;LCD.c: 121:         LCD_sendbyte(0x8C,0);
  1899   00194E  0E00               	movlw	0
  1900   001950  6E07               	movwf	LCD_sendbyte@type^0,c
  1901   001952  0E8C               	movlw	140
  1902   001954  EC3C  F011         	call	_LCD_sendbyte
  1903                           
  1904                           ;LCD.c: 122:     }else if(line == 4){
  1905   001958  EFF2  F00C         	goto	l319
  1906   00195C                     l2229:
  1907   00195C  0E04               	movlw	4
  1908   00195E  1809               	xorwf	LCD_setline@line^0,w,c
  1909   001960  100A               	iorwf	(LCD_setline@line+1)^0,w,c
  1910   001962  A4D8               	btfss	status,2,c
  1911   001964  EFB6  F00C         	goto	u1471
  1912   001968  EFB8  F00C         	goto	u1470
  1913   00196C                     u1471:
  1914   00196C  EFBF  F00C         	goto	l2233
  1915   001970                     u1470:
  1916   001970                     
  1917                           ;LCD.c: 123:         LCD_sendbyte(0xC0,0);
  1918   001970  0E00               	movlw	0
  1919   001972  6E07               	movwf	LCD_sendbyte@type^0,c
  1920   001974  0EC0               	movlw	192
  1921   001976  EC3C  F011         	call	_LCD_sendbyte
  1922                           
  1923                           ;LCD.c: 124:     }else if(line == 5){
  1924   00197A  EFF2  F00C         	goto	l319
  1925   00197E                     l2233:
  1926   00197E  0E05               	movlw	5
  1927   001980  1809               	xorwf	LCD_setline@line^0,w,c
  1928   001982  100A               	iorwf	(LCD_setline@line+1)^0,w,c
  1929   001984  A4D8               	btfss	status,2,c
  1930   001986  EFC7  F00C         	goto	u1481
  1931   00198A  EFC9  F00C         	goto	u1480
  1932   00198E                     u1481:
  1933   00198E  EFD0  F00C         	goto	l2237
  1934   001992                     u1480:
  1935   001992                     
  1936                           ;LCD.c: 125:         LCD_sendbyte(0xC3,0);
  1937   001992  0E00               	movlw	0
  1938   001994  6E07               	movwf	LCD_sendbyte@type^0,c
  1939   001996  0EC3               	movlw	195
  1940   001998  EC3C  F011         	call	_LCD_sendbyte
  1941                           
  1942                           ;LCD.c: 126:     }else if(line == 6){
  1943   00199C  EFF2  F00C         	goto	l319
  1944   0019A0                     l2237:
  1945   0019A0  0E06               	movlw	6
  1946   0019A2  1809               	xorwf	LCD_setline@line^0,w,c
  1947   0019A4  100A               	iorwf	(LCD_setline@line+1)^0,w,c
  1948   0019A6  A4D8               	btfss	status,2,c
  1949   0019A8  EFD8  F00C         	goto	u1491
  1950   0019AC  EFDA  F00C         	goto	u1490
  1951   0019B0                     u1491:
  1952   0019B0  EFE1  F00C         	goto	l2241
  1953   0019B4                     u1490:
  1954   0019B4                     
  1955                           ;LCD.c: 127:         LCD_sendbyte(0xC6,0);
  1956   0019B4  0E00               	movlw	0
  1957   0019B6  6E07               	movwf	LCD_sendbyte@type^0,c
  1958   0019B8  0EC6               	movlw	198
  1959   0019BA  EC3C  F011         	call	_LCD_sendbyte
  1960                           
  1961                           ;LCD.c: 128:     }else if(line == 7){
  1962   0019BE  EFF2  F00C         	goto	l319
  1963   0019C2                     l2241:
  1964   0019C2  0E07               	movlw	7
  1965   0019C4  1809               	xorwf	LCD_setline@line^0,w,c
  1966   0019C6  100A               	iorwf	(LCD_setline@line+1)^0,w,c
  1967   0019C8  A4D8               	btfss	status,2,c
  1968   0019CA  EFE9  F00C         	goto	u1501
  1969   0019CE  EFEB  F00C         	goto	u1500
  1970   0019D2                     u1501:
  1971   0019D2  EFF2  F00C         	goto	l313
  1972   0019D6                     u1500:
  1973   0019D6                     
  1974                           ;LCD.c: 129:         LCD_sendbyte(0xCD,0);
  1975   0019D6  0E00               	movlw	0
  1976   0019D8  6E07               	movwf	LCD_sendbyte@type^0,c
  1977   0019DA  0ECD               	movlw	205
  1978   0019DC  EC3C  F011         	call	_LCD_sendbyte
  1979   0019E0  EFF2  F00C         	goto	l319
  1980   0019E4                     l313:
  1981   0019E4                     l319:
  1982   0019E4  0012               	return		;funcret
  1983   0019E6                     __end_of_LCD_setline:
  1984                           	callstack 0
  1985                           
  1986 ;; *************** function _LCD_clear *****************
  1987 ;; Defined at:
  1988 ;;		line 97 in file "LCD.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;		None
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, status,2, status,0, cstack
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2004 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2005 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2006 ;;Total ram usage:        1 bytes
  2007 ;; Hardware stack levels used: 1
  2008 ;; Hardware stack levels required when called: 5
  2009 ;; This function calls:
  2010 ;;		_LCD_sendbyte
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text11
  2017   002192                     __ptext11:
  2018                           	callstack 0
  2019   002192                     _LCD_clear:
  2020                           	callstack 25
  2021   002192                     
  2022                           ;LCD.c: 99:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2023   002192  0ED5               	movlw	213
  2024   002194                     u2287:
  2025   002194  2EE8               	decfsz	wreg,f,c
  2026   002196  D7FE               	bra	u2287
  2027   002198  F000               	nop	
  2028   00219A                     
  2029                           ;LCD.c: 100:     LCD_sendbyte(0b00000001,0);
  2030   00219A  0E00               	movlw	0
  2031   00219C  6E07               	movwf	LCD_sendbyte@type^0,c
  2032   00219E  0E01               	movlw	1
  2033   0021A0  EC3C  F011         	call	_LCD_sendbyte
  2034   0021A4                     
  2035                           ;LCD.c: 102:     _delay((unsigned long)((2)*(64000000/4000.0)));
  2036   0021A4  0E2A               	movlw	42
  2037   0021A6  6E09               	movwf	??_LCD_clear^0,c
  2038   0021A8  0E8E               	movlw	142
  2039   0021AA                     u2297:
  2040   0021AA  2EE8               	decfsz	wreg,f,c
  2041   0021AC  D7FE               	bra	u2297
  2042   0021AE  2E09               	decfsz	??_LCD_clear^0,f,c
  2043   0021B0  D7FC               	bra	u2297
  2044                           
  2045                           ;LCD.c: 103:     LCD_sendbyte(0b00000110,0);
  2046   0021B2  0E00               	movlw	0
  2047   0021B4  6E07               	movwf	LCD_sendbyte@type^0,c
  2048   0021B6  0E06               	movlw	6
  2049   0021B8  EC3C  F011         	call	_LCD_sendbyte
  2050                           
  2051                           ;LCD.c: 104:     LCD_sendbyte(0b00001110,0);
  2052   0021BC  0E00               	movlw	0
  2053   0021BE  6E07               	movwf	LCD_sendbyte@type^0,c
  2054   0021C0  0E0E               	movlw	14
  2055   0021C2  EC3C  F011         	call	_LCD_sendbyte
  2056                           
  2057                           ;LCD.c: 105:     LCD_sendbyte(0b00001100,0);
  2058   0021C6  0E00               	movlw	0
  2059   0021C8  6E07               	movwf	LCD_sendbyte@type^0,c
  2060   0021CA  0E0C               	movlw	12
  2061   0021CC  EC3C  F011         	call	_LCD_sendbyte
  2062   0021D0  0012               	return		;funcret
  2063   0021D2                     __end_of_LCD_clear:
  2064                           	callstack 0
  2065                           
  2066 ;; *************** function _LCD_Init *****************
  2067 ;; Defined at:
  2068 ;;		line 52 in file "LCD.c"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;		None
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;		None
  2073 ;; Return value:  Size  Location     Type
  2074 ;;                  1    wreg      void 
  2075 ;; Registers used:
  2076 ;;		wreg, status,2, status,0, cstack
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2084 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2085 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2086 ;;Total ram usage:        2 bytes
  2087 ;; Hardware stack levels used: 1
  2088 ;; Hardware stack levels required when called: 5
  2089 ;; This function calls:
  2090 ;;		_LCD_sendbyte
  2091 ;;		_LCD_sendnibble
  2092 ;; This function is called by:
  2093 ;;		_main
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text12
  2098   001EB0                     __ptext12:
  2099                           	callstack 0
  2100   001EB0                     _LCD_Init:
  2101                           	callstack 25
  2102   001EB0                     
  2103                           ;LCD.c: 57:     TRISCbits.TRISC2 = 0;
  2104   001EB0  9483               	bcf	131,2,c	;volatile
  2105                           
  2106                           ;LCD.c: 58:     TRISCbits.TRISC6 = 0;
  2107   001EB2  9C83               	bcf	131,6,c	;volatile
  2108                           
  2109                           ;LCD.c: 59:     TRISBbits.TRISB3 = 0;
  2110   001EB4  9682               	bcf	130,3,c	;volatile
  2111                           
  2112                           ;LCD.c: 60:     TRISBbits.TRISB2 = 0;
  2113   001EB6  9482               	bcf	130,2,c	;volatile
  2114                           
  2115                           ;LCD.c: 61:     TRISEbits.TRISE3 = 0;
  2116   001EB8  9685               	bcf	133,3,c	;volatile
  2117                           
  2118                           ;LCD.c: 62:     TRISEbits.TRISE1 = 0;
  2119   001EBA  9285               	bcf	133,1,c	;volatile
  2120                           
  2121                           ;LCD.c: 65:     LATCbits.LATC6 = 0;
  2122   001EBC  9C7B               	bcf	123,6,c	;volatile
  2123                           
  2124                           ;LCD.c: 66:     LATCbits.LATC2 = 0;
  2125   001EBE  947B               	bcf	123,2,c	;volatile
  2126                           
  2127                           ;LCD.c: 67:     LATBbits.LATB3 = 0;
  2128   001EC0  967A               	bcf	122,3,c	;volatile
  2129                           
  2130                           ;LCD.c: 68:     LATBbits.LATB2 = 0;
  2131   001EC2  947A               	bcf	122,2,c	;volatile
  2132                           
  2133                           ;LCD.c: 69:     LATEbits.LATE3 = 0;
  2134   001EC4  967D               	bcf	125,3,c	;volatile
  2135                           
  2136                           ;LCD.c: 70:     LATEbits.LATE1 = 0;
  2137   001EC6  927D               	bcf	125,1,c	;volatile
  2138   001EC8                     
  2139                           ;LCD.c: 72:     _delay((unsigned long)((60)*(64000000/4000.0)));
  2140   001EC8  0E05               	movlw	5
  2141   001ECA  6E0A               	movwf	(??_LCD_Init+1)^0,c
  2142   001ECC  0EDF               	movlw	223
  2143   001ECE  6E09               	movwf	??_LCD_Init^0,c
  2144   001ED0  0EBC               	movlw	188
  2145   001ED2                     u2307:
  2146   001ED2  2EE8               	decfsz	wreg,f,c
  2147   001ED4  D7FE               	bra	u2307
  2148   001ED6  2E09               	decfsz	??_LCD_Init^0,f,c
  2149   001ED8  D7FC               	bra	u2307
  2150   001EDA  2E0A               	decfsz	(??_LCD_Init+1)^0,f,c
  2151   001EDC  D7FA               	bra	u2307
  2152   001EDE                     
  2153                           ;LCD.c: 74:     LCD_sendnibble(0b0011);
  2154   001EDE  0E03               	movlw	3
  2155   001EE0  ECAB  F00F         	call	_LCD_sendnibble
  2156   001EE4                     
  2157                           ;LCD.c: 75:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2158   001EE4  0ED5               	movlw	213
  2159   001EE6                     u2317:
  2160   001EE6  2EE8               	decfsz	wreg,f,c
  2161   001EE8  D7FE               	bra	u2317
  2162   001EEA  F000               	nop	
  2163                           
  2164                           ;LCD.c: 77:     LCD_sendnibble(0b0010);
  2165   001EEC  0E02               	movlw	2
  2166   001EEE  ECAB  F00F         	call	_LCD_sendnibble
  2167   001EF2                     
  2168                           ;LCD.c: 78:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2169   001EF2  0ED5               	movlw	213
  2170   001EF4                     u2327:
  2171   001EF4  2EE8               	decfsz	wreg,f,c
  2172   001EF6  D7FE               	bra	u2327
  2173   001EF8  F000               	nop	
  2174   001EFA                     
  2175                           ;LCD.c: 80:     LCD_sendbyte(0b00101000,0);
  2176   001EFA  0E00               	movlw	0
  2177   001EFC  6E07               	movwf	LCD_sendbyte@type^0,c
  2178   001EFE  0E28               	movlw	40
  2179   001F00  EC3C  F011         	call	_LCD_sendbyte
  2180   001F04                     
  2181                           ;LCD.c: 81:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2182   001F04  0ED5               	movlw	213
  2183   001F06                     u2337:
  2184   001F06  2EE8               	decfsz	wreg,f,c
  2185   001F08  D7FE               	bra	u2337
  2186   001F0A  F000               	nop	
  2187   001F0C                     
  2188                           ;LCD.c: 83:     LCD_sendbyte(0b00101000,0);
  2189   001F0C  0E00               	movlw	0
  2190   001F0E  6E07               	movwf	LCD_sendbyte@type^0,c
  2191   001F10  0E28               	movlw	40
  2192   001F12  EC3C  F011         	call	_LCD_sendbyte
  2193   001F16                     
  2194                           ;LCD.c: 84:     _delay((unsigned long)((40)*(64000000/4000000.0)));
  2195   001F16  0ED5               	movlw	213
  2196   001F18                     u2347:
  2197   001F18  2EE8               	decfsz	wreg,f,c
  2198   001F1A  D7FE               	bra	u2347
  2199   001F1C  F000               	nop	
  2200   001F1E                     
  2201                           ;LCD.c: 86:     LCD_sendbyte(0b00000001,0);
  2202   001F1E  0E00               	movlw	0
  2203   001F20  6E07               	movwf	LCD_sendbyte@type^0,c
  2204   001F22  0E01               	movlw	1
  2205   001F24  EC3C  F011         	call	_LCD_sendbyte
  2206   001F28                     
  2207                           ;LCD.c: 87:     _delay((unsigned long)((2)*(64000000/4000.0)));
  2208   001F28  0E2A               	movlw	42
  2209   001F2A  6E09               	movwf	??_LCD_Init^0,c
  2210   001F2C  0E8E               	movlw	142
  2211   001F2E                     u2357:
  2212   001F2E  2EE8               	decfsz	wreg,f,c
  2213   001F30  D7FE               	bra	u2357
  2214   001F32  2E09               	decfsz	??_LCD_Init^0,f,c
  2215   001F34  D7FC               	bra	u2357
  2216   001F36                     
  2217                           ;LCD.c: 89:     LCD_sendbyte(0b00000110,0);
  2218   001F36  0E00               	movlw	0
  2219   001F38  6E07               	movwf	LCD_sendbyte@type^0,c
  2220   001F3A  0E06               	movlw	6
  2221   001F3C  EC3C  F011         	call	_LCD_sendbyte
  2222   001F40                     
  2223                           ;LCD.c: 91:     LCD_sendbyte(0b00001110,0);
  2224   001F40  0E00               	movlw	0
  2225   001F42  6E07               	movwf	LCD_sendbyte@type^0,c
  2226   001F44  0E0E               	movlw	14
  2227   001F46  EC3C  F011         	call	_LCD_sendbyte
  2228   001F4A                     
  2229                           ;LCD.c: 92:     LCD_sendbyte(0b00001100,0);
  2230   001F4A  0E00               	movlw	0
  2231   001F4C  6E07               	movwf	LCD_sendbyte@type^0,c
  2232   001F4E  0E0C               	movlw	12
  2233   001F50  EC3C  F011         	call	_LCD_sendbyte
  2234   001F54  0012               	return		;funcret
  2235   001F56                     __end_of_LCD_Init:
  2236                           	callstack 0
  2237                           
  2238 ;; *************** function _LCD_sendbyte *****************
  2239 ;; Defined at:
  2240 ;;		line 39 in file "LCD.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;  Byte            1    wreg     unsigned char 
  2243 ;;  type            1    6[COMRAM] unsigned char 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  Byte            1    7[COMRAM] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg, status,2, status,0, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2255 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2256 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2258 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2259 ;;Total ram usage:        2 bytes
  2260 ;; Hardware stack levels used: 1
  2261 ;; Hardware stack levels required when called: 4
  2262 ;; This function calls:
  2263 ;;		_LCD_sendnibble
  2264 ;; This function is called by:
  2265 ;;		_LCD_Init
  2266 ;;		_LCD_clear
  2267 ;;		_LCD_setline
  2268 ;;		_LCD_sendstring
  2269 ;;		_LCD_scroll
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text13
  2274   002278                     __ptext13:
  2275                           	callstack 0
  2276   002278                     _LCD_sendbyte:
  2277                           	callstack 24
  2278                           
  2279                           ;incstack = 0
  2280                           ;LCD_sendbyte@Byte stored from wreg
  2281   002278  6E08               	movwf	LCD_sendbyte@Byte^0,c
  2282   00227A                     
  2283                           ;LCD.c: 39: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 40: {;LCD.c: 42:    
      +                           LATCbits.LATC6 = type;
  2284   00227A  B007               	btfsc	LCD_sendbyte@type^0,0,c
  2285   00227C  D002               	bra	u1415
  2286   00227E  9C7B               	bcf	123,6,c	;volatile
  2287   002280  D001               	bra	u1416
  2288   002282                     u1415:
  2289   002282  8C7B               	bsf	123,6,c	;volatile
  2290   002284                     u1416:
  2291   002284                     
  2292                           ;LCD.c: 43:     LCD_sendnibble(Byte >> 4);
  2293   002284  3808               	swapf	LCD_sendbyte@Byte^0,w,c
  2294   002286  0B0F               	andlw	15
  2295   002288  ECAB  F00F         	call	_LCD_sendnibble
  2296   00228C                     
  2297                           ;LCD.c: 44:     LCD_sendnibble(Byte);
  2298   00228C  5008               	movf	LCD_sendbyte@Byte^0,w,c
  2299   00228E  ECAB  F00F         	call	_LCD_sendnibble
  2300   002292                     
  2301                           ;LCD.c: 46:     _delay((unsigned long)((50)*(64000000/4000000.0)));
  2302   002292  0EA0               	movlw	160
  2303   002294                     u2367:
  2304   002294  D000               	nop2	
  2305   002296  2EE8               	decfsz	wreg,f,c
  2306   002298  D7FD               	bra	u2367
  2307   00229A  0012               	return		;funcret
  2308   00229C                     __end_of_LCD_sendbyte:
  2309                           	callstack 0
  2310                           
  2311 ;; *************** function _LCD_sendnibble *****************
  2312 ;; Defined at:
  2313 ;;		line 21 in file "LCD.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  number          1    wreg     unsigned char 
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;  number          1    5[COMRAM] unsigned char 
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  1    wreg      void 
  2320 ;; Registers used:
  2321 ;;		wreg, cstack
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2330 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2331 ;;Total ram usage:        1 bytes
  2332 ;; Hardware stack levels used: 1
  2333 ;; Hardware stack levels required when called: 3
  2334 ;; This function calls:
  2335 ;;		_LCD_E_TOG
  2336 ;; This function is called by:
  2337 ;;		_LCD_sendbyte
  2338 ;;		_LCD_Init
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text14
  2343   001F56                     __ptext14:
  2344                           	callstack 0
  2345   001F56                     _LCD_sendnibble:
  2346                           	callstack 24
  2347                           
  2348                           ;incstack = 0
  2349                           ;LCD_sendnibble@number stored from wreg
  2350   001F56  6E06               	movwf	LCD_sendnibble@number^0,c
  2351   001F58                     
  2352                           ;LCD.c: 21: void LCD_sendnibble(unsigned char number);LCD.c: 22: {;LCD.c: 25:     if(num
      +                          ber & 0b0001){ LATBbits.LATB3 = 1;}else{LATBbits.LATB3 = 0;}
  2353   001F58  A006               	btfss	LCD_sendnibble@number^0,0,c
  2354   001F5A  EFB1  F00F         	goto	u1311
  2355   001F5E  EFB3  F00F         	goto	u1310
  2356   001F62                     u1311:
  2357   001F62  EFB6  F00F         	goto	l284
  2358   001F66                     u1310:
  2359   001F66  867A               	bsf	122,3,c	;volatile
  2360   001F68  EFB7  F00F         	goto	l2109
  2361   001F6C                     l284:
  2362   001F6C  967A               	bcf	122,3,c	;volatile
  2363   001F6E                     l2109:
  2364                           
  2365                           ;LCD.c: 26:     if(number & 0b0010){ LATBbits.LATB2 = 1;}else{LATBbits.LATB2 = 0;}
  2366   001F6E  A206               	btfss	LCD_sendnibble@number^0,1,c
  2367   001F70  EFBC  F00F         	goto	u1321
  2368   001F74  EFBE  F00F         	goto	u1320
  2369   001F78                     u1321:
  2370   001F78  EFC1  F00F         	goto	l286
  2371   001F7C                     u1320:
  2372   001F7C  847A               	bsf	122,2,c	;volatile
  2373   001F7E  EFC2  F00F         	goto	l2113
  2374   001F82                     l286:
  2375   001F82  947A               	bcf	122,2,c	;volatile
  2376   001F84                     l2113:
  2377                           
  2378                           ;LCD.c: 27:     if(number & 0b0100){ LATEbits.LATE3 = 1;}else{LATEbits.LATE3 = 0;}
  2379   001F84  A406               	btfss	LCD_sendnibble@number^0,2,c
  2380   001F86  EFC7  F00F         	goto	u1331
  2381   001F8A  EFC9  F00F         	goto	u1330
  2382   001F8E                     u1331:
  2383   001F8E  EFCC  F00F         	goto	l288
  2384   001F92                     u1330:
  2385   001F92  867D               	bsf	125,3,c	;volatile
  2386   001F94  EFCD  F00F         	goto	l2117
  2387   001F98                     l288:
  2388   001F98  967D               	bcf	125,3,c	;volatile
  2389   001F9A                     l2117:
  2390                           
  2391                           ;LCD.c: 28:     if(number & 0b1000){ LATEbits.LATE1 = 1;}else{LATEbits.LATE1 = 0;}
  2392   001F9A  A606               	btfss	LCD_sendnibble@number^0,3,c
  2393   001F9C  EFD2  F00F         	goto	u1341
  2394   001FA0  EFD4  F00F         	goto	u1340
  2395   001FA4                     u1341:
  2396   001FA4  EFD7  F00F         	goto	l290
  2397   001FA8                     u1340:
  2398   001FA8  827D               	bsf	125,1,c	;volatile
  2399   001FAA  EFD8  F00F         	goto	l2121
  2400   001FAE                     l290:
  2401   001FAE  927D               	bcf	125,1,c	;volatile
  2402   001FB0                     l2121:
  2403                           
  2404                           ;LCD.c: 30:     LCD_E_TOG();
  2405   001FB0  EC5B  F011         	call	_LCD_E_TOG	;wreg free
  2406   001FB4                     
  2407                           ;LCD.c: 31:     _delay((unsigned long)((5)*(64000000/4000000.0)));
  2408   001FB4  0E1A               	movlw	26
  2409   001FB6                     u2377:
  2410   001FB6  2EE8               	decfsz	wreg,f,c
  2411   001FB8  D7FE               	bra	u2377
  2412   001FBA  D000               	nop2	
  2413   001FBC  0012               	return		;funcret
  2414   001FBE                     __end_of_LCD_sendnibble:
  2415                           	callstack 0
  2416                           
  2417 ;; *************** function _LCD_E_TOG *****************
  2418 ;; Defined at:
  2419 ;;		line 8 in file "LCD.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;		None
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;		None
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2437 ;;Total ram usage:        0 bytes
  2438 ;; Hardware stack levels used: 1
  2439 ;; Hardware stack levels required when called: 2
  2440 ;; This function calls:
  2441 ;;		Nothing
  2442 ;; This function is called by:
  2443 ;;		_LCD_sendnibble
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text15
  2448   0022B6                     __ptext15:
  2449                           	callstack 0
  2450   0022B6                     _LCD_E_TOG:
  2451                           	callstack 24
  2452   0022B6                     
  2453                           ;LCD.c: 11:     LATCbits.LATC2 = 1;
  2454   0022B6  847B               	bsf	123,2,c	;volatile
  2455   0022B8                     
  2456                           ;LCD.c: 12:     _delay((unsigned long)((2)*(64000000/4000000.0)));
  2457   0022B8  0E0A               	movlw	10
  2458   0022BA                     u2387:
  2459   0022BA  2EE8               	decfsz	wreg,f,c
  2460   0022BC  D7FE               	bra	u2387
  2461   0022BE  D000               	nop2	
  2462   0022C0                     
  2463                           ;LCD.c: 14:     LATCbits.LATC2 = 0;
  2464   0022C0  947B               	bcf	123,2,c	;volatile
  2465   0022C2  0012               	return		;funcret
  2466   0022C4                     __end_of_LCD_E_TOG:
  2467                           	callstack 0
  2468                           
  2469 ;; *************** function _Interrupts_init *****************
  2470 ;; Defined at:
  2471 ;;		line 10 in file "interrupts.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;		None
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;		None
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  1    wreg      void 
  2478 ;; Registers used:
  2479 ;;		None
  2480 ;; Tracked objects:
  2481 ;;		On entry : 0/0
  2482 ;;		On exit  : 0/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2489 ;;Total ram usage:        0 bytes
  2490 ;; Hardware stack levels used: 1
  2491 ;; Hardware stack levels required when called: 2
  2492 ;; This function calls:
  2493 ;;		Nothing
  2494 ;; This function is called by:
  2495 ;;		_main
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text16
  2500   0022C4                     __ptext16:
  2501                           	callstack 0
  2502   0022C4                     _Interrupts_init:
  2503                           	callstack 28
  2504   0022C4                     
  2505                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  2506   0022C4  8CF2               	bsf	242,6,c	;volatile
  2507                           
  2508                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  2509   0022C6  010E               	movlb	14	; () banked
  2510   0022C8  8B29               	bsf	41,5,b	;volatile
  2511                           
  2512                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  2513   0022CA  812B               	bsf	43,0,b	;volatile
  2514                           
  2515                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  2516   0022CC  8EF2               	bsf	242,7,c	;volatile
  2517   0022CE                     
  2518                           ; BSR set to: 14
  2519   0022CE  0012               	return		;funcret
  2520   0022D0                     __end_of_Interrupts_init:
  2521                           	callstack 0
  2522                           
  2523 ;; *************** function _ADC_init *****************
  2524 ;; Defined at:
  2525 ;;		line 9 in file "ADC.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;		None
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;		None
  2530 ;; Return value:  Size  Location     Type
  2531 ;;                  1    wreg      void 
  2532 ;; Registers used:
  2533 ;;		wreg, status,2
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2543 ;;Total ram usage:        0 bytes
  2544 ;; Hardware stack levels used: 1
  2545 ;; Hardware stack levels required when called: 2
  2546 ;; This function calls:
  2547 ;;		Nothing
  2548 ;; This function is called by:
  2549 ;;		_main
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           	psect	text17
  2554   00229C                     __ptext17:
  2555                           	callstack 0
  2556   00229C                     _ADC_init:
  2557                           	callstack 28
  2558   00229C                     
  2559                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
  2560   00229C  8681               	bsf	129,3,c	;volatile
  2561                           
  2562                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
  2563   00229E  010E               	movlb	14	; () banked
  2564   0022A0  8792               	bsf	146,3,b	;volatile
  2565                           
  2566                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  2567   0022A2  010F               	movlb	15	; () banked
  2568   0022A4  9958               	bcf	88,4,b	;volatile
  2569   0022A6                     
  2570                           ; BSR set to: 15
  2571                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  2572   0022A6  0EFC               	movlw	-4
  2573   0022A8  1758               	andwf	88,f,b	;volatile
  2574                           
  2575                           ;ADC.c: 17:     ADPCH=0b11;
  2576   0022AA  0E03               	movlw	3
  2577   0022AC  6F5F               	movwf	95,b	;volatile
  2578   0022AE                     
  2579                           ; BSR set to: 15
  2580                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  2581   0022AE  9460               	bcf	96,2,c	;volatile
  2582   0022B0                     
  2583                           ; BSR set to: 15
  2584                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  2585   0022B0  8860               	bsf	96,4,c	;volatile
  2586   0022B2                     
  2587                           ; BSR set to: 15
  2588                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  2589   0022B2  8E60               	bsf	96,7,c	;volatile
  2590   0022B4                     
  2591                           ; BSR set to: 15
  2592   0022B4  0012               	return		;funcret
  2593   0022B6                     __end_of_ADC_init:
  2594                           	callstack 0
  2595                           
  2596 ;; *************** function _ADC_getval *****************
  2597 ;; Defined at:
  2598 ;;		line 23 in file "ADC.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;		None
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  tmpval          2    7[COMRAM] unsigned int 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  2    5[COMRAM] unsigned int 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, status,0
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2615 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2616 ;;Total ram usage:        4 bytes
  2617 ;; Hardware stack levels used: 1
  2618 ;; Hardware stack levels required when called: 2
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_main
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text18
  2627   0021D2                     __ptext18:
  2628                           	callstack 0
  2629   0021D2                     _ADC_getval:
  2630                           	callstack 28
  2631   0021D2                     
  2632                           ;ADC.c: 25:     unsigned int tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  2633   0021D2  8060               	bsf	96,0,c	;volatile
  2634   0021D4                     l259:
  2635   0021D4  B060               	btfsc	96,0,c	;volatile
  2636   0021D6  EFEF  F010         	goto	u1551
  2637   0021DA  EFF1  F010         	goto	u1550
  2638   0021DE                     u1551:
  2639   0021DE  EFEA  F010         	goto	l259
  2640   0021E2                     u1550:
  2641   0021E2                     
  2642                           ;ADC.c: 31:     tmpval = ADRESH;
  2643   0021E2  CF64 F008          	movff	3940,ADC_getval@tmpval	;volatile
  2644   0021E6  6A09               	clrf	(ADC_getval@tmpval+1)^0,c
  2645   0021E8                     
  2646                           ;ADC.c: 35:     tmpval = 255 - tmpval;
  2647   0021E8  5008               	movf	ADC_getval@tmpval^0,w,c
  2648   0021EA  08FF               	sublw	255
  2649   0021EC  6E08               	movwf	ADC_getval@tmpval^0,c
  2650   0021EE  5009               	movf	(ADC_getval@tmpval+1)^0,w,c
  2651   0021F0  A0D8               	btfss	status,0,c
  2652   0021F2  2AE8               	incf	wreg,f,c
  2653   0021F4  0800               	sublw	0
  2654   0021F6  6E09               	movwf	(ADC_getval@tmpval+1)^0,c
  2655   0021F8                     
  2656                           ;ADC.c: 37:     return tmpval;
  2657   0021F8  C008  F006         	movff	ADC_getval@tmpval,?_ADC_getval
  2658   0021FC  C009  F007         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  2659   002200  0012               	return		;funcret
  2660   002202                     __end_of_ADC_getval:
  2661                           	callstack 0
  2662                           
  2663 ;; *************** function _ADC2String *****************
  2664 ;; Defined at:
  2665 ;;		line 194 in file "LCD.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;  buf             2   37[BANK0 ] PTR unsigned char 
  2668 ;;		 -> main@ADC(3), main@Yea(4), main@Mon(2), main@Day(2), 
  2669 ;;		 -> main@Hou(2), main@Min(2), main@Sec(2), 
  2670 ;;  x               2   39[BANK0 ] unsigned int 
  2671 ;;  leading_zero    2   41[BANK0 ] unsigned int 
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;		None
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      void 
  2676 ;; Registers used:
  2677 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2683 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2686 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2687 ;;Total ram usage:        6 bytes
  2688 ;; Hardware stack levels used: 1
  2689 ;; Hardware stack levels required when called: 10
  2690 ;; This function calls:
  2691 ;;		_sprintf
  2692 ;; This function is called by:
  2693 ;;		_main
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text19
  2698   001D4E                     __ptext19:
  2699                           	callstack 0
  2700   001D4E                     _ADC2String:
  2701                           	callstack 20
  2702   001D4E                     
  2703                           ;LCD.c: 196:     if(leading_zeros == 0){
  2704   001D4E  0100               	movlb	0	; () banked
  2705   001D50  5189               	movf	ADC2String@leading_zeros& (0+255),w,b
  2706   001D52  118A               	iorwf	(ADC2String@leading_zeros+1)& (0+255),w,b
  2707   001D54  A4D8               	btfss	status,2,c
  2708   001D56  EFAF  F00E         	goto	u2231
  2709   001D5A  EFB1  F00E         	goto	u2230
  2710   001D5E                     u2231:
  2711   001D5E  EFC1  F00E         	goto	l2889
  2712   001D62                     u2230:
  2713   001D62                     
  2714                           ; BSR set to: 0
  2715                           ;LCD.c: 197:     sprintf(buf, "%u",x);
  2716   001D62  C085  F072         	movff	ADC2String@buf,sprintf@s
  2717   001D66  C086  F073         	movff	ADC2String@buf+1,sprintf@s+1
  2718   001D6A  0E2C               	movlw	low STR_8
  2719   001D6C  6F74               	movwf	sprintf@fmt& (0+255),b
  2720   001D6E  0E0E               	movlw	high STR_8
  2721   001D70  6F75               	movwf	(sprintf@fmt+1)& (0+255),b
  2722   001D72  C087  F076         	movff	ADC2String@x,?_sprintf+4
  2723   001D76  C088  F077         	movff	ADC2String@x+1,?_sprintf+5
  2724   001D7A  EC39  F010         	call	_sprintf	;wreg free
  2725                           
  2726                           ;LCD.c: 198:     }else if(leading_zeros == 1){
  2727   001D7E  EF02  F00F         	goto	l346
  2728   001D82                     l2889:
  2729                           
  2730                           ; BSR set to: 0
  2731   001D82  0589               	decf	ADC2String@leading_zeros& (0+255),w,b
  2732   001D84  118A               	iorwf	(ADC2String@leading_zeros+1)& (0+255),w,b
  2733   001D86  A4D8               	btfss	status,2,c
  2734   001D88  EFC8  F00E         	goto	u2241
  2735   001D8C  EFCA  F00E         	goto	u2240
  2736   001D90                     u2241:
  2737   001D90  EFDA  F00E         	goto	l2893
  2738   001D94                     u2240:
  2739   001D94                     
  2740                           ; BSR set to: 0
  2741                           ;LCD.c: 199:     sprintf(buf, "%01u",x);
  2742   001D94  C085  F072         	movff	ADC2String@buf,sprintf@s
  2743   001D98  C086  F073         	movff	ADC2String@buf+1,sprintf@s+1
  2744   001D9C  0E01               	movlw	low STR_9
  2745   001D9E  6F74               	movwf	sprintf@fmt& (0+255),b
  2746   001DA0  0E0E               	movlw	high STR_9
  2747   001DA2  6F75               	movwf	(sprintf@fmt+1)& (0+255),b
  2748   001DA4  C087  F076         	movff	ADC2String@x,?_sprintf+4
  2749   001DA8  C088  F077         	movff	ADC2String@x+1,?_sprintf+5
  2750   001DAC  EC39  F010         	call	_sprintf	;wreg free
  2751                           
  2752                           ;LCD.c: 200:     }else if(leading_zeros == 2){
  2753   001DB0  EF02  F00F         	goto	l346
  2754   001DB4                     l2893:
  2755                           
  2756                           ; BSR set to: 0
  2757   001DB4  0E02               	movlw	2
  2758   001DB6  1989               	xorwf	ADC2String@leading_zeros& (0+255),w,b
  2759   001DB8  118A               	iorwf	(ADC2String@leading_zeros+1)& (0+255),w,b
  2760   001DBA  A4D8               	btfss	status,2,c
  2761   001DBC  EFE2  F00E         	goto	u2251
  2762   001DC0  EFE4  F00E         	goto	u2250
  2763   001DC4                     u2251:
  2764   001DC4  EFF4  F00E         	goto	l2897
  2765   001DC8                     u2250:
  2766   001DC8                     
  2767                           ; BSR set to: 0
  2768                           ;LCD.c: 201:     sprintf(buf, "%02u",x);
  2769   001DC8  C085  F072         	movff	ADC2String@buf,sprintf@s
  2770   001DCC  C086  F073         	movff	ADC2String@buf+1,sprintf@s+1
  2771   001DD0  0E06               	movlw	low STR_10
  2772   001DD2  6F74               	movwf	sprintf@fmt& (0+255),b
  2773   001DD4  0E0E               	movlw	high STR_10
  2774   001DD6  6F75               	movwf	(sprintf@fmt+1)& (0+255),b
  2775   001DD8  C087  F076         	movff	ADC2String@x,?_sprintf+4
  2776   001DDC  C088  F077         	movff	ADC2String@x+1,?_sprintf+5
  2777   001DE0  EC39  F010         	call	_sprintf	;wreg free
  2778                           
  2779                           ;LCD.c: 202:     }else{sprintf(buf, "%03u",x);
  2780   001DE4  EF02  F00F         	goto	l346
  2781   001DE8                     l2897:
  2782                           
  2783                           ; BSR set to: 0
  2784   001DE8  C085  F072         	movff	ADC2String@buf,sprintf@s
  2785   001DEC  C086  F073         	movff	ADC2String@buf+1,sprintf@s+1
  2786   001DF0  0E0B               	movlw	low STR_11
  2787   001DF2  6F74               	movwf	sprintf@fmt& (0+255),b
  2788   001DF4  0E0E               	movlw	high STR_11
  2789   001DF6  6F75               	movwf	(sprintf@fmt+1)& (0+255),b
  2790   001DF8  C087  F076         	movff	ADC2String@x,?_sprintf+4
  2791   001DFC  C088  F077         	movff	ADC2String@x+1,?_sprintf+5
  2792   001E00  EC39  F010         	call	_sprintf	;wreg free
  2793   001E04                     l346:
  2794   001E04  0012               	return		;funcret
  2795   001E06                     __end_of_ADC2String:
  2796                           	callstack 0
  2797                           
  2798 ;; *************** function _sprintf *****************
  2799 ;; Defined at:
  2800 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  s               2   18[BANK0 ] PTR unsigned char 
  2803 ;;		 -> main@ADC(3), main@Yea(4), main@Mon(2), main@Day(2), 
  2804 ;;		 -> main@Hou(2), main@Min(2), main@Sec(2), 
  2805 ;;  fmt             2   20[BANK0 ] PTR const unsigned char 
  2806 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  f              11   26[BANK0 ] struct _IO_FILE
  2809 ;;  ap              2   24[BANK0 ] PTR void [1]
  2810 ;;		 -> ?_sprintf(2), 
  2811 ;;  ret             2    0        int 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  2   18[BANK0 ] int 
  2814 ;; Registers used:
  2815 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2821 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2822 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2824 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2825 ;;Total ram usage:       19 bytes
  2826 ;; Hardware stack levels used: 1
  2827 ;; Hardware stack levels required when called: 9
  2828 ;; This function calls:
  2829 ;;		_vfprintf
  2830 ;; This function is called by:
  2831 ;;		_ADC2String
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text20
  2836   002072                     __ptext20:
  2837                           	callstack 0
  2838   002072                     _sprintf:
  2839                           	callstack 20
  2840   002072  0E76               	movlw	low (?_sprintf+4)
  2841   002074  0100               	movlb	0	; () banked
  2842   002076  6F78               	movwf	sprintf@ap& (0+255),b
  2843   002078  0E00               	movlw	high (?_sprintf+4)
  2844   00207A  6F79               	movwf	(sprintf@ap+1)& (0+255),b
  2845   00207C  C072  F07A         	movff	sprintf@s,sprintf@f
  2846   002080  C073  F07B         	movff	sprintf@s+1,sprintf@f+1
  2847   002084                     
  2848                           ; BSR set to: 0
  2849   002084  0E00               	movlw	0
  2850   002086  6F7E               	movwf	(sprintf@f+4)& (0+255),b
  2851   002088  0E00               	movlw	0
  2852   00208A  6F7D               	movwf	(sprintf@f+3)& (0+255),b
  2853   00208C                     
  2854                           ; BSR set to: 0
  2855   00208C  0E00               	movlw	0
  2856   00208E  6F84               	movwf	(sprintf@f+10)& (0+255),b
  2857   002090  0E00               	movlw	0
  2858   002092  6F83               	movwf	(sprintf@f+9)& (0+255),b
  2859   002094                     
  2860                           ; BSR set to: 0
  2861   002094  0E7A               	movlw	low sprintf@f
  2862   002096  6F6C               	movwf	vfprintf@fp& (0+255),b
  2863   002098  0E00               	movlw	high sprintf@f
  2864   00209A  6F6D               	movwf	(vfprintf@fp+1)& (0+255),b
  2865   00209C  C074  F06E         	movff	sprintf@fmt,vfprintf@fmt
  2866   0020A0  C075  F06F         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2867   0020A4  0E78               	movlw	low sprintf@ap
  2868   0020A6  6F70               	movwf	vfprintf@ap& (0+255),b
  2869   0020A8  0E00               	movlw	high sprintf@ap
  2870   0020AA  6F71               	movwf	(vfprintf@ap+1)& (0+255),b
  2871   0020AC  EC0F  F010         	call	_vfprintf	;wreg free
  2872   0020B0  0100               	movlb	0	; () banked
  2873   0020B2  517D               	movf	(sprintf@f+3)& (0+255),w,b
  2874   0020B4  2572               	addwf	sprintf@s& (0+255),w,b
  2875   0020B6  6ED9               	movwf	fsr2l,c
  2876   0020B8  517E               	movf	(sprintf@f+4)& (0+255),w,b
  2877   0020BA  2173               	addwfc	(sprintf@s+1)& (0+255),w,b
  2878   0020BC  6EDA               	movwf	fsr2h,c
  2879   0020BE  0E00               	movlw	0
  2880   0020C0  6EDF               	movwf	indf2,c
  2881   0020C2                     
  2882                           ; BSR set to: 0
  2883   0020C2  0012               	return		;funcret
  2884   0020C4                     __end_of_sprintf:
  2885                           	callstack 0
  2886                           
  2887 ;; *************** function _vfprintf *****************
  2888 ;; Defined at:
  2889 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  fp              2   12[BANK0 ] PTR struct _IO_FILE
  2892 ;;		 -> sprintf@f(11), 
  2893 ;;  fmt             2   14[BANK0 ] PTR const unsigned char 
  2894 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  2895 ;;  ap              2   16[BANK0 ] PTR PTR void 
  2896 ;;		 -> sprintf@ap(2), 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  cfmt            2   74[COMRAM] PTR unsigned char 
  2899 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  2   12[BANK0 ] int 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2909 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2910 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2912 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2913 ;;Total ram usage:        8 bytes
  2914 ;; Hardware stack levels used: 1
  2915 ;; Hardware stack levels required when called: 8
  2916 ;; This function calls:
  2917 ;;		_vfpfcnvrt
  2918 ;; This function is called by:
  2919 ;;		_sprintf
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text21
  2924   00201E                     __ptext21:
  2925                           	callstack 0
  2926   00201E                     _vfprintf:
  2927                           	callstack 20
  2928   00201E                     
  2929                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
  2930   00201E  C06E  F04B         	movff	vfprintf@fmt,vfprintf@cfmt
  2931   002022  C06F  F04C         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2932                           
  2933                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2934   002026  EF23  F010         	goto	l2867
  2935   00202A                     l2865:
  2936                           
  2937                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2938   00202A  C06C  F041         	movff	vfprintf@fp,vfpfcnvrt@fp
  2939   00202E  C06D  F042         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2940   002032  0E4B               	movlw	low vfprintf@cfmt
  2941   002034  6E43               	movwf	vfpfcnvrt@fmt^0,c
  2942   002036  0E00               	movlw	high vfprintf@cfmt
  2943   002038  6E44               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2944   00203A  C070  F045         	movff	vfprintf@ap,vfpfcnvrt@ap
  2945   00203E  C071  F046         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2946   002042  EC18  F007         	call	_vfpfcnvrt	;wreg free
  2947   002046                     l2867:
  2948                           
  2949                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
  2950   002046  C04B  FFF6         	movff	vfprintf@cfmt,tblptrl
  2951   00204A  C04C  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2952   00204E                     	if	0	;tblptru may be non-zero
  2953   00204E                     	endif
  2954   00204E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2955   00204E  0E00               	movlw	low (__mediumconst shr (0+16))
  2956   002050  6EF8               	movwf	tblptru,c
  2957   002052                     	endif
  2958   002052  0008               	tblrd		*
  2959   002054  50F5               	movf	tablat,w,c
  2960   002056  0900               	iorlw	0
  2961   002058  A4D8               	btfss	status,2,c
  2962   00205A  EF31  F010         	goto	u2221
  2963   00205E  EF33  F010         	goto	u2220
  2964   002062                     u2221:
  2965   002062  EF15  F010         	goto	l2865
  2966   002066                     u2220:
  2967   002066                     
  2968                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
  2969   002066  0E00               	movlw	0
  2970   002068  0100               	movlb	0	; () banked
  2971   00206A  6F6D               	movwf	(?_vfprintf+1)& (0+255),b
  2972   00206C  0E00               	movlw	0
  2973   00206E  6F6C               	movwf	?_vfprintf& (0+255),b
  2974   002070                     
  2975                           ; BSR set to: 0
  2976   002070  0012               	return		;funcret
  2977   002072                     __end_of_vfprintf:
  2978                           	callstack 0
  2979                           
  2980 ;; *************** function _vfpfcnvrt *****************
  2981 ;; Defined at:
  2982 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  fp              2   64[COMRAM] PTR struct _IO_FILE
  2985 ;;		 -> sprintf@f(11), 
  2986 ;;  fmt             2   66[COMRAM] PTR PTR unsigned char 
  2987 ;;		 -> vfprintf@cfmt(2), 
  2988 ;;  ap              2   68[COMRAM] PTR PTR void 
  2989 ;;		 -> sprintf@ap(2), 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  convarg         8    0[BANK0 ] struct .
  2992 ;;  cp              2   10[BANK0 ] PTR unsigned char 
  2993 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  2994 ;;  done            2    8[BANK0 ] int 
  2995 ;;  i               2    0        int 
  2996 ;;  c               1    0        unsigned char 
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  1    wreg      void 
  2999 ;; Registers used:
  3000 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3006 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3007 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3008 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3009 ;;      Totals:        10      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3010 ;;Total ram usage:       22 bytes
  3011 ;; Hardware stack levels used: 1
  3012 ;; Hardware stack levels required when called: 7
  3013 ;; This function calls:
  3014 ;;		_atoi
  3015 ;;		_fputc
  3016 ;;		_isdigit
  3017 ;;		_utoa
  3018 ;; This function is called by:
  3019 ;;		_vfprintf
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022                           
  3023                           	psect	text22
  3024   000E30                     __ptext22:
  3025                           	callstack 0
  3026   000E30                     _vfpfcnvrt:
  3027                           	callstack 20
  3028   000E30                     
  3029                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
  3030   000E30  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3031   000E34  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3032   000E38  CFDE FFF6          	movff	postinc2,tblptrl
  3033   000E3C  CFDD FFF7          	movff	postdec2,tblptrh
  3034   000E40                     	if	0	;tblptru may be non-zero
  3035   000E40                     	endif
  3036   000E40                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3037   000E40  0E00               	movlw	low (__mediumconst shr (0+16))
  3038   000E42  6EF8               	movwf	tblptru,c
  3039   000E44                     	endif
  3040   000E44  0008               	tblrd		*
  3041   000E46  50F5               	movf	tablat,w,c
  3042   000E48  0A25               	xorlw	37
  3043   000E4A  A4D8               	btfss	status,2,c
  3044   000E4C  EF2A  F007         	goto	u2161
  3045   000E50  EF2C  F007         	goto	u2160
  3046   000E54                     u2161:
  3047   000E54  EF69  F008         	goto	l2841
  3048   000E58                     u2160:
  3049   000E58                     
  3050                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
  3051   000E58  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3052   000E5C  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3053   000E60  2ADE               	incf	postinc2,f,c
  3054   000E62  0E00               	movlw	0
  3055   000E64  22DD               	addwfc	postdec2,f,c
  3056   000E66                     
  3057                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
  3058   000E66  0E00               	movlw	0
  3059   000E68  0100               	movlb	0	; () banked
  3060   000E6A  6FE5               	movwf	(_width+1)& (0+255),b
  3061   000E6C  0E00               	movlw	0
  3062   000E6E  6FE4               	movwf	_width& (0+255),b
  3063   000E70  C0E4  F051         	movff	_width,_flags
  3064   000E74                     
  3065                           ; BSR set to: 0
  3066                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
  3067   000E74  69E6               	setf	_prec& (0+255),b
  3068   000E76  69E7               	setf	(_prec+1)& (0+255),b
  3069   000E78                     
  3070                           ; BSR set to: 0
  3071                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
  3072   000E78  0E00               	movlw	0
  3073   000E7A  6F69               	movwf	(vfpfcnvrt@done+1)& (0+255),b
  3074   000E7C  0E00               	movlw	0
  3075   000E7E  6F68               	movwf	vfpfcnvrt@done& (0+255),b
  3076                           
  3077                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
  3078   000E80  EF6E  F007         	goto	l2805
  3079   000E84                     l2795:
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
  3083   000E84  8251               	bsf	_flags^0,1,c
  3084   000E86                     
  3085                           ; BSR set to: 0
  3086                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
  3087   000E86  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3088   000E8A  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3089   000E8E  2ADE               	incf	postinc2,f,c
  3090   000E90  0E00               	movlw	0
  3091   000E92  22DD               	addwfc	postdec2,f,c
  3092                           
  3093                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
  3094   000E94  EF6E  F007         	goto	l2805
  3095   000E98                     l2799:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
  3099   000E98  0E00               	movlw	0
  3100   000E9A  6F69               	movwf	(vfpfcnvrt@done+1)& (0+255),b
  3101   000E9C  0E01               	movlw	1
  3102   000E9E  6F68               	movwf	vfpfcnvrt@done& (0+255),b
  3103                           
  3104                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
  3105   000EA0  EF6E  F007         	goto	l2805
  3106   000EA4                     l2803:
  3107                           
  3108                           ; BSR set to: 0
  3109   000EA4  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3110   000EA8  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3111   000EAC  CFDE FFF6          	movff	postinc2,tblptrl
  3112   000EB0  CFDD FFF7          	movff	postdec2,tblptrh
  3113   000EB4                     	if	0	;tblptru may be non-zero
  3114   000EB4                     	endif
  3115   000EB4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3116   000EB4  0E00               	movlw	low (__mediumconst shr (0+16))
  3117   000EB6  6EF8               	movwf	tblptru,c
  3118   000EB8                     	endif
  3119   000EB8  0008               	tblrd		*
  3120   000EBA  50F5               	movf	tablat,w,c
  3121   000EBC  6E47               	movwf	??_vfpfcnvrt^0,c
  3122   000EBE  6A48               	clrf	(??_vfpfcnvrt+1)^0,c
  3123                           
  3124                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3125                           ; Switch size 1, requested type "simple"
  3126                           ; Number of cases is 1, Range of values is 0 to 0
  3127                           ; switch strategies available:
  3128                           ; Name         Instructions Cycles
  3129                           ; simple_byte            4     3 (average)
  3130                           ;	Chosen strategy is simple_byte
  3131   000EC0  5048               	movf	(??_vfpfcnvrt+1)^0,w,c
  3132   000EC2  0A00               	xorlw	0	; case 0
  3133   000EC4  B4D8               	btfsc	status,2,c
  3134   000EC6  EF67  F007         	goto	l3047
  3135   000ECA  EF4C  F007         	goto	l2799
  3136   000ECE                     l3047:
  3137                           
  3138                           ; BSR set to: 0
  3139                           ; Switch size 1, requested type "simple"
  3140                           ; Number of cases is 1, Range of values is 48 to 48
  3141                           ; switch strategies available:
  3142                           ; Name         Instructions Cycles
  3143                           ; simple_byte            4     3 (average)
  3144                           ;	Chosen strategy is simple_byte
  3145   000ECE  5047               	movf	??_vfpfcnvrt^0,w,c
  3146   000ED0  0A30               	xorlw	48	; case 48
  3147   000ED2  B4D8               	btfsc	status,2,c
  3148   000ED4  EF42  F007         	goto	l2795
  3149   000ED8  EF4C  F007         	goto	l2799
  3150   000EDC                     l2805:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
  3154   000EDC  5168               	movf	vfpfcnvrt@done& (0+255),w,b
  3155   000EDE  1169               	iorwf	(vfpfcnvrt@done+1)& (0+255),w,b
  3156   000EE0  B4D8               	btfsc	status,2,c
  3157   000EE2  EF75  F007         	goto	u2171
  3158   000EE6  EF77  F007         	goto	u2170
  3159   000EEA                     u2171:
  3160   000EEA  EF52  F007         	goto	l2803
  3161   000EEE                     u2170:
  3162   000EEE                     
  3163                           ; BSR set to: 0
  3164                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
  3165   000EEE  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3166   000EF2  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3167   000EF6  CFDE FFF6          	movff	postinc2,tblptrl
  3168   000EFA  CFDD FFF7          	movff	postdec2,tblptrh
  3169   000EFE                     	if	0	;tblptru may be non-zero
  3170   000EFE                     	endif
  3171   000EFE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3172   000EFE  0E00               	movlw	low (__mediumconst shr (0+16))
  3173   000F00  6EF8               	movwf	tblptru,c
  3174   000F02                     	endif
  3175   000F02  0008               	tblrd		*
  3176   000F04  50F5               	movf	tablat,w,c
  3177   000F06  0A2A               	xorlw	42
  3178   000F08  A4D8               	btfss	status,2,c
  3179   000F0A  EF89  F007         	goto	u2181
  3180   000F0E  EF8B  F007         	goto	u2180
  3181   000F12                     u2181:
  3182   000F12  EFB4  F007         	goto	l2815
  3183   000F16                     u2180:
  3184   000F16                     
  3185                           ; BSR set to: 0
  3186                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
  3187   000F16  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3188   000F1A  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3189   000F1E  2ADE               	incf	postinc2,f,c
  3190   000F20  0E00               	movlw	0
  3191   000F22  22DD               	addwfc	postdec2,f,c
  3192                           
  3193                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
  3194   000F24  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3195   000F28  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3196   000F2C  CFDF F047          	movff	indf2,??_vfpfcnvrt
  3197   000F30  0E02               	movlw	2
  3198   000F32  26DE               	addwf	postinc2,f,c
  3199   000F34  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
  3200   000F38  0E00               	movlw	0
  3201   000F3A  22DD               	addwfc	postdec2,f,c
  3202   000F3C  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
  3203   000F40  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3204   000F44  CFDE F0E4          	movff	postinc2,_width
  3205   000F48  CFDD F0E5          	movff	postdec2,_width+1
  3206   000F4C                     
  3207                           ; BSR set to: 0
  3208                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
  3209   000F4C  BFE5               	btfsc	(_width+1)& (0+255),7,b
  3210   000F4E  EFAD  F007         	goto	u2190
  3211   000F52  EFAB  F007         	goto	u2191
  3212   000F56                     u2191:
  3213   000F56  EFE9  F007         	goto	l2823
  3214   000F5A                     u2190:
  3215   000F5A                     
  3216                           ; BSR set to: 0
  3217                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
  3218   000F5A  8051               	bsf	_flags^0,0,c
  3219                           
  3220                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
  3221   000F5C  6DE4               	negf	_width& (0+255),b
  3222   000F5E  1FE5               	comf	(_width+1)& (0+255),f,b
  3223   000F60  B0D8               	btfsc	status,0,c
  3224   000F62  2BE5               	incf	(_width+1)& (0+255),f,b
  3225   000F64  EFE9  F007         	goto	l2823
  3226   000F68                     l2815:
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  3230   000F68  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3231   000F6C  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3232   000F70  CFDE F00C          	movff	postinc2,atoi@s
  3233   000F74  CFDD F00D          	movff	postdec2,atoi@s+1
  3234   000F78  EC11  F00B         	call	_atoi	;wreg free
  3235   000F7C  C00C  F0E4         	movff	?_atoi,_width
  3236   000F80  C00D  F0E5         	movff	?_atoi+1,_width+1
  3237                           
  3238                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  3239   000F84  EFCB  F007         	goto	l2821
  3240   000F88                     l2817:
  3241                           
  3242                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  3243   000F88  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3244   000F8C  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3245   000F90  2ADE               	incf	postinc2,f,c
  3246   000F92  0E00               	movlw	0
  3247   000F94  22DD               	addwfc	postdec2,f,c
  3248   000F96                     l2821:
  3249   000F96  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3250   000F9A  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3251   000F9E  CFDE FFF6          	movff	postinc2,tblptrl
  3252   000FA2  CFDD FFF7          	movff	postdec2,tblptrh
  3253   000FA6                     	if	0	;tblptru may be non-zero
  3254   000FA6                     	endif
  3255   000FA6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3256   000FA6  0E00               	movlw	low (__mediumconst shr (0+16))
  3257   000FA8  6EF8               	movwf	tblptru,c
  3258   000FAA                     	endif
  3259   000FAA  0008               	tblrd		*
  3260   000FAC  CFF5 F047          	movff	tablat,??_vfpfcnvrt
  3261   000FB0  0ED0               	movlw	208
  3262   000FB2  2447               	addwf	??_vfpfcnvrt^0,w,c
  3263   000FB4  6E48               	movwf	(??_vfpfcnvrt+1)^0,c
  3264   000FB6  6A49               	clrf	(??_vfpfcnvrt+2)^0,c
  3265   000FB8  0EFF               	movlw	255
  3266   000FBA  2249               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  3267   000FBC  5049               	movf	(??_vfpfcnvrt+2)^0,w,c
  3268   000FBE  E109               	bnz	u2200
  3269   000FC0  0E0A               	movlw	10
  3270   000FC2  5C48               	subwf	(??_vfpfcnvrt+1)^0,w,c
  3271   000FC4  A0D8               	btfss	status,0,c
  3272   000FC6  EFE7  F007         	goto	u2201
  3273   000FCA  EFE9  F007         	goto	u2200
  3274   000FCE                     u2201:
  3275   000FCE  EFC4  F007         	goto	l2817
  3276   000FD2                     u2200:
  3277   000FD2                     l2823:
  3278                           
  3279                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1239:   if (0
  3280   000FD2  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3281   000FD6  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3282   000FDA  CFDE F06A          	movff	postinc2,vfpfcnvrt@cp
  3283   000FDE  CFDD F06B          	movff	postdec2,vfpfcnvrt@cp+1
  3284   000FE2  C06A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3285   000FE6  C06B  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3286   000FEA                     	if	0	;tblptru may be non-zero
  3287   000FEA                     	endif
  3288   000FEA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3289   000FEA  0E00               	movlw	low (__mediumconst shr (0+16))
  3290   000FEC  6EF8               	movwf	tblptru,c
  3291   000FEE                     	endif
  3292   000FEE  0008               	tblrd		*
  3293   000FF0  50F5               	movf	tablat,w,c
  3294   000FF2  0A75               	xorlw	117
  3295   000FF4  A4D8               	btfss	status,2,c
  3296   000FF6  EFFF  F007         	goto	u2211
  3297   000FFA  EF01  F008         	goto	u2210
  3298   000FFE                     u2211:
  3299   000FFE  EF60  F008         	goto	l2837
  3300   001002                     u2210:
  3301   001002                     
  3302                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1252:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1295:    convarg.llu 
      +                          = (unsigned long long)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (un
      +                          signed int)0));
  3303   001002  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3304   001006  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3305   00100A  CFDF F047          	movff	indf2,??_vfpfcnvrt
  3306   00100E  0E02               	movlw	2
  3307   001010  26DE               	addwf	postinc2,f,c
  3308   001012  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
  3309   001016  0E00               	movlw	0
  3310   001018  22DD               	addwfc	postdec2,f,c
  3311   00101A  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
  3312   00101E  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3313   001022  CFDE F049          	movff	postinc2,??_vfpfcnvrt+2
  3314   001026  CFDD F04A          	movff	postdec2,??_vfpfcnvrt+3
  3315   00102A  C049  F060         	movff	??_vfpfcnvrt+2,vfpfcnvrt@convarg
  3316   00102E  C04A  F061         	movff	??_vfpfcnvrt+3,vfpfcnvrt@convarg+1
  3317   001032  0100               	movlb	0	; () banked
  3318   001034  6B62               	clrf	(vfpfcnvrt@convarg+2)& (0+255),b
  3319   001036  6B63               	clrf	(vfpfcnvrt@convarg+3)& (0+255),b
  3320   001038  6B64               	clrf	(vfpfcnvrt@convarg+4)& (0+255),b
  3321   00103A  6B65               	clrf	(vfpfcnvrt@convarg+5)& (0+255),b
  3322   00103C  6B66               	clrf	(vfpfcnvrt@convarg+6)& (0+255),b
  3323   00103E  6B67               	clrf	(vfpfcnvrt@convarg+7)& (0+255),b
  3324                           
  3325                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1297:    *fmt = c
      +                          p+1;
  3326   001040  0E01               	movlw	1
  3327   001042  256A               	addwf	vfpfcnvrt@cp& (0+255),w,b
  3328   001044  6E47               	movwf	??_vfpfcnvrt^0,c
  3329   001046  0E00               	movlw	0
  3330   001048  216B               	addwfc	(vfpfcnvrt@cp+1)& (0+255),w,b
  3331   00104A  6E48               	movwf	(??_vfpfcnvrt+1)^0,c
  3332   00104C  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3333   001050  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3334   001054  C047  FFDE         	movff	??_vfpfcnvrt,postinc2
  3335   001058  C048  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  3336                           
  3337                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1298:    switch (
      +                          *cp) {
  3338   00105C  EF48  F008         	goto	l2835
  3339   001060                     l2829:
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1305:      return
      +                           (void) utoa(fp, convarg.llu);;	Return value of _vfpfcnvrt is never used
  3343   001060  C041  F021         	movff	vfpfcnvrt@fp,utoa@fp
  3344   001064  C042  F022         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  3345   001068  C060  F023         	movff	vfpfcnvrt@convarg,utoa@d
  3346   00106C  C061  F024         	movff	vfpfcnvrt@convarg+1,utoa@d+1
  3347   001070  C062  F025         	movff	vfpfcnvrt@convarg+2,utoa@d+2
  3348   001074  C063  F026         	movff	vfpfcnvrt@convarg+3,utoa@d+3
  3349   001078  C064  F027         	movff	vfpfcnvrt@convarg+4,utoa@d+4
  3350   00107C  C065  F028         	movff	vfpfcnvrt@convarg+5,utoa@d+5
  3351   001080  C066  F029         	movff	vfpfcnvrt@convarg+6,utoa@d+6
  3352   001084  C067  F02A         	movff	vfpfcnvrt@convarg+7,utoa@d+7
  3353   001088  EC80  F008         	call	_utoa	;wreg free
  3354   00108C  EF7F  F008         	goto	l1096
  3355   001090                     l2835:
  3356                           
  3357                           ; BSR set to: 0
  3358   001090  C06A  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3359   001094  C06B  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3360   001098                     	if	0	;tblptru may be non-zero
  3361   001098                     	endif
  3362   001098                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3363   001098  0E00               	movlw	low (__mediumconst shr (0+16))
  3364   00109A  6EF8               	movwf	tblptru,c
  3365   00109C                     	endif
  3366   00109C  0008               	tblrd		*
  3367   00109E  50F5               	movf	tablat,w,c
  3368   0010A0  6E47               	movwf	??_vfpfcnvrt^0,c
  3369   0010A2  6A48               	clrf	(??_vfpfcnvrt+1)^0,c
  3370                           
  3371                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3372                           ; Switch size 1, requested type "simple"
  3373                           ; Number of cases is 1, Range of values is 0 to 0
  3374                           ; switch strategies available:
  3375                           ; Name         Instructions Cycles
  3376                           ; simple_byte            4     3 (average)
  3377                           ;	Chosen strategy is simple_byte
  3378   0010A4  5048               	movf	(??_vfpfcnvrt+1)^0,w,c
  3379   0010A6  0A00               	xorlw	0	; case 0
  3380   0010A8  B4D8               	btfsc	status,2,c
  3381   0010AA  EF59  F008         	goto	l3049
  3382   0010AE  EF60  F008         	goto	l2837
  3383   0010B2                     l3049:
  3384                           
  3385                           ; BSR set to: 0
  3386                           ; Switch size 1, requested type "simple"
  3387                           ; Number of cases is 1, Range of values is 117 to 117
  3388                           ; switch strategies available:
  3389                           ; Name         Instructions Cycles
  3390                           ; simple_byte            4     3 (average)
  3391                           ;	Chosen strategy is simple_byte
  3392   0010B2  5047               	movf	??_vfpfcnvrt^0,w,c
  3393   0010B4  0A75               	xorlw	117	; case 117
  3394   0010B6  B4D8               	btfsc	status,2,c
  3395   0010B8  EF30  F008         	goto	l2829
  3396   0010BC  EF60  F008         	goto	l2837
  3397   0010C0                     l2837:
  3398                           
  3399                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  3400   0010C0  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3401   0010C4  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3402   0010C8  2ADE               	incf	postinc2,f,c
  3403   0010CA  0E00               	movlw	0
  3404   0010CC  22DD               	addwfc	postdec2,f,c
  3405   0010CE  EF7F  F008         	goto	l1096
  3406   0010D2                     l2841:
  3407                           
  3408                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  3409   0010D2  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3410   0010D6  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3411   0010DA  CFDE FFF6          	movff	postinc2,tblptrl
  3412   0010DE  CFDD FFF7          	movff	postdec2,tblptrh
  3413   0010E2                     	if	0	;tblptru may be non-zero
  3414   0010E2                     	endif
  3415   0010E2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3416   0010E2  0E00               	movlw	low (__mediumconst shr (0+16))
  3417   0010E4  6EF8               	movwf	tblptru,c
  3418   0010E6                     	endif
  3419   0010E6  0008               	tblrd		*
  3420   0010E8  50F5               	movf	tablat,w,c
  3421   0010EA  6E06               	movwf	fputc@c^0,c
  3422   0010EC  6A07               	clrf	(fputc@c+1)^0,c
  3423   0010EE  C041  F008         	movff	vfpfcnvrt@fp,fputc@fp
  3424   0010F2  C042  F009         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3425   0010F6  EC42  F00E         	call	_fputc	;wreg free
  3426   0010FA  EF60  F008         	goto	l2837
  3427   0010FE                     l1096:
  3428   0010FE  0012               	return		;funcret
  3429   001100                     __end_of_vfpfcnvrt:
  3430                           	callstack 0
  3431                           
  3432 ;; *************** function _utoa *****************
  3433 ;; Defined at:
  3434 ;;		line 894 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  fp              2   32[COMRAM] PTR struct _IO_FILE
  3437 ;;		 -> sprintf@f(11), 
  3438 ;;  d               8   34[COMRAM] unsigned long long 
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  n               8   54[COMRAM] unsigned long long 
  3441 ;;  i               2   62[COMRAM] int 
  3442 ;;  w               2   52[COMRAM] int 
  3443 ;;  p               2   50[COMRAM] int 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3453 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3454 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3455 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3456 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3457 ;;Total ram usage:       32 bytes
  3458 ;; Hardware stack levels used: 1
  3459 ;; Hardware stack levels required when called: 6
  3460 ;; This function calls:
  3461 ;;		___lodiv
  3462 ;;		___lomod
  3463 ;;		_pad
  3464 ;; This function is called by:
  3465 ;;		_vfpfcnvrt
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text23
  3470   001100                     __ptext23:
  3471                           	callstack 0
  3472   001100                     _utoa:
  3473                           	callstack 20
  3474   001100                     
  3475                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 894: static void 
      +                          utoa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c9
      +                          9\common\doprnt.c: 895: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\do
      +                          prnt.c: 896:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\commo
      +                          n\doprnt.c: 897:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sour
      +                          ces\c99\common\doprnt.c: 901:     if (!(prec < 0)) {
  3476   001100  0100               	movlb	0	; () banked
  3477   001102  BFE7               	btfsc	(_prec+1)& (0+255),7,b
  3478   001104  EF86  F008         	goto	u2051
  3479   001108  EF88  F008         	goto	u2050
  3480   00110C                     u2051:
  3481   00110C  EF89  F008         	goto	l2721
  3482   001110                     u2050:
  3483   001110                     
  3484                           ; BSR set to: 0
  3485                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 902:         flag
      +                          s &= ~(1 << 1);
  3486   001110  9251               	bcf	_flags^0,1,c
  3487   001112                     l2721:
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 905:     p = (0 <
      +                           prec) ? prec : 1;
  3491   001112  BFE7               	btfsc	(_prec+1)& (0+255),7,b
  3492   001114  EF96  F008         	goto	u2060
  3493   001118  51E7               	movf	(_prec+1)& (0+255),w,b
  3494   00111A  E106               	bnz	u2061
  3495   00111C  05E6               	decf	_prec& (0+255),w,b
  3496   00111E  B0D8               	btfsc	status,0,c
  3497   001120  EF94  F008         	goto	u2061
  3498   001124  EF96  F008         	goto	u2060
  3499   001128                     u2061:
  3500   001128  EF9C  F008         	goto	l1062
  3501   00112C                     u2060:
  3502   00112C                     
  3503                           ; BSR set to: 0
  3504   00112C  0E00               	movlw	0
  3505   00112E  6E34               	movwf	(utoa@p+1)^0,c
  3506   001130  0E01               	movlw	1
  3507   001132  6E33               	movwf	utoa@p^0,c
  3508   001134  EFA0  F008         	goto	l1064
  3509   001138                     l1062:
  3510                           
  3511                           ; BSR set to: 0
  3512   001138  C0E6  F033         	movff	_prec,utoa@p
  3513   00113C  C0E7  F034         	movff	_prec+1,utoa@p+1
  3514   001140                     l1064:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 906:     w = widt
      +                          h;
  3518   001140  C0E4  F035         	movff	_width,utoa@w
  3519   001144  C0E5  F036         	movff	_width+1,utoa@w+1
  3520                           
  3521                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 909:     n = d;
  3522   001148  C023  F037         	movff	utoa@d,utoa@n
  3523   00114C  C024  F038         	movff	utoa@d+1,utoa@n+1
  3524   001150  C025  F039         	movff	utoa@d+2,utoa@n+2
  3525   001154  C026  F03A         	movff	utoa@d+3,utoa@n+3
  3526   001158  C027  F03B         	movff	utoa@d+4,utoa@n+4
  3527   00115C  C028  F03C         	movff	utoa@d+5,utoa@n+5
  3528   001160  C029  F03D         	movff	utoa@d+6,utoa@n+6
  3529   001164  C02A  F03E         	movff	utoa@d+7,utoa@n+7
  3530   001168                     
  3531                           ; BSR set to: 0
  3532                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 910:     i = size
      +                          of(dbuf) - 1;
  3533   001168  0E00               	movlw	0
  3534   00116A  6E40               	movwf	(utoa@i+1)^0,c
  3535   00116C  0E1F               	movlw	31
  3536   00116E  6E3F               	movwf	utoa@i^0,c
  3537   001170                     
  3538                           ; BSR set to: 0
  3539                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 911:     dbuf[i] 
      +                          = '\0';
  3540   001170  0E00               	movlw	0
  3541   001172  0101               	movlb	1	; () banked
  3542   001174  6F1F               	movwf	(_dbuf+31)& (0+255),b
  3543                           
  3544                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 912:     while (i
      +                           && (n || (0 < p)
  3545   001176  EF33  F009         	goto	l2739
  3546   00117A                     l2729:
  3547                           
  3548                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 916:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 917:         --i;
  3549   00117A  063F               	decf	utoa@i^0,f,c
  3550   00117C  A0D8               	btfss	status,0,c
  3551   00117E  0640               	decf	(utoa@i+1)^0,f,c
  3552   001180                     
  3553                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 918:         dbuf
      +                          [i] = '0' + (n % 10);
  3554   001180  0E00               	movlw	low _dbuf
  3555   001182  243F               	addwf	utoa@i^0,w,c
  3556   001184  6ED9               	movwf	fsr2l,c
  3557   001186  0E01               	movlw	high _dbuf
  3558   001188  2040               	addwfc	(utoa@i+1)^0,w,c
  3559   00118A  6EDA               	movwf	fsr2h,c
  3560   00118C  C037  F006         	movff	utoa@n,___lomod@dividend
  3561   001190  C038  F007         	movff	utoa@n+1,___lomod@dividend+1
  3562   001194  C039  F008         	movff	utoa@n+2,___lomod@dividend+2
  3563   001198  C03A  F009         	movff	utoa@n+3,___lomod@dividend+3
  3564   00119C  C03B  F00A         	movff	utoa@n+4,___lomod@dividend+4
  3565   0011A0  C03C  F00B         	movff	utoa@n+5,___lomod@dividend+5
  3566   0011A4  C03D  F00C         	movff	utoa@n+6,___lomod@dividend+6
  3567   0011A8  C03E  F00D         	movff	utoa@n+7,___lomod@dividend+7
  3568   0011AC  0E0A               	movlw	10
  3569   0011AE  6E0E               	movwf	___lomod@divisor^0,c
  3570   0011B0  0E00               	movlw	0
  3571   0011B2  6E0F               	movwf	(___lomod@divisor+1)^0,c
  3572   0011B4  0E00               	movlw	0
  3573   0011B6  6E10               	movwf	(___lomod@divisor+2)^0,c
  3574   0011B8  0E00               	movlw	0
  3575   0011BA  6E11               	movwf	(___lomod@divisor+3)^0,c
  3576   0011BC  0E00               	movlw	0
  3577   0011BE  6E12               	movwf	(___lomod@divisor+4)^0,c
  3578   0011C0  0E00               	movlw	0
  3579   0011C2  6E13               	movwf	(___lomod@divisor+5)^0,c
  3580   0011C4  0E00               	movlw	0
  3581   0011C6  6E14               	movwf	(___lomod@divisor+6)^0,c
  3582   0011C8  0E00               	movlw	0
  3583   0011CA  6E15               	movwf	(___lomod@divisor+7)^0,c
  3584   0011CC  ECDA  F00D         	call	___lomod	;wreg free
  3585   0011D0  C006  F02B         	movff	?___lomod,??_utoa
  3586   0011D4  C007  F02C         	movff	?___lomod+1,??_utoa+1
  3587   0011D8  C008  F02D         	movff	?___lomod+2,??_utoa+2
  3588   0011DC  C009  F02E         	movff	?___lomod+3,??_utoa+3
  3589   0011E0  C00A  F02F         	movff	?___lomod+4,??_utoa+4
  3590   0011E4  C00B  F030         	movff	?___lomod+5,??_utoa+5
  3591   0011E8  C00C  F031         	movff	?___lomod+6,??_utoa+6
  3592   0011EC  C00D  F032         	movff	?___lomod+7,??_utoa+7
  3593   0011F0  502B               	movf	??_utoa^0,w,c
  3594   0011F2  0F30               	addlw	48
  3595   0011F4  6EDF               	movwf	indf2,c
  3596   0011F6                     
  3597                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 919:         --p;
  3598   0011F6  0633               	decf	utoa@p^0,f,c
  3599   0011F8  A0D8               	btfss	status,0,c
  3600   0011FA  0634               	decf	(utoa@p+1)^0,f,c
  3601   0011FC                     
  3602                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 920:         --w;
  3603   0011FC  0635               	decf	utoa@w^0,f,c
  3604   0011FE  A0D8               	btfss	status,0,c
  3605   001200  0636               	decf	(utoa@w+1)^0,f,c
  3606   001202                     
  3607                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 921:         n = 
      +                          n / 10;
  3608   001202  C037  F006         	movff	utoa@n,___lodiv@dividend
  3609   001206  C038  F007         	movff	utoa@n+1,___lodiv@dividend+1
  3610   00120A  C039  F008         	movff	utoa@n+2,___lodiv@dividend+2
  3611   00120E  C03A  F009         	movff	utoa@n+3,___lodiv@dividend+3
  3612   001212  C03B  F00A         	movff	utoa@n+4,___lodiv@dividend+4
  3613   001216  C03C  F00B         	movff	utoa@n+5,___lodiv@dividend+5
  3614   00121A  C03D  F00C         	movff	utoa@n+6,___lodiv@dividend+6
  3615   00121E  C03E  F00D         	movff	utoa@n+7,___lodiv@dividend+7
  3616   001222  0E0A               	movlw	10
  3617   001224  6E0E               	movwf	___lodiv@divisor^0,c
  3618   001226  0E00               	movlw	0
  3619   001228  6E0F               	movwf	(___lodiv@divisor+1)^0,c
  3620   00122A  0E00               	movlw	0
  3621   00122C  6E10               	movwf	(___lodiv@divisor+2)^0,c
  3622   00122E  0E00               	movlw	0
  3623   001230  6E11               	movwf	(___lodiv@divisor+3)^0,c
  3624   001232  0E00               	movlw	0
  3625   001234  6E12               	movwf	(___lodiv@divisor+4)^0,c
  3626   001236  0E00               	movlw	0
  3627   001238  6E13               	movwf	(___lodiv@divisor+5)^0,c
  3628   00123A  0E00               	movlw	0
  3629   00123C  6E14               	movwf	(___lodiv@divisor+6)^0,c
  3630   00123E  0E00               	movlw	0
  3631   001240  6E15               	movwf	(___lodiv@divisor+7)^0,c
  3632   001242  ECF3  F00C         	call	___lodiv	;wreg free
  3633   001246  C006  F037         	movff	?___lodiv,utoa@n
  3634   00124A  C007  F038         	movff	?___lodiv+1,utoa@n+1
  3635   00124E  C008  F039         	movff	?___lodiv+2,utoa@n+2
  3636   001252  C009  F03A         	movff	?___lodiv+3,utoa@n+3
  3637   001256  C00A  F03B         	movff	?___lodiv+4,utoa@n+4
  3638   00125A  C00B  F03C         	movff	?___lodiv+5,utoa@n+5
  3639   00125E  C00C  F03D         	movff	?___lodiv+6,utoa@n+6
  3640   001262  C00D  F03E         	movff	?___lodiv+7,utoa@n+7
  3641   001266                     l2739:
  3642                           
  3643                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 912:     while (i
      +                           && (n || (0 < p)
  3644   001266  503F               	movf	utoa@i^0,w,c
  3645   001268  1040               	iorwf	(utoa@i+1)^0,w,c
  3646   00126A  B4D8               	btfsc	status,2,c
  3647   00126C  EF3A  F009         	goto	u2071
  3648   001270  EF3C  F009         	goto	u2070
  3649   001274                     u2071:
  3650   001274  EF6C  F009         	goto	l2749
  3651   001278                     u2070:
  3652   001278  5037               	movf	utoa@n^0,w,c
  3653   00127A  1038               	iorwf	(utoa@n+1)^0,w,c
  3654   00127C  1039               	iorwf	(utoa@n+2)^0,w,c
  3655   00127E  103A               	iorwf	(utoa@n+3)^0,w,c
  3656   001280  103B               	iorwf	(utoa@n+4)^0,w,c
  3657   001282  103C               	iorwf	(utoa@n+5)^0,w,c
  3658   001284  103D               	iorwf	(utoa@n+6)^0,w,c
  3659   001286  103E               	iorwf	(utoa@n+7)^0,w,c
  3660   001288  A4D8               	btfss	status,2,c
  3661   00128A  EF49  F009         	goto	u2081
  3662   00128E  EF4B  F009         	goto	u2080
  3663   001292                     u2081:
  3664   001292  EFBD  F008         	goto	l2729
  3665   001296                     u2080:
  3666   001296  BE34               	btfsc	(utoa@p+1)^0,7,c
  3667   001298  EF58  F009         	goto	u2090
  3668   00129C  5034               	movf	(utoa@p+1)^0,w,c
  3669   00129E  E106               	bnz	u2091
  3670   0012A0  0433               	decf	utoa@p^0,w,c
  3671   0012A2  B0D8               	btfsc	status,0,c
  3672   0012A4  EF56  F009         	goto	u2091
  3673   0012A8  EF58  F009         	goto	u2090
  3674   0012AC                     u2091:
  3675   0012AC  EFBD  F008         	goto	l2729
  3676   0012B0                     u2090:
  3677   0012B0  BE36               	btfsc	(utoa@w+1)^0,7,c
  3678   0012B2  EF63  F009         	goto	u2101
  3679   0012B6  5036               	movf	(utoa@w+1)^0,w,c
  3680   0012B8  E108               	bnz	u2100
  3681   0012BA  0435               	decf	utoa@w^0,w,c
  3682   0012BC  A0D8               	btfss	status,0,c
  3683   0012BE  EF63  F009         	goto	u2101
  3684   0012C2  EF65  F009         	goto	u2100
  3685   0012C6                     u2101:
  3686   0012C6  EF6C  F009         	goto	l2749
  3687   0012CA                     u2100:
  3688   0012CA  B251               	btfsc	_flags^0,1,c
  3689   0012CC  EF6A  F009         	goto	u2111
  3690   0012D0  EF6C  F009         	goto	u2110
  3691   0012D4                     u2111:
  3692   0012D4  EFBD  F008         	goto	l2729
  3693   0012D8                     u2110:
  3694   0012D8                     l2749:
  3695                           
  3696                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 925:     return (
      +                          void) pad(fp, &dbuf[i], w);
  3697   0012D8  C021  F016         	movff	utoa@fp,pad@fp
  3698   0012DC  C022  F017         	movff	utoa@fp+1,pad@fp+1
  3699   0012E0  0E00               	movlw	low _dbuf
  3700   0012E2  243F               	addwf	utoa@i^0,w,c
  3701   0012E4  6E18               	movwf	pad@buf^0,c
  3702   0012E6  0E01               	movlw	high _dbuf
  3703   0012E8  2040               	addwfc	(utoa@i+1)^0,w,c
  3704   0012EA  6E19               	movwf	(pad@buf+1)^0,c
  3705   0012EC  C035  F01A         	movff	utoa@w,pad@p
  3706   0012F0  C036  F01B         	movff	utoa@w+1,pad@p+1
  3707   0012F4  EC03  F00F         	call	_pad	;wreg free
  3708   0012F8  0012               	return		;funcret
  3709   0012FA                     __end_of_utoa:
  3710                           	callstack 0
  3711                           
  3712 ;; *************** function _pad *****************
  3713 ;; Defined at:
  3714 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;  fp              2   21[COMRAM] PTR struct _IO_FILE
  3717 ;;		 -> sprintf@f(11), 
  3718 ;;  buf             2   23[COMRAM] PTR unsigned char 
  3719 ;;		 -> dbuf(32), 
  3720 ;;  p               2   25[COMRAM] int 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  w               2   30[COMRAM] int 
  3723 ;;  i               2   28[COMRAM] int 
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  1    wreg      void 
  3726 ;; Registers used:
  3727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3733 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3734 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3736 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3737 ;;Total ram usage:       11 bytes
  3738 ;; Hardware stack levels used: 1
  3739 ;; Hardware stack levels required when called: 5
  3740 ;; This function calls:
  3741 ;;		_fputc
  3742 ;;		_fputs
  3743 ;; This function is called by:
  3744 ;;		_utoa
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text24
  3749   001E06                     __ptext24:
  3750                           	callstack 0
  3751   001E06                     _pad:
  3752                           	callstack 20
  3753   001E06                     
  3754                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  3755   001E06  A051               	btfss	_flags^0,0,c
  3756   001E08  EF08  F00F         	goto	u1971
  3757   001E0C  EF0A  F00F         	goto	u1970
  3758   001E10                     u1971:
  3759   001E10  EF14  F00F         	goto	l2687
  3760   001E14                     u1970:
  3761   001E14                     
  3762                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  3763   001E14  C018  F00F         	movff	pad@buf,fputs@s
  3764   001E18  C019  F010         	movff	pad@buf+1,fputs@s+1
  3765   001E1C  C016  F011         	movff	pad@fp,fputs@fp
  3766   001E20  C017  F012         	movff	pad@fp+1,fputs@fp+1
  3767   001E24  ECA7  F010         	call	_fputs	;wreg free
  3768   001E28                     l2687:
  3769                           
  3770                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  3771   001E28  BE1B               	btfsc	(pad@p+1)^0,7,c
  3772   001E2A  EF19  F00F         	goto	u1981
  3773   001E2E  EF1B  F00F         	goto	u1980
  3774   001E32                     u1981:
  3775   001E32  EF21  F00F         	goto	l2691
  3776   001E36                     u1980:
  3777   001E36  C01A  F01F         	movff	pad@p,pad@w
  3778   001E3A  C01B  F020         	movff	pad@p+1,pad@w+1
  3779   001E3E  EF25  F00F         	goto	l1052
  3780   001E42                     l2691:
  3781   001E42  0E00               	movlw	0
  3782   001E44  6E20               	movwf	(pad@w+1)^0,c
  3783   001E46  0E00               	movlw	0
  3784   001E48  6E1F               	movwf	pad@w^0,c
  3785   001E4A                     l1052:
  3786                           
  3787                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  3788   001E4A  0E00               	movlw	0
  3789   001E4C  6E1E               	movwf	(pad@i+1)^0,c
  3790   001E4E  0E00               	movlw	0
  3791   001E50  6E1D               	movwf	pad@i^0,c
  3792                           
  3793                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3794   001E52  EF37  F00F         	goto	l2697
  3795   001E56                     l2693:
  3796                           
  3797                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  3798   001E56  0E00               	movlw	0
  3799   001E58  6E07               	movwf	(fputc@c+1)^0,c
  3800   001E5A  0E20               	movlw	32
  3801   001E5C  6E06               	movwf	fputc@c^0,c
  3802   001E5E  C016  F008         	movff	pad@fp,fputc@fp
  3803   001E62  C017  F009         	movff	pad@fp+1,fputc@fp+1
  3804   001E66  EC42  F00E         	call	_fputc	;wreg free
  3805   001E6A                     
  3806                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  3807   001E6A  4A1D               	infsnz	pad@i^0,f,c
  3808   001E6C  2A1E               	incf	(pad@i+1)^0,f,c
  3809   001E6E                     l2697:
  3810                           
  3811                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  3812   001E6E  501F               	movf	pad@w^0,w,c
  3813   001E70  5C1D               	subwf	pad@i^0,w,c
  3814   001E72  501E               	movf	(pad@i+1)^0,w,c
  3815   001E74  0A80               	xorlw	128
  3816   001E76  6E1C               	movwf	??_pad^0,c
  3817   001E78  5020               	movf	(pad@w+1)^0,w,c
  3818   001E7A  0A80               	xorlw	128
  3819   001E7C  581C               	subwfb	??_pad^0,w,c
  3820   001E7E  A0D8               	btfss	status,0,c
  3821   001E80  EF44  F00F         	goto	u1991
  3822   001E84  EF46  F00F         	goto	u1990
  3823   001E88                     u1991:
  3824   001E88  EF2B  F00F         	goto	l2693
  3825   001E8C                     u1990:
  3826   001E8C                     
  3827                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  3828   001E8C  B051               	btfsc	_flags^0,0,c
  3829   001E8E  EF4B  F00F         	goto	u2001
  3830   001E92  EF4D  F00F         	goto	u2000
  3831   001E96                     u2001:
  3832   001E96  EF57  F00F         	goto	l1057
  3833   001E9A                     u2000:
  3834   001E9A                     
  3835                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  3836   001E9A  C018  F00F         	movff	pad@buf,fputs@s
  3837   001E9E  C019  F010         	movff	pad@buf+1,fputs@s+1
  3838   001EA2  C016  F011         	movff	pad@fp,fputs@fp
  3839   001EA6  C017  F012         	movff	pad@fp+1,fputs@fp+1
  3840   001EAA  ECA7  F010         	call	_fputs	;wreg free
  3841   001EAE                     l1057:
  3842   001EAE  0012               	return		;funcret
  3843   001EB0                     __end_of_pad:
  3844                           	callstack 0
  3845                           
  3846 ;; *************** function _fputs *****************
  3847 ;; Defined at:
  3848 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  s               2   14[COMRAM] PTR const unsigned char 
  3851 ;;		 -> dbuf(32), 
  3852 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3853 ;;		 -> sprintf@f(11), 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  i               2   19[COMRAM] int 
  3856 ;;  c               1   18[COMRAM] unsigned char 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  2   14[COMRAM] int 
  3859 ;; Registers used:
  3860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3866 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3867 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3869 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3870 ;;Total ram usage:        7 bytes
  3871 ;; Hardware stack levels used: 1
  3872 ;; Hardware stack levels required when called: 4
  3873 ;; This function calls:
  3874 ;;		_fputc
  3875 ;; This function is called by:
  3876 ;;		_pad
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text25
  3881   00214E                     __ptext25:
  3882                           	callstack 0
  3883   00214E                     _fputs:
  3884                           	callstack 20
  3885   00214E  0E00               	movlw	0
  3886   002150  6E15               	movwf	(fputs@i+1)^0,c
  3887   002152  0E00               	movlw	0
  3888   002154  6E14               	movwf	fputs@i^0,c
  3889   002156  EFB8  F010         	goto	l2637
  3890   00215A                     l2633:
  3891   00215A  C013  F006         	movff	fputs@c,fputc@c
  3892   00215E  6A07               	clrf	(fputc@c+1)^0,c
  3893   002160  C011  F008         	movff	fputs@fp,fputc@fp
  3894   002164  C012  F009         	movff	fputs@fp+1,fputc@fp+1
  3895   002168  EC42  F00E         	call	_fputc	;wreg free
  3896   00216C  4A14               	infsnz	fputs@i^0,f,c
  3897   00216E  2A15               	incf	(fputs@i+1)^0,f,c
  3898   002170                     l2637:
  3899   002170  5014               	movf	fputs@i^0,w,c
  3900   002172  240F               	addwf	fputs@s^0,w,c
  3901   002174  6ED9               	movwf	fsr2l,c
  3902   002176  5015               	movf	(fputs@i+1)^0,w,c
  3903   002178  2010               	addwfc	(fputs@s+1)^0,w,c
  3904   00217A  6EDA               	movwf	fsr2h,c
  3905   00217C  50DF               	movf	indf2,w,c
  3906   00217E  6E13               	movwf	fputs@c^0,c
  3907   002180  5013               	movf	fputs@c^0,w,c
  3908   002182  A4D8               	btfss	status,2,c
  3909   002184  EFC6  F010         	goto	u1891
  3910   002188  EFC8  F010         	goto	u1890
  3911   00218C                     u1891:
  3912   00218C  EFAD  F010         	goto	l2633
  3913   002190                     u1890:
  3914   002190  0012               	return		;funcret
  3915   002192                     __end_of_fputs:
  3916                           	callstack 0
  3917                           
  3918 ;; *************** function _fputc *****************
  3919 ;; Defined at:
  3920 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  c               2    5[COMRAM] int 
  3923 ;;  fp              2    7[COMRAM] PTR struct _IO_FILE
  3924 ;;		 -> sprintf@f(11), 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;		None
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  2    5[COMRAM] int 
  3929 ;; Registers used:
  3930 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3936 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3938 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3939 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3940 ;;Total ram usage:        9 bytes
  3941 ;; Hardware stack levels used: 1
  3942 ;; Hardware stack levels required when called: 3
  3943 ;; This function calls:
  3944 ;;		_putch
  3945 ;; This function is called by:
  3946 ;;		_pad
  3947 ;;		_vfpfcnvrt
  3948 ;;		_fputs
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text26
  3953   001C84                     __ptext26:
  3954                           	callstack 0
  3955   001C84                     _fputc:
  3956                           	callstack 20
  3957   001C84  5008               	movf	fputc@fp^0,w,c
  3958   001C86  1009               	iorwf	(fputc@fp+1)^0,w,c
  3959   001C88  B4D8               	btfsc	status,2,c
  3960   001C8A  EF49  F00E         	goto	u1851
  3961   001C8E  EF4B  F00E         	goto	u1850
  3962   001C92                     u1851:
  3963   001C92  EF54  F00E         	goto	l2621
  3964   001C96                     u1850:
  3965   001C96  5008               	movf	fputc@fp^0,w,c
  3966   001C98  1009               	iorwf	(fputc@fp+1)^0,w,c
  3967   001C9A  A4D8               	btfss	status,2,c
  3968   001C9C  EF52  F00E         	goto	u1861
  3969   001CA0  EF54  F00E         	goto	u1860
  3970   001CA4                     u1861:
  3971   001CA4  EF59  F00E         	goto	l2623
  3972   001CA8                     u1860:
  3973   001CA8                     l2621:
  3974   001CA8  5006               	movf	fputc@c^0,w,c
  3975   001CAA  EC87  F011         	call	_putch
  3976   001CAE  EFA6  F00E         	goto	l1154
  3977   001CB2                     l2623:
  3978   001CB2  EE20 F009          	lfsr	2,9
  3979   001CB6  5008               	movf	fputc@fp^0,w,c
  3980   001CB8  26D9               	addwf	fsr2l,f,c
  3981   001CBA  5009               	movf	(fputc@fp+1)^0,w,c
  3982   001CBC  22DA               	addwfc	fsr2h,f,c
  3983   001CBE  50DE               	movf	postinc2,w,c
  3984   001CC0  10DE               	iorwf	postinc2,w,c
  3985   001CC2  B4D8               	btfsc	status,2,c
  3986   001CC4  EF66  F00E         	goto	u1871
  3987   001CC8  EF68  F00E         	goto	u1870
  3988   001CCC                     u1871:
  3989   001CCC  EF83  F00E         	goto	l2627
  3990   001CD0                     u1870:
  3991   001CD0  EE20 F009          	lfsr	2,9
  3992   001CD4  5008               	movf	fputc@fp^0,w,c
  3993   001CD6  26D9               	addwf	fsr2l,f,c
  3994   001CD8  5009               	movf	(fputc@fp+1)^0,w,c
  3995   001CDA  22DA               	addwfc	fsr2h,f,c
  3996   001CDC  EE10 F003          	lfsr	1,3
  3997   001CE0  5008               	movf	fputc@fp^0,w,c
  3998   001CE2  26E1               	addwf	fsr1l,f,c
  3999   001CE4  5009               	movf	(fputc@fp+1)^0,w,c
  4000   001CE6  22E2               	addwfc	fsr1h,f,c
  4001   001CE8  50DE               	movf	postinc2,w,c
  4002   001CEA  5CE6               	subwf	postinc1,w,c
  4003   001CEC  50E6               	movf	postinc1,w,c
  4004   001CEE  0A80               	xorlw	128
  4005   001CF0  6E0E               	movwf	(??_fputc+4)^0,c
  4006   001CF2  50DE               	movf	postinc2,w,c
  4007   001CF4  0A80               	xorlw	128
  4008   001CF6  580E               	subwfb	(??_fputc+4)^0,w,c
  4009   001CF8  B0D8               	btfsc	status,0,c
  4010   001CFA  EF81  F00E         	goto	u1881
  4011   001CFE  EF83  F00E         	goto	u1880
  4012   001D02                     u1881:
  4013   001D02  EFA6  F00E         	goto	l1154
  4014   001D06                     u1880:
  4015   001D06                     l2627:
  4016   001D06  EE20 F003          	lfsr	2,3
  4017   001D0A  5008               	movf	fputc@fp^0,w,c
  4018   001D0C  26D9               	addwf	fsr2l,f,c
  4019   001D0E  5009               	movf	(fputc@fp+1)^0,w,c
  4020   001D10  22DA               	addwfc	fsr2h,f,c
  4021   001D12  CFDE F00A          	movff	postinc2,??_fputc
  4022   001D16  CFDD F00B          	movff	postdec2,??_fputc+1
  4023   001D1A  C008  FFD9         	movff	fputc@fp,fsr2l
  4024   001D1E  C009  FFDA         	movff	fputc@fp+1,fsr2h
  4025   001D22  CFDE F00C          	movff	postinc2,??_fputc+2
  4026   001D26  CFDD F00D          	movff	postdec2,??_fputc+3
  4027   001D2A  500A               	movf	??_fputc^0,w,c
  4028   001D2C  240C               	addwf	(??_fputc+2)^0,w,c
  4029   001D2E  6ED9               	movwf	fsr2l,c
  4030   001D30  500B               	movf	(??_fputc+1)^0,w,c
  4031   001D32  200D               	addwfc	(??_fputc+3)^0,w,c
  4032   001D34  6EDA               	movwf	fsr2h,c
  4033   001D36  C006  FFDF         	movff	fputc@c,indf2
  4034   001D3A  EE20 F003          	lfsr	2,3
  4035   001D3E  5008               	movf	fputc@fp^0,w,c
  4036   001D40  26D9               	addwf	fsr2l,f,c
  4037   001D42  5009               	movf	(fputc@fp+1)^0,w,c
  4038   001D44  22DA               	addwfc	fsr2h,f,c
  4039   001D46  2ADE               	incf	postinc2,f,c
  4040   001D48  0E00               	movlw	0
  4041   001D4A  22DD               	addwfc	postdec2,f,c
  4042   001D4C                     l1154:
  4043   001D4C  0012               	return		;funcret
  4044   001D4E                     __end_of_fputc:
  4045                           	callstack 0
  4046                           
  4047 ;; *************** function _putch *****************
  4048 ;; Defined at:
  4049 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;  c               1    wreg     unsigned char 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  c               1    0[COMRAM] unsigned char 
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  1    wreg      void 
  4056 ;; Registers used:
  4057 ;;		wreg
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4067 ;;Total ram usage:        0 bytes
  4068 ;; Hardware stack levels used: 1
  4069 ;; Hardware stack levels required when called: 2
  4070 ;; This function calls:
  4071 ;;		Nothing
  4072 ;; This function is called by:
  4073 ;;		_fputc
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text27
  4078   00230E                     __ptext27:
  4079                           	callstack 0
  4080   00230E                     _putch:
  4081                           	callstack 20
  4082   00230E  0012               	return		;funcret
  4083   002310                     __end_of_putch:
  4084                           	callstack 0
  4085                           
  4086 ;; *************** function ___lomod *****************
  4087 ;; Defined at:
  4088 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lomod.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;  dividend        8    5[COMRAM] unsigned long long 
  4091 ;;  divisor         8   13[COMRAM] unsigned long long 
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;  counter         1   21[COMRAM] unsigned char 
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  8    5[COMRAM] unsigned long long 
  4096 ;; Registers used:
  4097 ;;		wreg, status,2, status,0
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4103 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4104 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4107 ;;Total ram usage:       17 bytes
  4108 ;; Hardware stack levels used: 1
  4109 ;; Hardware stack levels required when called: 2
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		_utoa
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text28
  4118   001BB4                     __ptext28:
  4119                           	callstack 0
  4120   001BB4                     ___lomod:
  4121                           	callstack 23
  4122   001BB4  500E               	movf	___lomod@divisor^0,w,c
  4123   001BB6  100F               	iorwf	(___lomod@divisor+1)^0,w,c
  4124   001BB8  1010               	iorwf	(___lomod@divisor+2)^0,w,c
  4125   001BBA  1011               	iorwf	(___lomod@divisor+3)^0,w,c
  4126   001BBC  1012               	iorwf	(___lomod@divisor+4)^0,w,c
  4127   001BBE  1013               	iorwf	(___lomod@divisor+5)^0,w,c
  4128   001BC0  1014               	iorwf	(___lomod@divisor+6)^0,w,c
  4129   001BC2  1015               	iorwf	(___lomod@divisor+7)^0,w,c
  4130   001BC4  B4D8               	btfsc	status,2,c
  4131   001BC6  EFE7  F00D         	goto	u1941
  4132   001BCA  EFE9  F00D         	goto	u1940
  4133   001BCE                     u1941:
  4134   001BCE  EF31  F00E         	goto	l797
  4135   001BD2                     u1940:
  4136   001BD2  0E01               	movlw	1
  4137   001BD4  6E16               	movwf	___lomod@counter^0,c
  4138   001BD6  EFF7  F00D         	goto	l2673
  4139   001BDA                     l2671:
  4140   001BDA  90D8               	bcf	status,0,c
  4141   001BDC  360E               	rlcf	___lomod@divisor^0,f,c
  4142   001BDE  360F               	rlcf	(___lomod@divisor+1)^0,f,c
  4143   001BE0  3610               	rlcf	(___lomod@divisor+2)^0,f,c
  4144   001BE2  3611               	rlcf	(___lomod@divisor+3)^0,f,c
  4145   001BE4  3612               	rlcf	(___lomod@divisor+4)^0,f,c
  4146   001BE6  3613               	rlcf	(___lomod@divisor+5)^0,f,c
  4147   001BE8  3614               	rlcf	(___lomod@divisor+6)^0,f,c
  4148   001BEA  3615               	rlcf	(___lomod@divisor+7)^0,f,c
  4149   001BEC  2A16               	incf	___lomod@counter^0,f,c
  4150   001BEE                     l2673:
  4151   001BEE  AE15               	btfss	(___lomod@divisor+7)^0,7,c
  4152   001BF0  EFFC  F00D         	goto	u1951
  4153   001BF4  EFFE  F00D         	goto	u1950
  4154   001BF8                     u1951:
  4155   001BF8  EFED  F00D         	goto	l2671
  4156   001BFC                     u1950:
  4157   001BFC                     l2675:
  4158   001BFC  500E               	movf	___lomod@divisor^0,w,c
  4159   001BFE  5C06               	subwf	___lomod@dividend^0,w,c
  4160   001C00  500F               	movf	(___lomod@divisor+1)^0,w,c
  4161   001C02  5807               	subwfb	(___lomod@dividend+1)^0,w,c
  4162   001C04  5010               	movf	(___lomod@divisor+2)^0,w,c
  4163   001C06  5808               	subwfb	(___lomod@dividend+2)^0,w,c
  4164   001C08  5011               	movf	(___lomod@divisor+3)^0,w,c
  4165   001C0A  5809               	subwfb	(___lomod@dividend+3)^0,w,c
  4166   001C0C  5012               	movf	(___lomod@divisor+4)^0,w,c
  4167   001C0E  580A               	subwfb	(___lomod@dividend+4)^0,w,c
  4168   001C10  5013               	movf	(___lomod@divisor+5)^0,w,c
  4169   001C12  580B               	subwfb	(___lomod@dividend+5)^0,w,c
  4170   001C14  5014               	movf	(___lomod@divisor+6)^0,w,c
  4171   001C16  580C               	subwfb	(___lomod@dividend+6)^0,w,c
  4172   001C18  5015               	movf	(___lomod@divisor+7)^0,w,c
  4173   001C1A  580D               	subwfb	(___lomod@dividend+7)^0,w,c
  4174   001C1C  A0D8               	btfss	status,0,c
  4175   001C1E  EF13  F00E         	goto	u1961
  4176   001C22  EF15  F00E         	goto	u1960
  4177   001C26                     u1961:
  4178   001C26  EF25  F00E         	goto	l2679
  4179   001C2A                     u1960:
  4180   001C2A  500E               	movf	___lomod@divisor^0,w,c
  4181   001C2C  5E06               	subwf	___lomod@dividend^0,f,c
  4182   001C2E  500F               	movf	(___lomod@divisor+1)^0,w,c
  4183   001C30  5A07               	subwfb	(___lomod@dividend+1)^0,f,c
  4184   001C32  5010               	movf	(___lomod@divisor+2)^0,w,c
  4185   001C34  5A08               	subwfb	(___lomod@dividend+2)^0,f,c
  4186   001C36  5011               	movf	(___lomod@divisor+3)^0,w,c
  4187   001C38  5A09               	subwfb	(___lomod@dividend+3)^0,f,c
  4188   001C3A  5012               	movf	(___lomod@divisor+4)^0,w,c
  4189   001C3C  5A0A               	subwfb	(___lomod@dividend+4)^0,f,c
  4190   001C3E  5013               	movf	(___lomod@divisor+5)^0,w,c
  4191   001C40  5A0B               	subwfb	(___lomod@dividend+5)^0,f,c
  4192   001C42  5014               	movf	(___lomod@divisor+6)^0,w,c
  4193   001C44  5A0C               	subwfb	(___lomod@dividend+6)^0,f,c
  4194   001C46  5015               	movf	(___lomod@divisor+7)^0,w,c
  4195   001C48  5A0D               	subwfb	(___lomod@dividend+7)^0,f,c
  4196   001C4A                     l2679:
  4197   001C4A  90D8               	bcf	status,0,c
  4198   001C4C  3215               	rrcf	(___lomod@divisor+7)^0,f,c
  4199   001C4E  3214               	rrcf	(___lomod@divisor+6)^0,f,c
  4200   001C50  3213               	rrcf	(___lomod@divisor+5)^0,f,c
  4201   001C52  3212               	rrcf	(___lomod@divisor+4)^0,f,c
  4202   001C54  3211               	rrcf	(___lomod@divisor+3)^0,f,c
  4203   001C56  3210               	rrcf	(___lomod@divisor+2)^0,f,c
  4204   001C58  320F               	rrcf	(___lomod@divisor+1)^0,f,c
  4205   001C5A  320E               	rrcf	___lomod@divisor^0,f,c
  4206   001C5C  2E16               	decfsz	___lomod@counter^0,f,c
  4207   001C5E  EFFE  F00D         	goto	l2675
  4208   001C62                     l797:
  4209   001C62  C006  F006         	movff	___lomod@dividend,?___lomod
  4210   001C66  C007  F007         	movff	___lomod@dividend+1,?___lomod+1
  4211   001C6A  C008  F008         	movff	___lomod@dividend+2,?___lomod+2
  4212   001C6E  C009  F009         	movff	___lomod@dividend+3,?___lomod+3
  4213   001C72  C00A  F00A         	movff	___lomod@dividend+4,?___lomod+4
  4214   001C76  C00B  F00B         	movff	___lomod@dividend+5,?___lomod+5
  4215   001C7A  C00C  F00C         	movff	___lomod@dividend+6,?___lomod+6
  4216   001C7E  C00D  F00D         	movff	___lomod@dividend+7,?___lomod+7
  4217   001C82  0012               	return		;funcret
  4218   001C84                     __end_of___lomod:
  4219                           	callstack 0
  4220                           
  4221 ;; *************** function ___lodiv *****************
  4222 ;; Defined at:
  4223 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lodiv.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  dividend        8    5[COMRAM] unsigned long long 
  4226 ;;  divisor         8   13[COMRAM] unsigned long long 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  quotient        8   21[COMRAM] unsigned long long 
  4229 ;;  counter         1   29[COMRAM] unsigned char 
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  8    5[COMRAM] unsigned long long 
  4232 ;; Registers used:
  4233 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4239 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4240 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4242 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4243 ;;Total ram usage:       25 bytes
  4244 ;; Hardware stack levels used: 1
  4245 ;; Hardware stack levels required when called: 2
  4246 ;; This function calls:
  4247 ;;		Nothing
  4248 ;; This function is called by:
  4249 ;;		_utoa
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           	psect	text29
  4254   0019E6                     __ptext29:
  4255                           	callstack 0
  4256   0019E6                     ___lodiv:
  4257                           	callstack 23
  4258   0019E6  EE20  F016         	lfsr	2,___lodiv@quotient
  4259   0019EA  0E07               	movlw	7
  4260   0019EC                     u1901:
  4261   0019EC  6ADE               	clrf	postinc2,c
  4262   0019EE  06E8               	decf	wreg,f,c
  4263   0019F0  E2FD               	bc	u1901
  4264   0019F2  500E               	movf	___lodiv@divisor^0,w,c
  4265   0019F4  100F               	iorwf	(___lodiv@divisor+1)^0,w,c
  4266   0019F6  1010               	iorwf	(___lodiv@divisor+2)^0,w,c
  4267   0019F8  1011               	iorwf	(___lodiv@divisor+3)^0,w,c
  4268   0019FA  1012               	iorwf	(___lodiv@divisor+4)^0,w,c
  4269   0019FC  1013               	iorwf	(___lodiv@divisor+5)^0,w,c
  4270   0019FE  1014               	iorwf	(___lodiv@divisor+6)^0,w,c
  4271   001A00  1015               	iorwf	(___lodiv@divisor+7)^0,w,c
  4272   001A02  B4D8               	btfsc	status,2,c
  4273   001A04  EF06  F00D         	goto	u1911
  4274   001A08  EF08  F00D         	goto	u1910
  4275   001A0C                     u1911:
  4276   001A0C  EF5A  F00D         	goto	l787
  4277   001A10                     u1910:
  4278   001A10  0E01               	movlw	1
  4279   001A12  6E1E               	movwf	___lodiv@counter^0,c
  4280   001A14  EF16  F00D         	goto	l2653
  4281   001A18                     l2651:
  4282   001A18  90D8               	bcf	status,0,c
  4283   001A1A  360E               	rlcf	___lodiv@divisor^0,f,c
  4284   001A1C  360F               	rlcf	(___lodiv@divisor+1)^0,f,c
  4285   001A1E  3610               	rlcf	(___lodiv@divisor+2)^0,f,c
  4286   001A20  3611               	rlcf	(___lodiv@divisor+3)^0,f,c
  4287   001A22  3612               	rlcf	(___lodiv@divisor+4)^0,f,c
  4288   001A24  3613               	rlcf	(___lodiv@divisor+5)^0,f,c
  4289   001A26  3614               	rlcf	(___lodiv@divisor+6)^0,f,c
  4290   001A28  3615               	rlcf	(___lodiv@divisor+7)^0,f,c
  4291   001A2A  2A1E               	incf	___lodiv@counter^0,f,c
  4292   001A2C                     l2653:
  4293   001A2C  AE15               	btfss	(___lodiv@divisor+7)^0,7,c
  4294   001A2E  EF1B  F00D         	goto	u1921
  4295   001A32  EF1D  F00D         	goto	u1920
  4296   001A36                     u1921:
  4297   001A36  EF0C  F00D         	goto	l2651
  4298   001A3A                     u1920:
  4299   001A3A                     l2655:
  4300   001A3A  90D8               	bcf	status,0,c
  4301   001A3C  3616               	rlcf	___lodiv@quotient^0,f,c
  4302   001A3E  3617               	rlcf	(___lodiv@quotient+1)^0,f,c
  4303   001A40  3618               	rlcf	(___lodiv@quotient+2)^0,f,c
  4304   001A42  3619               	rlcf	(___lodiv@quotient+3)^0,f,c
  4305   001A44  361A               	rlcf	(___lodiv@quotient+4)^0,f,c
  4306   001A46  361B               	rlcf	(___lodiv@quotient+5)^0,f,c
  4307   001A48  361C               	rlcf	(___lodiv@quotient+6)^0,f,c
  4308   001A4A  361D               	rlcf	(___lodiv@quotient+7)^0,f,c
  4309   001A4C  500E               	movf	___lodiv@divisor^0,w,c
  4310   001A4E  5C06               	subwf	___lodiv@dividend^0,w,c
  4311   001A50  500F               	movf	(___lodiv@divisor+1)^0,w,c
  4312   001A52  5807               	subwfb	(___lodiv@dividend+1)^0,w,c
  4313   001A54  5010               	movf	(___lodiv@divisor+2)^0,w,c
  4314   001A56  5808               	subwfb	(___lodiv@dividend+2)^0,w,c
  4315   001A58  5011               	movf	(___lodiv@divisor+3)^0,w,c
  4316   001A5A  5809               	subwfb	(___lodiv@dividend+3)^0,w,c
  4317   001A5C  5012               	movf	(___lodiv@divisor+4)^0,w,c
  4318   001A5E  580A               	subwfb	(___lodiv@dividend+4)^0,w,c
  4319   001A60  5013               	movf	(___lodiv@divisor+5)^0,w,c
  4320   001A62  580B               	subwfb	(___lodiv@dividend+5)^0,w,c
  4321   001A64  5014               	movf	(___lodiv@divisor+6)^0,w,c
  4322   001A66  580C               	subwfb	(___lodiv@dividend+6)^0,w,c
  4323   001A68  5015               	movf	(___lodiv@divisor+7)^0,w,c
  4324   001A6A  580D               	subwfb	(___lodiv@dividend+7)^0,w,c
  4325   001A6C  A0D8               	btfss	status,0,c
  4326   001A6E  EF3B  F00D         	goto	u1931
  4327   001A72  EF3D  F00D         	goto	u1930
  4328   001A76                     u1931:
  4329   001A76  EF4E  F00D         	goto	l2663
  4330   001A7A                     u1930:
  4331   001A7A  500E               	movf	___lodiv@divisor^0,w,c
  4332   001A7C  5E06               	subwf	___lodiv@dividend^0,f,c
  4333   001A7E  500F               	movf	(___lodiv@divisor+1)^0,w,c
  4334   001A80  5A07               	subwfb	(___lodiv@dividend+1)^0,f,c
  4335   001A82  5010               	movf	(___lodiv@divisor+2)^0,w,c
  4336   001A84  5A08               	subwfb	(___lodiv@dividend+2)^0,f,c
  4337   001A86  5011               	movf	(___lodiv@divisor+3)^0,w,c
  4338   001A88  5A09               	subwfb	(___lodiv@dividend+3)^0,f,c
  4339   001A8A  5012               	movf	(___lodiv@divisor+4)^0,w,c
  4340   001A8C  5A0A               	subwfb	(___lodiv@dividend+4)^0,f,c
  4341   001A8E  5013               	movf	(___lodiv@divisor+5)^0,w,c
  4342   001A90  5A0B               	subwfb	(___lodiv@dividend+5)^0,f,c
  4343   001A92  5014               	movf	(___lodiv@divisor+6)^0,w,c
  4344   001A94  5A0C               	subwfb	(___lodiv@dividend+6)^0,f,c
  4345   001A96  5015               	movf	(___lodiv@divisor+7)^0,w,c
  4346   001A98  5A0D               	subwfb	(___lodiv@dividend+7)^0,f,c
  4347   001A9A  8016               	bsf	___lodiv@quotient^0,0,c
  4348   001A9C                     l2663:
  4349   001A9C  90D8               	bcf	status,0,c
  4350   001A9E  3215               	rrcf	(___lodiv@divisor+7)^0,f,c
  4351   001AA0  3214               	rrcf	(___lodiv@divisor+6)^0,f,c
  4352   001AA2  3213               	rrcf	(___lodiv@divisor+5)^0,f,c
  4353   001AA4  3212               	rrcf	(___lodiv@divisor+4)^0,f,c
  4354   001AA6  3211               	rrcf	(___lodiv@divisor+3)^0,f,c
  4355   001AA8  3210               	rrcf	(___lodiv@divisor+2)^0,f,c
  4356   001AAA  320F               	rrcf	(___lodiv@divisor+1)^0,f,c
  4357   001AAC  320E               	rrcf	___lodiv@divisor^0,f,c
  4358   001AAE  2E1E               	decfsz	___lodiv@counter^0,f,c
  4359   001AB0  EF1D  F00D         	goto	l2655
  4360   001AB4                     l787:
  4361   001AB4  C016  F006         	movff	___lodiv@quotient,?___lodiv
  4362   001AB8  C017  F007         	movff	___lodiv@quotient+1,?___lodiv+1
  4363   001ABC  C018  F008         	movff	___lodiv@quotient+2,?___lodiv+2
  4364   001AC0  C019  F009         	movff	___lodiv@quotient+3,?___lodiv+3
  4365   001AC4  C01A  F00A         	movff	___lodiv@quotient+4,?___lodiv+4
  4366   001AC8  C01B  F00B         	movff	___lodiv@quotient+5,?___lodiv+5
  4367   001ACC  C01C  F00C         	movff	___lodiv@quotient+6,?___lodiv+6
  4368   001AD0  C01D  F00D         	movff	___lodiv@quotient+7,?___lodiv+7
  4369   001AD4  0012               	return		;funcret
  4370   001AD6                     __end_of___lodiv:
  4371                           	callstack 0
  4372                           
  4373 ;; *************** function _atoi *****************
  4374 ;; Defined at:
  4375 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;  s               2   11[COMRAM] PTR const unsigned char 
  4378 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(3), 
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;  n               2   18[COMRAM] int 
  4381 ;;  neg             2   16[COMRAM] int 
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  2   11[COMRAM] int 
  4384 ;; Registers used:
  4385 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4392 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4393 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4394 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4395 ;;Total ram usage:        9 bytes
  4396 ;; Hardware stack levels used: 1
  4397 ;; Hardware stack levels required when called: 3
  4398 ;; This function calls:
  4399 ;;		___wmul
  4400 ;;		_isdigit
  4401 ;;		_isspace
  4402 ;; This function is called by:
  4403 ;;		_vfpfcnvrt
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text30
  4408   001622                     __ptext30:
  4409                           	callstack 0
  4410   001622                     _atoi:
  4411                           	callstack 23
  4412   001622  0E00               	movlw	0
  4413   001624  6E14               	movwf	(atoi@n+1)^0,c
  4414   001626  0E00               	movlw	0
  4415   001628  6E13               	movwf	atoi@n^0,c
  4416   00162A  0E00               	movlw	0
  4417   00162C  6E12               	movwf	(atoi@neg+1)^0,c
  4418   00162E  0E00               	movlw	0
  4419   001630  6E11               	movwf	atoi@neg^0,c
  4420   001632  EF1D  F00B         	goto	l2759
  4421   001636                     l2755:
  4422   001636  4A0C               	infsnz	atoi@s^0,f,c
  4423   001638  2A0D               	incf	(atoi@s+1)^0,f,c
  4424   00163A                     l2759:
  4425   00163A  C00C  FFF6         	movff	atoi@s,tblptrl
  4426   00163E  C00D  FFF7         	movff	atoi@s+1,tblptrh
  4427   001642                     	if	0	;tblptru may be non-zero
  4428   001642                     	endif
  4429   001642                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4430   001642  0E00               	movlw	low (__mediumconst shr (0+16))
  4431   001644  6EF8               	movwf	tblptru,c
  4432   001646                     	endif
  4433   001646  0008               	tblrd		*
  4434   001648  50F5               	movf	tablat,w,c
  4435   00164A  0A20               	xorlw	32
  4436   00164C  B4D8               	btfsc	status,2,c
  4437   00164E  EF2B  F00B         	goto	u2121
  4438   001652  EF2D  F00B         	goto	u2120
  4439   001656                     u2121:
  4440   001656  EF1B  F00B         	goto	l2755
  4441   00165A                     u2120:
  4442   00165A  C00C  FFF6         	movff	atoi@s,tblptrl
  4443   00165E  C00D  FFF7         	movff	atoi@s+1,tblptrh
  4444   001662                     	if	0	;tblptru may be non-zero
  4445   001662                     	endif
  4446   001662                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4447   001662  0E00               	movlw	low (__mediumconst shr (0+16))
  4448   001664  6EF8               	movwf	tblptru,c
  4449   001666                     	endif
  4450   001666  0008               	tblrd		*
  4451   001668  CFF5 F00E          	movff	tablat,??_atoi
  4452   00166C  0EF7               	movlw	247
  4453   00166E  240E               	addwf	??_atoi^0,w,c
  4454   001670  6E0F               	movwf	(??_atoi+1)^0,c
  4455   001672  6A10               	clrf	(??_atoi+2)^0,c
  4456   001674  0EFF               	movlw	255
  4457   001676  2210               	addwfc	(??_atoi+2)^0,f,c
  4458   001678  5010               	movf	(??_atoi+2)^0,w,c
  4459   00167A  E109               	bnz	u2130
  4460   00167C  0E05               	movlw	5
  4461   00167E  5C0F               	subwf	(??_atoi+1)^0,w,c
  4462   001680  A0D8               	btfss	status,0,c
  4463   001682  EF45  F00B         	goto	u2131
  4464   001686  EF47  F00B         	goto	u2130
  4465   00168A                     u2131:
  4466   00168A  EF1B  F00B         	goto	l2755
  4467   00168E                     u2130:
  4468   00168E  EF51  F00B         	goto	l2767
  4469   001692                     l2763:
  4470   001692  0E00               	movlw	0
  4471   001694  6E12               	movwf	(atoi@neg+1)^0,c
  4472   001696  0E01               	movlw	1
  4473   001698  6E11               	movwf	atoi@neg^0,c
  4474   00169A                     l2765:
  4475   00169A  4A0C               	infsnz	atoi@s^0,f,c
  4476   00169C  2A0D               	incf	(atoi@s+1)^0,f,c
  4477   00169E  EF8A  F00B         	goto	l2775
  4478   0016A2                     l2767:
  4479   0016A2  C00C  FFF6         	movff	atoi@s,tblptrl
  4480   0016A6  C00D  FFF7         	movff	atoi@s+1,tblptrh
  4481   0016AA                     	if	0	;tblptru may be non-zero
  4482   0016AA                     	endif
  4483   0016AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4484   0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
  4485   0016AC  6EF8               	movwf	tblptru,c
  4486   0016AE                     	endif
  4487   0016AE  0008               	tblrd		*
  4488   0016B0  50F5               	movf	tablat,w,c
  4489   0016B2  6E0E               	movwf	??_atoi^0,c
  4490   0016B4  6A0F               	clrf	(??_atoi+1)^0,c
  4491                           
  4492                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4493                           ; Switch size 1, requested type "simple"
  4494                           ; Number of cases is 1, Range of values is 0 to 0
  4495                           ; switch strategies available:
  4496                           ; Name         Instructions Cycles
  4497                           ; simple_byte            4     3 (average)
  4498                           ;	Chosen strategy is simple_byte
  4499   0016B6  500F               	movf	(??_atoi+1)^0,w,c
  4500   0016B8  0A00               	xorlw	0	; case 0
  4501   0016BA  B4D8               	btfsc	status,2,c
  4502   0016BC  EF62  F00B         	goto	l3051
  4503   0016C0  EF8A  F00B         	goto	l2775
  4504   0016C4                     l3051:
  4505                           
  4506                           ; Switch size 1, requested type "simple"
  4507                           ; Number of cases is 2, Range of values is 43 to 45
  4508                           ; switch strategies available:
  4509                           ; Name         Instructions Cycles
  4510                           ; simple_byte            7     4 (average)
  4511                           ;	Chosen strategy is simple_byte
  4512   0016C4  500E               	movf	??_atoi^0,w,c
  4513   0016C6  0A2B               	xorlw	43	; case 43
  4514   0016C8  B4D8               	btfsc	status,2,c
  4515   0016CA  EF4D  F00B         	goto	l2765
  4516   0016CE  0A06               	xorlw	6	; case 45
  4517   0016D0  B4D8               	btfsc	status,2,c
  4518   0016D2  EF49  F00B         	goto	l2763
  4519   0016D6  EF8A  F00B         	goto	l2775
  4520   0016DA                     l2769:
  4521   0016DA  C013  F006         	movff	atoi@n,___wmul@multiplier
  4522   0016DE  C014  F007         	movff	atoi@n+1,___wmul@multiplier+1
  4523   0016E2  0E00               	movlw	0
  4524   0016E4  6E09               	movwf	(___wmul@multiplicand+1)^0,c
  4525   0016E6  0E0A               	movlw	10
  4526   0016E8  6E08               	movwf	___wmul@multiplicand^0,c
  4527   0016EA  EC17  F011         	call	___wmul	;wreg free
  4528   0016EE  C00C  FFF6         	movff	atoi@s,tblptrl
  4529   0016F2  C00D  FFF7         	movff	atoi@s+1,tblptrh
  4530   0016F6                     	if	0	;tblptru may be non-zero
  4531   0016F6                     	endif
  4532   0016F6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4533   0016F6  0E00               	movlw	low (__mediumconst shr (0+16))
  4534   0016F8  6EF8               	movwf	tblptru,c
  4535   0016FA                     	endif
  4536   0016FA  0008               	tblrd		*
  4537   0016FC  50F5               	movf	tablat,w,c
  4538   0016FE  5E06               	subwf	?___wmul^0,f,c
  4539   001700  0E00               	movlw	0
  4540   001702  5A07               	subwfb	(?___wmul+1)^0,f,c
  4541   001704  0E30               	movlw	48
  4542   001706  2406               	addwf	?___wmul^0,w,c
  4543   001708  6E13               	movwf	atoi@n^0,c
  4544   00170A  0E00               	movlw	0
  4545   00170C  2007               	addwfc	(?___wmul+1)^0,w,c
  4546   00170E  6E14               	movwf	(atoi@n+1)^0,c
  4547   001710  EF4D  F00B         	goto	l2765
  4548   001714                     l2775:
  4549   001714  C00C  FFF6         	movff	atoi@s,tblptrl
  4550   001718  C00D  FFF7         	movff	atoi@s+1,tblptrh
  4551   00171C                     	if	0	;tblptru may be non-zero
  4552   00171C                     	endif
  4553   00171C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4554   00171C  0E00               	movlw	low (__mediumconst shr (0+16))
  4555   00171E  6EF8               	movwf	tblptru,c
  4556   001720                     	endif
  4557   001720  0008               	tblrd		*
  4558   001722  CFF5 F00E          	movff	tablat,??_atoi
  4559   001726  0ED0               	movlw	208
  4560   001728  240E               	addwf	??_atoi^0,w,c
  4561   00172A  6E0F               	movwf	(??_atoi+1)^0,c
  4562   00172C  6A10               	clrf	(??_atoi+2)^0,c
  4563   00172E  0EFF               	movlw	255
  4564   001730  2210               	addwfc	(??_atoi+2)^0,f,c
  4565   001732  5010               	movf	(??_atoi+2)^0,w,c
  4566   001734  E109               	bnz	u2140
  4567   001736  0E0A               	movlw	10
  4568   001738  5C0F               	subwf	(??_atoi+1)^0,w,c
  4569   00173A  A0D8               	btfss	status,0,c
  4570   00173C  EFA2  F00B         	goto	u2141
  4571   001740  EFA4  F00B         	goto	u2140
  4572   001744                     u2141:
  4573   001744  EF6D  F00B         	goto	l2769
  4574   001748                     u2140:
  4575   001748  5011               	movf	atoi@neg^0,w,c
  4576   00174A  1012               	iorwf	(atoi@neg+1)^0,w,c
  4577   00174C  A4D8               	btfss	status,2,c
  4578   00174E  EFAB  F00B         	goto	u2151
  4579   001752  EFAD  F00B         	goto	u2150
  4580   001756                     u2151:
  4581   001756  EFBB  F00B         	goto	l1125
  4582   00175A                     u2150:
  4583   00175A  C013  F00E         	movff	atoi@n,??_atoi
  4584   00175E  C014  F00F         	movff	atoi@n+1,??_atoi+1
  4585   001762  1E0E               	comf	??_atoi^0,f,c
  4586   001764  1E0F               	comf	(??_atoi+1)^0,f,c
  4587   001766  4A0E               	infsnz	??_atoi^0,f,c
  4588   001768  2A0F               	incf	(??_atoi+1)^0,f,c
  4589   00176A  C00E  F00C         	movff	??_atoi,?_atoi
  4590   00176E  C00F  F00D         	movff	??_atoi+1,?_atoi+1
  4591   001772  EFBF  F00B         	goto	l1128
  4592   001776                     l1125:
  4593   001776  C013  F00C         	movff	atoi@n,?_atoi
  4594   00177A  C014  F00D         	movff	atoi@n+1,?_atoi+1
  4595   00177E                     l1128:
  4596   00177E  0012               	return		;funcret
  4597   001780                     __end_of_atoi:
  4598                           	callstack 0
  4599                           
  4600 ;; *************** function _isspace *****************
  4601 ;; Defined at:
  4602 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  c               2    5[COMRAM] int 
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  2    5[COMRAM] int 
  4609 ;; Registers used:
  4610 ;;		wreg, status,2, status,0
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4616 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4618 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4619 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4620 ;;Total ram usage:        5 bytes
  4621 ;; Hardware stack levels used: 1
  4622 ;; Hardware stack levels required when called: 2
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_atoi
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           	psect	text31
  4631   0020C4                     __ptext31:
  4632                           	callstack 0
  4633   0020C4                     _isspace:
  4634                           	callstack 23
  4635   0020C4  0E01               	movlw	1
  4636   0020C6  6E0A               	movwf	_isspace$2016^0,c
  4637   0020C8  0E20               	movlw	32
  4638   0020CA  1806               	xorwf	isspace@c^0,w,c
  4639   0020CC  1007               	iorwf	(isspace@c+1)^0,w,c
  4640   0020CE  B4D8               	btfsc	status,2,c
  4641   0020D0  EF6C  F010         	goto	u2031
  4642   0020D4  EF6E  F010         	goto	u2030
  4643   0020D8                     u2031:
  4644   0020D8  EF81  F010         	goto	l2713
  4645   0020DC                     u2030:
  4646   0020DC  0EF7               	movlw	247
  4647   0020DE  2406               	addwf	isspace@c^0,w,c
  4648   0020E0  6E08               	movwf	??_isspace^0,c
  4649   0020E2  0EFF               	movlw	255
  4650   0020E4  2007               	addwfc	(isspace@c+1)^0,w,c
  4651   0020E6  6E09               	movwf	(??_isspace+1)^0,c
  4652   0020E8  5009               	movf	(??_isspace+1)^0,w,c
  4653   0020EA  E109               	bnz	u2040
  4654   0020EC  0E05               	movlw	5
  4655   0020EE  5C08               	subwf	??_isspace^0,w,c
  4656   0020F0  A0D8               	btfss	status,0,c
  4657   0020F2  EF7D  F010         	goto	u2041
  4658   0020F6  EF7F  F010         	goto	u2040
  4659   0020FA                     u2041:
  4660   0020FA  EF81  F010         	goto	l2713
  4661   0020FE                     u2040:
  4662   0020FE  0E00               	movlw	0
  4663   002100  6E0A               	movwf	_isspace$2016^0,c
  4664   002102                     l2713:
  4665   002102  C00A  F006         	movff	_isspace$2016,?_isspace
  4666   002106  6A07               	clrf	(?_isspace+1)^0,c
  4667   002108  0012               	return		;funcret
  4668   00210A                     __end_of_isspace:
  4669                           	callstack 0
  4670                           
  4671 ;; *************** function _isdigit *****************
  4672 ;; Defined at:
  4673 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;  c               2    5[COMRAM] int 
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;		None
  4678 ;; Return value:  Size  Location     Type
  4679 ;;                  2    5[COMRAM] int 
  4680 ;; Registers used:
  4681 ;;		wreg, status,2, status,0
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4687 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4689 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4690 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4691 ;;Total ram usage:        4 bytes
  4692 ;; Hardware stack levels used: 1
  4693 ;; Hardware stack levels required when called: 2
  4694 ;; This function calls:
  4695 ;;		Nothing
  4696 ;; This function is called by:
  4697 ;;		_vfpfcnvrt
  4698 ;;		_atoi
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text32
  4703   002202                     __ptext32:
  4704                           	callstack 0
  4705   002202                     _isdigit:
  4706                           	callstack 24
  4707   002202  0ED0               	movlw	208
  4708   002204  2406               	addwf	isdigit@c^0,w,c
  4709   002206  6E08               	movwf	??_isdigit^0,c
  4710   002208  0EFF               	movlw	255
  4711   00220A  2007               	addwfc	(isdigit@c+1)^0,w,c
  4712   00220C  6E09               	movwf	(??_isdigit+1)^0,c
  4713   00220E  5009               	movf	(??_isdigit+1)^0,w,c
  4714   002210  E10A               	bnz	u2010
  4715   002212  0E0A               	movlw	10
  4716   002214  5C08               	subwf	??_isdigit^0,w,c
  4717   002216  A0D8               	btfss	status,0,c
  4718   002218  EF10  F011         	goto	u2011
  4719   00221C  EF13  F011         	goto	u2010
  4720   002220                     u2011:
  4721   002220  0E01               	movlw	1
  4722   002222  EF14  F011         	goto	u2020
  4723   002226                     u2010:
  4724   002226  0E00               	movlw	0
  4725   002228                     u2020:
  4726   002228  6E06               	movwf	?_isdigit^0,c
  4727   00222A  6A07               	clrf	(?_isdigit+1)^0,c
  4728   00222C  0012               	return		;funcret
  4729   00222E                     __end_of_isdigit:
  4730                           	callstack 0
  4731                           
  4732 ;; *************** function ___wmul *****************
  4733 ;; Defined at:
  4734 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;  multiplier      2    5[COMRAM] unsigned int 
  4737 ;;  multiplicand    2    7[COMRAM] unsigned int 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  product         2    9[COMRAM] unsigned int 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  2    5[COMRAM] unsigned int 
  4742 ;; Registers used:
  4743 ;;		wreg, status,2, status,0, prodl, prodh
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4749 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4752 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4753 ;;Total ram usage:        6 bytes
  4754 ;; Hardware stack levels used: 1
  4755 ;; Hardware stack levels required when called: 2
  4756 ;; This function calls:
  4757 ;;		Nothing
  4758 ;; This function is called by:
  4759 ;;		_atoi
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text33
  4764   00222E                     __ptext33:
  4765                           	callstack 0
  4766   00222E                     ___wmul:
  4767                           	callstack 23
  4768   00222E  5006               	movf	___wmul@multiplier^0,w,c
  4769   002230  0208               	mulwf	___wmul@multiplicand^0,c
  4770   002232  CFF3 F00A          	movff	prodl,___wmul@product
  4771   002236  CFF4 F00B          	movff	prodh,___wmul@product+1
  4772   00223A  5006               	movf	___wmul@multiplier^0,w,c
  4773   00223C  0209               	mulwf	(___wmul@multiplicand+1)^0,c
  4774   00223E  50F3               	movf	243,w,c
  4775   002240  260B               	addwf	(___wmul@product+1)^0,f,c
  4776   002242  5007               	movf	(___wmul@multiplier+1)^0,w,c
  4777   002244  0208               	mulwf	___wmul@multiplicand^0,c
  4778   002246  50F3               	movf	243,w,c
  4779   002248  260B               	addwf	(___wmul@product+1)^0,f,c
  4780   00224A  C00A  F006         	movff	___wmul@product,?___wmul
  4781   00224E  C00B  F007         	movff	___wmul@product+1,?___wmul+1
  4782   002252  0012               	return		;funcret
  4783   002254                     __end_of___wmul:
  4784                           	callstack 0
  4785                           
  4786 ;; *************** function _HighISR *****************
  4787 ;; Defined at:
  4788 ;;		line 22 in file "interrupts.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;		None
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;		None
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  1    wreg      void 
  4795 ;; Registers used:
  4796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4804 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4805 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4806 ;;Total ram usage:        3 bytes
  4807 ;; Hardware stack levels used: 1
  4808 ;; Hardware stack levels required when called: 1
  4809 ;; This function calls:
  4810 ;;		_increment_seconds
  4811 ;; This function is called by:
  4812 ;;		Interrupt level 2
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	intcode
  4817   000008                     __pintcode:
  4818                           	callstack 0
  4819   000008                     _HighISR:
  4820                           	callstack 20
  4821                           
  4822                           ;incstack = 0
  4823   000008  8254               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4824   00000A  CFD9 F004          	movff	fsr2l,??_HighISR+1
  4825   00000E  CFDA F005          	movff	fsr2h,??_HighISR+2
  4826   000012                     
  4827                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  4828   000012  010E               	movlb	14	; () banked
  4829   000014  AB33               	btfss	51,5,b	;volatile
  4830   000016  EF0F  F000         	goto	i2u178_41
  4831   00001A  EF11  F000         	goto	i2u178_40
  4832   00001E                     i2u178_41:
  4833   00001E  EF3B  F000         	goto	i2l157
  4834   000022                     i2u178_40:
  4835   000022                     
  4836                           ; BSR set to: 14
  4837                           ;interrupts.c: 25:         LATHbits.LATH3 = !LATHbits.LATH3;
  4838   000022  A680               	btfss	128,3,c	;volatile
  4839   000024  EF16  F000         	goto	i2u179_41
  4840   000028  EF1A  F000         	goto	i2u179_40
  4841   00002C                     i2u179_41:
  4842   00002C  6A03               	clrf	??_HighISR^0,c
  4843   00002E  2A03               	incf	??_HighISR^0,f,c
  4844   000030  EF1B  F000         	goto	i2u180_48
  4845   000034                     i2u179_40:
  4846   000034  6A03               	clrf	??_HighISR^0,c
  4847   000036                     i2u180_48:
  4848   000036  4603               	rlncf	??_HighISR^0,f,c
  4849   000038  4603               	rlncf	??_HighISR^0,f,c
  4850   00003A  4603               	rlncf	??_HighISR^0,f,c
  4851   00003C  5080               	movf	128,w,c	;volatile
  4852   00003E  1803               	xorwf	??_HighISR^0,w,c
  4853   000040  0BF7               	andlw	-9
  4854   000042  1803               	xorwf	??_HighISR^0,w,c
  4855   000044  6E80               	movwf	128,c	;volatile
  4856   000046                     
  4857                           ;interrupts.c: 26: increment_seconds();
  4858   000046  ECC0  F00B         	call	_increment_seconds	;wreg free
  4859   00004A                     
  4860                           ;interrupts.c: 27:     if(test_mode == 0){
  4861   00004A  0100               	movlb	0	; () banked
  4862   00004C  51D2               	movf	_test_mode& (0+255),w,b
  4863   00004E  11D3               	iorwf	(_test_mode+1)& (0+255),w,b
  4864   000050  A4D8               	btfss	status,2,c
  4865   000052  EF2D  F000         	goto	i2u181_41
  4866   000056  EF2F  F000         	goto	i2u181_40
  4867   00005A                     i2u181_41:
  4868   00005A  EF35  F000         	goto	i2l2531
  4869   00005E                     i2u181_40:
  4870   00005E                     
  4871                           ; BSR set to: 0
  4872                           ;interrupts.c: 28:             TMR0H=0b00001011;
  4873   00005E  0E0B               	movlw	11
  4874   000060  6ED4               	movwf	212,c	;volatile
  4875                           
  4876                           ;interrupts.c: 29:             TMR0L=0b11011011;
  4877   000062  0EDB               	movlw	219
  4878   000064  6ED3               	movwf	211,c	;volatile
  4879                           
  4880                           ;interrupts.c: 30:     }else{
  4881   000066  EF39  F000         	goto	i2l2533
  4882   00006A                     i2l2531:
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;interrupts.c: 31:             TMR0H=0;
  4886   00006A  0E00               	movlw	0
  4887   00006C  6ED4               	movwf	212,c	;volatile
  4888                           
  4889                           ;interrupts.c: 32:             TMR0L=0;
  4890   00006E  0E00               	movlw	0
  4891   000070  6ED3               	movwf	211,c	;volatile
  4892   000072                     i2l2533:
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;interrupts.c: 34:         PIR0bits.TMR0IF = 0;
  4896   000072  010E               	movlb	14	; () banked
  4897   000074  9B33               	bcf	51,5,b	;volatile
  4898   000076                     i2l157:
  4899                           
  4900                           ; BSR set to: 14
  4901   000076  C005  FFDA         	movff	??_HighISR+2,fsr2h
  4902   00007A  C004  FFD9         	movff	??_HighISR+1,fsr2l
  4903   00007E  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4904   000080  0011               	retfie		f
  4905   000082                     __end_of_HighISR:
  4906                           	callstack 0
  4907                           
  4908 ;; *************** function _increment_seconds *****************
  4909 ;; Defined at:
  4910 ;;		line 46 in file "timers.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4926 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4927 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4928 ;;Total ram usage:        2 bytes
  4929 ;; Hardware stack levels used: 1
  4930 ;; This function calls:
  4931 ;;		Nothing
  4932 ;; This function is called by:
  4933 ;;		_HighISR
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           	psect	text35
  4938   001780                     __ptext35:
  4939                           	callstack 0
  4940   001780                     _increment_seconds:
  4941                           	callstack 20
  4942   001780                     
  4943                           ;timers.c: 47:     if(test_mode == 0){
  4944   001780  0100               	movlb	0	; () banked
  4945   001782  51D2               	movf	_test_mode& (0+255),w,b
  4946   001784  11D3               	iorwf	(_test_mode+1)& (0+255),w,b
  4947   001786  A4D8               	btfss	status,2,c
  4948   001788  EFC8  F00B         	goto	i2u167_41
  4949   00178C  EFCA  F00B         	goto	i2u167_40
  4950   001790                     i2u167_41:
  4951   001790  EFCE  F00B         	goto	i2l2427
  4952   001794                     i2u167_40:
  4953   001794                     
  4954                           ; BSR set to: 0
  4955                           ;timers.c: 48:     seconds += 1 ;
  4956   001794  4BEC               	infsnz	_seconds& (0+255),f,b
  4957   001796  2BED               	incf	(_seconds+1)& (0+255),f,b
  4958                           
  4959                           ;timers.c: 49:     }else{
  4960   001798  EFD2  F00B         	goto	i2l197
  4961   00179C                     i2l2427:
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;timers.c: 50:         minutes += 15;
  4965   00179C  0E0F               	movlw	15
  4966   00179E  27EA               	addwf	_minutes& (0+255),f,b
  4967   0017A0  0E00               	movlw	0
  4968   0017A2  23EB               	addwfc	(_minutes+1)& (0+255),f,b
  4969   0017A4                     i2l197:
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;timers.c: 52:     if (seconds == 60){
  4973   0017A4  0E3C               	movlw	60
  4974   0017A6  19EC               	xorwf	_seconds& (0+255),w,b
  4975   0017A8  11ED               	iorwf	(_seconds+1)& (0+255),w,b
  4976   0017AA  A4D8               	btfss	status,2,c
  4977   0017AC  EFDA  F00B         	goto	i2u168_41
  4978   0017B0  EFDC  F00B         	goto	i2u168_40
  4979   0017B4                     i2u168_41:
  4980   0017B4  EFE2  F00B         	goto	i2l2433
  4981   0017B8                     i2u168_40:
  4982   0017B8                     
  4983                           ; BSR set to: 0
  4984                           ;timers.c: 53:         seconds = 0;
  4985   0017B8  0E00               	movlw	0
  4986   0017BA  6FED               	movwf	(_seconds+1)& (0+255),b
  4987   0017BC  0E00               	movlw	0
  4988   0017BE  6FEC               	movwf	_seconds& (0+255),b
  4989   0017C0                     
  4990                           ; BSR set to: 0
  4991                           ;timers.c: 54:         minutes ++ ;
  4992   0017C0  4BEA               	infsnz	_minutes& (0+255),f,b
  4993   0017C2  2BEB               	incf	(_minutes+1)& (0+255),f,b
  4994   0017C4                     i2l2433:
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;timers.c: 56:     if (minutes == 60){
  4998   0017C4  0E3C               	movlw	60
  4999   0017C6  19EA               	xorwf	_minutes& (0+255),w,b
  5000   0017C8  11EB               	iorwf	(_minutes+1)& (0+255),w,b
  5001   0017CA  A4D8               	btfss	status,2,c
  5002   0017CC  EFEA  F00B         	goto	i2u169_41
  5003   0017D0  EFEC  F00B         	goto	i2u169_40
  5004   0017D4                     i2u169_41:
  5005   0017D4  EFF2  F00B         	goto	i2l2439
  5006   0017D8                     i2u169_40:
  5007   0017D8                     
  5008                           ; BSR set to: 0
  5009                           ;timers.c: 57:         minutes = 0;
  5010   0017D8  0E00               	movlw	0
  5011   0017DA  6FEB               	movwf	(_minutes+1)& (0+255),b
  5012   0017DC  0E00               	movlw	0
  5013   0017DE  6FEA               	movwf	_minutes& (0+255),b
  5014   0017E0                     
  5015                           ; BSR set to: 0
  5016                           ;timers.c: 58:         hours ++ ;
  5017   0017E0  4BE8               	infsnz	_hours& (0+255),f,b
  5018   0017E2  2BE9               	incf	(_hours+1)& (0+255),f,b
  5019   0017E4                     i2l2439:
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;timers.c: 60:     if (hours == 24){
  5023   0017E4  0E18               	movlw	24
  5024   0017E6  19E8               	xorwf	_hours& (0+255),w,b
  5025   0017E8  11E9               	iorwf	(_hours+1)& (0+255),w,b
  5026   0017EA  A4D8               	btfss	status,2,c
  5027   0017EC  EFFA  F00B         	goto	i2u170_41
  5028   0017F0  EFFC  F00B         	goto	i2u170_40
  5029   0017F4                     i2u170_41:
  5030   0017F4  EF04  F00C         	goto	i2l2447
  5031   0017F8                     i2u170_40:
  5032   0017F8                     
  5033                           ; BSR set to: 0
  5034                           ;timers.c: 61:         hours = 0;
  5035   0017F8  0E00               	movlw	0
  5036   0017FA  6FE9               	movwf	(_hours+1)& (0+255),b
  5037   0017FC  0E00               	movlw	0
  5038   0017FE  6FE8               	movwf	_hours& (0+255),b
  5039   001800                     
  5040                           ; BSR set to: 0
  5041                           ;timers.c: 62:         day ++ ;
  5042   001800  4BD0               	infsnz	_day& (0+255),f,b
  5043   001802  2BD1               	incf	(_day+1)& (0+255),f,b
  5044   001804                     
  5045                           ; BSR set to: 0
  5046                           ;timers.c: 63:         week_day ++;
  5047   001804  4A52               	infsnz	_week_day^0,f,c
  5048   001806  2A53               	incf	(_week_day+1)^0,f,c
  5049   001808                     i2l2447:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;timers.c: 65:     if (week_day == 7){
  5053   001808  0E07               	movlw	7
  5054   00180A  1852               	xorwf	_week_day^0,w,c
  5055   00180C  1053               	iorwf	(_week_day+1)^0,w,c
  5056   00180E  A4D8               	btfss	status,2,c
  5057   001810  EF0C  F00C         	goto	i2u171_41
  5058   001814  EF0E  F00C         	goto	i2u171_40
  5059   001818                     i2u171_41:
  5060   001818  EF12  F00C         	goto	i2l2451
  5061   00181C                     i2u171_40:
  5062   00181C                     
  5063                           ; BSR set to: 0
  5064                           ;timers.c: 66:         week_day = 0;
  5065   00181C  0E00               	movlw	0
  5066   00181E  6E53               	movwf	(_week_day+1)^0,c
  5067   001820  0E00               	movlw	0
  5068   001822  6E52               	movwf	_week_day^0,c
  5069   001824                     i2l2451:
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;timers.c: 68:     if (month == 1 && year%4 == 0){
  5073   001824  044F               	decf	_month^0,w,c
  5074   001826  1050               	iorwf	(_month+1)^0,w,c
  5075   001828  A4D8               	btfss	status,2,c
  5076   00182A  EF19  F00C         	goto	i2u172_41
  5077   00182E  EF1B  F00C         	goto	i2u172_40
  5078   001832                     i2u172_41:
  5079   001832  EF3C  F00C         	goto	i2l2461
  5080   001836                     i2u172_40:
  5081   001836                     
  5082                           ; BSR set to: 0
  5083   001836  0E03               	movlw	3
  5084   001838  15CE               	andwf	_year& (0+255),w,b
  5085   00183A  6E01               	movwf	??_increment_seconds^0,c
  5086   00183C  0E00               	movlw	0
  5087   00183E  15CF               	andwf	(_year+1)& (0+255),w,b
  5088   001840  6E02               	movwf	(??_increment_seconds+1)^0,c
  5089   001842  5001               	movf	??_increment_seconds^0,w,c
  5090   001844  1002               	iorwf	(??_increment_seconds+1)^0,w,c
  5091   001846  A4D8               	btfss	status,2,c
  5092   001848  EF28  F00C         	goto	i2u173_41
  5093   00184C  EF2A  F00C         	goto	i2u173_40
  5094   001850                     i2u173_41:
  5095   001850  EF3C  F00C         	goto	i2l2461
  5096   001854                     i2u173_40:
  5097   001854                     
  5098                           ; BSR set to: 0
  5099                           ;timers.c: 69:         if (day == 30)
  5100   001854  0E1E               	movlw	30
  5101   001856  19D0               	xorwf	_day& (0+255),w,b
  5102   001858  11D1               	iorwf	(_day+1)& (0+255),w,b
  5103   00185A  A4D8               	btfss	status,2,c
  5104   00185C  EF32  F00C         	goto	i2u174_41
  5105   001860  EF34  F00C         	goto	i2u174_40
  5106   001864                     i2u174_41:
  5107   001864  EF5B  F00C         	goto	i2l2467
  5108   001868                     i2u174_40:
  5109   001868                     i2l2457:
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;timers.c: 70:         {;timers.c: 71:             day = 1;
  5113   001868  0E00               	movlw	0
  5114   00186A  6FD1               	movwf	(_day+1)& (0+255),b
  5115   00186C  0E01               	movlw	1
  5116   00186E  6FD0               	movwf	_day& (0+255),b
  5117   001870                     
  5118                           ; BSR set to: 0
  5119                           ;timers.c: 72:             month += 1;
  5120   001870  4A4F               	infsnz	_month^0,f,c
  5121   001872  2A50               	incf	(_month+1)^0,f,c
  5122   001874  EF5B  F00C         	goto	i2l2467
  5123   001878                     i2l2461:
  5124                           
  5125                           ; BSR set to: 0
  5126   001878  90D8               	bcf	status,0,c
  5127   00187A  344F               	rlcf	_month^0,w,c
  5128   00187C  6ED9               	movwf	fsr2l,c
  5129   00187E  3450               	rlcf	(_month+1)^0,w,c
  5130   001880  6EDA               	movwf	fsr2h,c
  5131   001882  0EB2               	movlw	low (_month_days+2)
  5132   001884  26D9               	addwf	fsr2l,f,c
  5133   001886  0E00               	movlw	high (_month_days+2)
  5134   001888  22DA               	addwfc	fsr2h,f,c
  5135   00188A  CFDE F001          	movff	postinc2,??_increment_seconds
  5136   00188E  CFDD F002          	movff	postdec2,??_increment_seconds+1
  5137   001892  0E01               	movlw	1
  5138   001894  2601               	addwf	??_increment_seconds^0,f,c
  5139   001896  0E00               	movlw	0
  5140   001898  2202               	addwfc	(??_increment_seconds+1)^0,f,c
  5141   00189A  51D0               	movf	_day& (0+255),w,b
  5142   00189C  1801               	xorwf	??_increment_seconds^0,w,c
  5143   00189E  E107               	bnz	i2u175_41
  5144   0018A0  51D1               	movf	(_day+1)& (0+255),w,b
  5145   0018A2  1802               	xorwf	(??_increment_seconds+1)^0,w,c
  5146   0018A4  A4D8               	btfss	status,2,c
  5147   0018A6  EF57  F00C         	goto	i2u175_41
  5148   0018AA  EF59  F00C         	goto	i2u175_40
  5149   0018AE                     i2u175_41:
  5150   0018AE  EF5B  F00C         	goto	i2l2467
  5151   0018B2                     i2u175_40:
  5152   0018B2  EF34  F00C         	goto	i2l2457
  5153   0018B6                     i2l2467:
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;timers.c: 80:     if (month == 12)
  5157   0018B6  0E0C               	movlw	12
  5158   0018B8  184F               	xorwf	_month^0,w,c
  5159   0018BA  1050               	iorwf	(_month+1)^0,w,c
  5160   0018BC  A4D8               	btfss	status,2,c
  5161   0018BE  EF63  F00C         	goto	i2u176_41
  5162   0018C2  EF65  F00C         	goto	i2u176_40
  5163   0018C6                     i2u176_41:
  5164   0018C6  EF6B  F00C         	goto	i2l207
  5165   0018CA                     i2u176_40:
  5166   0018CA                     
  5167                           ; BSR set to: 0
  5168                           ;timers.c: 81:     {;timers.c: 82:         month = 0;
  5169   0018CA  0E00               	movlw	0
  5170   0018CC  6E50               	movwf	(_month+1)^0,c
  5171   0018CE  0E00               	movlw	0
  5172   0018D0  6E4F               	movwf	_month^0,c
  5173   0018D2                     
  5174                           ; BSR set to: 0
  5175                           ;timers.c: 83:         year += 1;
  5176   0018D2  4BCE               	infsnz	_year& (0+255),f,b
  5177   0018D4  2BCF               	incf	(_year+1)& (0+255),f,b
  5178   0018D6                     i2l207:
  5179                           
  5180                           ; BSR set to: 0
  5181   0018D6  0012               	return		;funcret
  5182   0018D8                     __end_of_increment_seconds:
  5183                           	callstack 0
  5184                           
  5185                           	psect	rparam
  5186   000000                     
  5187                           	psect	temp
  5188   000054                     btemp:
  5189                           	callstack 0
  5190   000054                     	ds	1
  5191   000000                     int$flags	set	btemp
  5192   000000                     wtemp8	set	btemp+1
  5193   000000                     ttemp5	set	btemp+1
  5194   000000                     ttemp6	set	btemp+4
  5195   000000                     ttemp7	set	btemp+8
  5196                           
  5197                           	psect	idloc
  5198                           
  5199                           ;Config register IDLOC0 @ 0x200000
  5200                           ;	unspecified, using default values
  5201   200000                     	org	2097152
  5202   200000  0FFF               	dw	4095
  5203                           
  5204                           ;Config register IDLOC1 @ 0x200002
  5205                           ;	unspecified, using default values
  5206   200002                     	org	2097154
  5207   200002  0FFF               	dw	4095
  5208                           
  5209                           ;Config register IDLOC2 @ 0x200004
  5210                           ;	unspecified, using default values
  5211   200004                     	org	2097156
  5212   200004  0FFF               	dw	4095
  5213                           
  5214                           ;Config register IDLOC3 @ 0x200006
  5215                           ;	unspecified, using default values
  5216   200006                     	org	2097158
  5217   200006  0FFF               	dw	4095
  5218                           
  5219                           ;Config register IDLOC4 @ 0x200008
  5220                           ;	unspecified, using default values
  5221   200008                     	org	2097160
  5222   200008  0FFF               	dw	4095
  5223                           
  5224                           ;Config register IDLOC5 @ 0x20000A
  5225                           ;	unspecified, using default values
  5226   20000A                     	org	2097162
  5227   20000A  0FFF               	dw	4095
  5228                           
  5229                           ;Config register IDLOC6 @ 0x20000C
  5230                           ;	unspecified, using default values
  5231   20000C                     	org	2097164
  5232   20000C  0FFF               	dw	4095
  5233                           
  5234                           ;Config register IDLOC7 @ 0x20000E
  5235                           ;	unspecified, using default values
  5236   20000E                     	org	2097166
  5237   20000E  0FFF               	dw	4095
  5238                           
  5239                           	psect	config
  5240                           
  5241                           ;Config register CONFIG1L @ 0x300000
  5242                           ;	External Oscillator mode Selection bits
  5243                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5244                           ;	Power-up default value for COSC bits
  5245                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5246   300000                     	org	3145728
  5247   300000  AA                 	db	170
  5248                           
  5249                           ;Config register CONFIG1H @ 0x300001
  5250                           ;	unspecified, using default values
  5251                           ;	Clock Out Enable bit
  5252                           ;	CLKOUTEN = 0x1, unprogrammed default
  5253                           ;	Clock Switch Enable bit
  5254                           ;	CSWEN = 0x1, unprogrammed default
  5255                           ;	Fail-Safe Clock Monitor Enable bit
  5256                           ;	FCMEN = 0x1, unprogrammed default
  5257   300001                     	org	3145729
  5258   300001  FF                 	db	255
  5259                           
  5260                           ;Config register CONFIG2L @ 0x300002
  5261                           ;	unspecified, using default values
  5262                           ;	Master Clear Enable bit
  5263                           ;	MCLRE = 0x1, unprogrammed default
  5264                           ;	Power-up Timer Enable bit
  5265                           ;	PWRTE = 0x1, unprogrammed default
  5266                           ;	Low-power BOR enable bit
  5267                           ;	LPBOREN = 0x1, unprogrammed default
  5268                           ;	Brown-out Reset Enable bits
  5269                           ;	BOREN = 0x3, unprogrammed default
  5270   300002                     	org	3145730
  5271   300002  FF                 	db	255
  5272                           
  5273                           ;Config register CONFIG2H @ 0x300003
  5274                           ;	unspecified, using default values
  5275                           ;	Brown Out Reset Voltage selection bits
  5276                           ;	BORV = 0x3, unprogrammed default
  5277                           ;	ZCD Disable bit
  5278                           ;	ZCD = 0x1, unprogrammed default
  5279                           ;	PPSLOCK bit One-Way Set Enable bit
  5280                           ;	PPS1WAY = 0x1, unprogrammed default
  5281                           ;	Stack Full/Underflow Reset Enable bit
  5282                           ;	STVREN = 0x1, unprogrammed default
  5283                           ;	Debugger Enable bit
  5284                           ;	DEBUG = 0x1, unprogrammed default
  5285                           ;	Extended Instruction Set Enable bit
  5286                           ;	XINST = 0x1, unprogrammed default
  5287   300003                     	org	3145731
  5288   300003  FF                 	db	255
  5289                           
  5290                           ;Config register CONFIG3L @ 0x300004
  5291                           ;	WDT Period Select bits
  5292                           ;	WDTCPS = 0x1F, unprogrammed default
  5293                           ;	WDT operating mode
  5294                           ;	WDTE = OFF, WDT Disabled
  5295   300004                     	org	3145732
  5296   300004  9F                 	db	159
  5297                           
  5298                           ;Config register CONFIG3H @ 0x300005
  5299                           ;	unspecified, using default values
  5300                           ;	WDT Window Select bits
  5301                           ;	WDTCWS = 0x7, unprogrammed default
  5302                           ;	WDT input clock selector
  5303                           ;	WDTCCS = 0x7, unprogrammed default
  5304   300005                     	org	3145733
  5305   300005  FF                 	db	255
  5306                           
  5307                           ;Config register CONFIG4L @ 0x300006
  5308                           ;	unspecified, using default values
  5309                           ;	Write Protection Block 0
  5310                           ;	WRT0 = 0x1, unprogrammed default
  5311                           ;	Write Protection Block 1
  5312                           ;	WRT1 = 0x1, unprogrammed default
  5313                           ;	Write Protection Block 2
  5314                           ;	WRT2 = 0x1, unprogrammed default
  5315                           ;	Write Protection Block 3
  5316                           ;	WRT3 = 0x1, unprogrammed default
  5317                           ;	Write Protection Block 3
  5318                           ;	WRT4 = 0x1, unprogrammed default
  5319                           ;	Write Protection Block 3
  5320                           ;	WRT5 = 0x1, unprogrammed default
  5321                           ;	Write Protection Block 3
  5322                           ;	WRT6 = 0x1, unprogrammed default
  5323                           ;	Write Protection Block 3
  5324                           ;	WRT7 = 0x1, unprogrammed default
  5325   300006                     	org	3145734
  5326   300006  FF                 	db	255
  5327                           
  5328                           ;Config register CONFIG4H @ 0x300007
  5329                           ;	unspecified, using default values
  5330                           ;	Configuration Register Write Protection bit
  5331                           ;	WRTC = 0x1, unprogrammed default
  5332                           ;	Boot Block Write Protection bit
  5333                           ;	WRTB = 0x1, unprogrammed default
  5334                           ;	Data EEPROM Write Protection bit
  5335                           ;	WRTD = 0x1, unprogrammed default
  5336                           ;	Scanner Enable bit
  5337                           ;	SCANE = 0x1, unprogrammed default
  5338                           ;	Low Voltage Programming Enable bit
  5339                           ;	LVP = 0x1, unprogrammed default
  5340   300007                     	org	3145735
  5341   300007  FF                 	db	255
  5342                           
  5343                           ;Config register CONFIG5L @ 0x300008
  5344                           ;	unspecified, using default values
  5345                           ;	UserNVM Program Memory Code Protection bit
  5346                           ;	CP = 0x1, unprogrammed default
  5347                           ;	DataNVM Memory Code Protection bit
  5348                           ;	CPD = 0x1, unprogrammed default
  5349   300008                     	org	3145736
  5350   300008  FF                 	db	255
  5351                           
  5352                           ;Config register CONFIG5H @ 0x300009
  5353                           ;	unspecified, using default values
  5354   300009                     	org	3145737
  5355   300009  FF                 	db	255
  5356                           
  5357                           ;Config register CONFIG6L @ 0x30000A
  5358                           ;	unspecified, using default values
  5359                           ;	Table Read Protection Block 0
  5360                           ;	EBTR0 = 0x1, unprogrammed default
  5361                           ;	Table Read Protection Block 1
  5362                           ;	EBTR1 = 0x1, unprogrammed default
  5363                           ;	Table Read Protection Block 2
  5364                           ;	EBTR2 = 0x1, unprogrammed default
  5365                           ;	Table Read Protection Block 3
  5366                           ;	EBTR3 = 0x1, unprogrammed default
  5367                           ;	Table Read Protection Block 4
  5368                           ;	EBTR4 = 0x1, unprogrammed default
  5369                           ;	Table Read Protection Block 5
  5370                           ;	EBTR5 = 0x1, unprogrammed default
  5371                           ;	Table Read Protection Block 6
  5372                           ;	EBTR6 = 0x1, unprogrammed default
  5373                           ;	Table Read Protection Block 7
  5374                           ;	EBTR7 = 0x1, unprogrammed default
  5375   30000A                     	org	3145738
  5376   30000A  FF                 	db	255
  5377                           
  5378                           ;Config register CONFIG6H @ 0x30000B
  5379                           ;	unspecified, using default values
  5380                           ;	Boot Block Table Read Protection bit
  5381                           ;	EBTRB = 0x1, unprogrammed default
  5382   30000B                     	org	3145739
  5383   30000B  FF                 	db	255
  5384                           tosu	equ	0xFFF
  5385                           tosh	equ	0xFFE
  5386                           tosl	equ	0xFFD
  5387                           stkptr	equ	0xFFC
  5388                           pclatu	equ	0xFFB
  5389                           pclath	equ	0xFFA
  5390                           pcl	equ	0xFF9
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           prodh	equ	0xFF4
  5396                           prodl	equ	0xFF3
  5397                           indf0	equ	0xFEF
  5398                           postinc0	equ	0xFEE
  5399                           postdec0	equ	0xFED
  5400                           preinc0	equ	0xFEC
  5401                           plusw0	equ	0xFEB
  5402                           fsr0h	equ	0xFEA
  5403                           fsr0l	equ	0xFE9
  5404                           wreg	equ	0xFE8
  5405                           indf1	equ	0xFE7
  5406                           postinc1	equ	0xFE6
  5407                           postdec1	equ	0xFE5
  5408                           preinc1	equ	0xFE4
  5409                           plusw1	equ	0xFE3
  5410                           fsr1h	equ	0xFE2
  5411                           fsr1l	equ	0xFE1
  5412                           bsr	equ	0xFE0
  5413                           indf2	equ	0xFDF
  5414                           postinc2	equ	0xFDE
  5415                           postdec2	equ	0xFDD
  5416                           preinc2	equ	0xFDC
  5417                           plusw2	equ	0xFDB
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8

Data Sizes:
    Strings     46
    Constant    0
    Data        38
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      83
    BANK0           160     80     142
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S1933$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 4
		 -> main@ADC(BANK0[3]), main@Yea(BANK0[4]), main@Mon(BANK0[2]), main@Day(BANK0[2]), 
		 -> main@Hou(BANK0[2]), main@Min(BANK0[2]), main@Sec(BANK0[2]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1885$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S1885$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    ADC2String@buf	PTR unsigned char  size(2) Largest target is 4
		 -> main@ADC(BANK0[3]), main@Yea(BANK0[4]), main@Mon(BANK0[2]), main@Day(BANK0[2]), 
		 -> main@Hou(BANK0[2]), main@Min(BANK0[2]), main@Sec(BANK0[2]), 

    LCD_sendstring@strlst	PTR PTR unsigned char  size(2) Largest target is 16
		 -> main@lst(BANK0[16]), 

    sp__get_week_day	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    main@lst	PTR unsigned char [8] size(2) Largest target is 4
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), NULL(NULL[0]), 
		 -> main@ADC(BANK0[3]), main@Yea(BANK0[4]), main@Mon(BANK0[2]), main@Day(BANK0[2]), 
		 -> main@Hou(BANK0[2]), main@Min(BANK0[2]), main@Sec(BANK0[2]), 

    main@F14260	PTR unsigned char [8] size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _LCD_sendstring->_LCD_setline
    _LCD_setline->_LCD_sendbyte
    _LCD_clear->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _atoi->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_increment_seconds

Critical Paths under _main in BANK0

    _main->_ADC2String
    _ADC2String->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0   26240
                                             76 COMRAM     2     2      0
                                             43 BANK0     37    37      0
                         _ADC2String
                         _ADC_getval
                           _ADC_init
                    _Interrupts_init
                           _LCD_Init
                          _LCD_clear
                     _LCD_sendstring
                        _Timer0_init
                            _get_day
                          _get_hours
                        _get_minutes
                          _get_month
                        _get_seconds
                       _get_week_day
                           _get_year
 ---------------------------------------------------------------------------------
 (1) _get_year                                             2     0      2       0
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_week_day                                         2     0      2       0
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_seconds                                          2     0      2       0
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_month                                            2     0      2       0
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_minutes                                          2     0      2       0
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_hours                                            2     0      2       0
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_day                                              2     0      2       0
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_sendstring                                       6     4      2    6720
                                             10 COMRAM     6     4      2
                       _LCD_sendbyte
                        _LCD_setline
 ---------------------------------------------------------------------------------
 (2) _LCD_setline                                          2     0      2    3370
                                              8 COMRAM     2     0      2
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            1     1      0    3118
                                              8 COMRAM     1     1      0
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0    3206
                                              8 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendbyte                                         2     1      1    3118
                                              6 COMRAM     2     1      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (4) _LCD_sendnibble                                       1     1      0      88
                                              5 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (5) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              5 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC2String                                           6     0      6   12282
                                             37 BANK0      6     0      6
                         _ADC_getval (ARG)
                            _get_day (ARG)
                          _get_hours (ARG)
                        _get_minutes (ARG)
                          _get_month (ARG)
                        _get_seconds (ARG)
                           _get_year (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    15      6   10051
                                             18 BANK0     19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    9019
                                             74 COMRAM     2     2      0
                                             12 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           25    19      6    8525
                                             64 COMRAM    10     4      6
                                              0 BANK0     12    12      0
                               _atoi
                              _fputc
                            _isdigit
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                32    22     10    4187
                                             32 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2775
                                             21 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1357
                                             14 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                9     5      4     857
                                              5 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) ___lomod                                             17     1     16     412
                                              5 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (6) ___lodiv                                             25     9     16     421
                                              5 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (5) _atoi                                                 9     7      2    2174
                                             11 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              5     3      2     259
                                              5 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              4     2      2     281
                                              5 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    1182
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _HighISR                                             3     3      0       0
                                              2 COMRAM     3     3      0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (11) _increment_seconds                                   2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC2String
     _ADC_getval (ARG)
     _get_day (ARG)
     _get_hours (ARG)
     _get_minutes (ARG)
     _get_month (ARG)
     _get_seconds (ARG)
     _get_year (ARG)
     _sprintf (ARG)
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _fputc
             _putch
           _isdigit
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
               _fputs
                 _fputc
   _ADC_getval
   _ADC_init
   _Interrupts_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _LCD_clear
     _LCD_sendbyte
   _LCD_sendstring
     _LCD_sendbyte
     _LCD_setline
       _LCD_sendbyte
   _Timer0_init
   _get_day
   _get_hours
   _get_minutes
   _get_month
   _get_seconds
   _get_week_day
   _get_year

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      50        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      20       7       12.5%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     50      8E       5       88.8%
BITBIGSFRllllhh     84      0       0      42        0.0%
BITBIGSFRlllllh     5E      0       0      45        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      53       1       88.3%
BITBIGSFRhhll       43      0       0      34        0.0%
BITBIGSFRllllll     3A      0       0      48        0.0%
BITBIGSFRlllllh     33      0       0      44        0.0%
BITBIGSFRhhlhh      1B      0       0      33        0.0%
BITBIGSFRllllhh     14      0       0      39        0.0%
BITBIGSFRhhh         D      0       0      32        0.0%
BITBIGSFRllllhl      8      0       0      43        0.0%
BITBIGSFRlllllh      7      0       0      46        0.0%
BITBIGSFRllllhh      6      0       0      41        0.0%
BITBIGSFRllllhh      3      0       0      40        0.0%
BITBIGSFRhlh         3      0       0      35        0.0%
BITBIGSFRlllllh      1      0       0      47        0.0%
BITBIGSFRlllh        1      0       0      38        0.0%
BITBIGSFRlh          1      0       0      37        0.0%
BITBIGSFRhll         1      0       0      36        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     101      49        0.0%
DATA                 0      0     101       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Nov 08 20:27:19 2022

             ?_get_minutes 0006               ?_get_seconds 0006              ?_get_week_day 0006  
      ___wmul@multiplicand 0008          ??_Interrupts_init 0006                        l210 22E2  
                      l301 21D0                        l213 22F6                        l230 1BB2  
                      l223 1BB2                        l216 2300                        l313 19E4  
                      l241 22D8                        l219 230A                        l261 21E2  
                      l149 22CE                        l262 2200                        l190 214C  
                      l238 22EC                        l319 19E4                        l327 1620  
                      l256 22B4                        l281 22C2                        l346 1E04  
                      l290 1FAE                        l259 21D4                        l292 1FBC  
                      l284 1F6C                        l349 2252                        l286 1F82  
                      l295 229A                        l288 1F98                        l298 1F54  
                      l804 1C82                        l794 1AD4                        l787 1AB4  
                      l797 1C62                        _day 00D0                        _pad 1E06  
                      wreg 000FE8                       l1103 2070                       l1131 222C  
                     l1027 20C2                       l1052 1E4A                       l1125 1776  
                     l1062 1138                       l1055 1E8C                       l2031 22B6  
                     l2111 1F7C                       l1128 177E                       l1072 12F8  
                     l1064 1140                       l1057 1EAE                       l2033 22B8  
                     l2121 1FB0                       l2113 1F84                       l2105 1F58  
                     l2201 2292                       l1154 1D4C                       l1162 2190  
                     l1139 2108                       l2035 22C0                       l2123 1FB4  
                     l2115 1F92                       l2107 1F66                       l1165 230E  
                     l2301 229C                       l2117 1F9A                       l2109 1F6E  
                     l2221 1918                       l2213 18D8                       l2303 22A6  
                     l2119 1FA8                       l2311 2192                       l2231 1970  
                     l2223 192C                       l2215 18EA                       l1096 10FE  
                     l2305 22AE                       l2313 219A                       l2241 19C2  
                     l2233 197E                       l2225 193A                       l2217 18F8  
                     l2401 1BA6                       l3051 16C4                       l2307 22B0  
                     l2315 21A4                       l2243 19D6                       l2235 1992  
                     l2227 194E                       l2219 190A                       l2411 14A4  
                     l2309 22B2                       l2237 19A0                       l2229 195C  
                     l2421 1604                       l2413 14B4                       l2405 149C  
                     l2261 2114                       l2333 22EE                       l2317 22DA  
                     l2341 22D0                       l3047 0ECE                       l2343 21D2  
                     l2271 22C4                       l2239 19B4                       l2415 1500  
                     l2263 2128                       l2335 22F8                       l2351 1AD6  
                     l3049 10B2                       l2345 21E8                       l2281 1EF2  
                     l2273 1EB0                       l2417 154C                       l2265 213C  
                     l2257 210A                       l2337 2302                       l2361 1B06  
                     l2353 1AE8                       l2347 21F8                       l2195 227A  
                     l2291 1F1E                       l2283 1EFA                       l2275 1EC8  
                     l2419 1600                       l2267 2148                       l2259 2112  
                     l2339 22E4                       l2701 2202                       l2621 1CA8  
                     l2197 2284                       l2293 1F28                       l2285 1F04  
                     l2277 1EDE                       l2269 214A                       l2711 20FE  
                     l2623 1CB2                       l2631 214E                       l2199 228C  
                     l2295 1F36                       l2287 1F0C                       l2279 1EE4  
                     l2391 1B72                       l2383 1B52                       l2375 1B32  
                     l2367 1B12                       l2359 1AF4                       l2641 224A  
                     l2713 2102                       l2705 20C4                       l2625 1CD0  
                     l2617 1C84                       l2633 215A                       l2721 1112  
                     l2297 1F40                       l2289 1F16                       l2393 1B86  
                     l2385 1B66                       l2377 1B46                       l2369 1B26  
                     l2707 20C8                       l2651 1A18                       l2627 1D06  
                     l2619 1C96                       l2635 216C                       l2731 1180  
                     l2723 112C                       l2811 0F4C                       l2803 0EA4  
                     l2299 1F4A                       l2709 20DC                       l2661 1A9A  
                     l2653 1A2C                       l2645 19E6                       l2637 2170  
                     l2741 1278                       l2733 11F6                       l2725 1168  
                     l2717 1100                       l2821 0F96                       l2813 0F5A  
                     l2805 0EDC                       l2901 12FE                       l2639 222E  
                     l2663 1A9C                       l2655 1A3A                       l2647 19F2  
                     l2671 1BDA                       l2743 1296                       l2735 11FC  
                     l2727 1170                       l2719 1110                       l2823 0FD2  
                     l2815 0F68                       l2807 0EEE                       l2399 1B92  
                     l2911 131E                       l2903 1302                       l2761 165A  
                     l2753 1622                       l2665 1AAE                       l2657 1A4C  
                     l2649 1A10                       l2681 1C5C                       l2673 1BEE  
                     l2745 12B0                       l2737 1202                       l2729 117A  
                     l2825 0FE2                       l2817 0F88                       l2809 0F16  
                     l2841 10D2                       l2921 13D6                       l2913 1342  
                     l2905 1306                       l2763 1692                       l2755 1636  
                     l2659 1A7A                       l2675 1BFC                       l2667 1BB4  
                     l2691 1E42                       l2683 1E06                       l2747 12CA  
                     l2739 1266                       l2835 1090                       l2827 1002  
                     l2931 1440                       l2923 13FA                       l2915 1366  
                     l2907 130A                       l2765 169A                       l2677 1C2A  
                     l2669 1BD2                       l2693 1E56                       l2685 1E14  
                     l2749 12D8                       l2829 1060                       l2837 10C0  
                     l2941 1468                       l2933 1448                       l2925 141E  
                     l2917 138A                       l2909 131A                       ?_pad 0016  
                     l2775 1714                       l2767 16A2                       l2759 163A  
                     l2679 1C4A                       l2695 1E6A                       l2687 1E28  
                     l2791 0E74                       l2863 201E                       l2943 1470  
                     l2935 1450                       l2927 142A                       l2919 13AE  
                     l2777 1748                       l2769 16DA                       l2697 1E6E  
                     l2689 1E36                       l2793 0E78                       l2785 0E30  
                     l2865 202A                       l2881 20B0                       l2873 2072  
                     l2945 147C                       l2937 1458                       l2929 1436  
                     l2779 175A                       l2699 1E9A                       l2795 0E84  
                     l2787 0E58                       l2867 2046                       l2875 2084  
                     l2891 1D94                       l2939 1460                       l2797 0E86  
                     l2789 0E66                       l2869 2066                       l2877 208C  
                     l2893 1DB4                       l2885 1D4E                       l2799 0E98  
                     l2879 2094                       l2895 1DC8                       l2887 1D62  
                     l2897 1DE8                       l2889 1D82                       l2899 12FA  
                     STR_1 0E1C                       STR_2 0E14                       STR_3 0E10  
                     STR_4 0E28                       STR_5 0E18                       STR_6 0E24  
                     STR_7 0E20                       STR_8 0E2C                       STR_9 0E01  
                     u2000 1E9A                       u2001 1E96                       u2010 2226  
                     u2011 2220                       u2020 2228                       u2100 12CA  
                     u2101 12C6                       u2030 20DC                       u2110 12D8  
                     u1310 1F66                       u2031 20D8                       u2111 12D4  
                     u1311 1F62                       u2040 20FE                       u2120 165A  
                     u2200 0FD2                       u1320 1F7C                       u2041 20FA  
                     u2121 1656                       u2201 0FCE                       u1321 1F78  
                     u2130 168E                       u2050 1110                       u2210 1002  
                     u1330 1F92                       u2131 168A                       u2051 110C  
                     u2211 0FFE                       u1331 1F8E                       u2140 1748  
                     u2060 112C                       u2220 2066                       u1340 1FA8  
                     u1500 19D6                       u2141 1744                       u2061 1128  
                     u2221 2062                       u1341 1FA4                       u1501 19D2  
                     u2150 175A                       u2070 1278                       u2230 1D62  
                     u1430 18EA                       u1510 2128                       u2151 1756  
                     u2071 1274                       u2231 1D5E                       u1415 2282  
                     u1431 18E6                       u1511 2124                       u2080 1296  
                     u2160 0E58                       u2240 1D94                       u1416 2284  
                     u1440 190A                       u1600 1B66                       u2081 1292  
                     u2161 0E54                       u2241 1D90                       u1441 1906  
                     u1601 1B62                       u2090 12B0                       u2170 0EEE  
                     u2250 1DC8                       u1450 192C                       u1610 1B86  
                     u2091 12AC                       u2171 0EEA                       u2251 1DC4  
                     u2307 1ED2                       u1451 1928                       u1611 1B82  
                     u2180 0F16                       u1460 194E                       u1620 1BA6  
                     u2181 0F12                       u2317 1EE6                       u1461 194A  
                     u1621 1BA2                       u2261 1424                       u2190 0F5A  
                     u1550 21E2                       u1470 1970                       u1630 14FC  
                     u2191 0F56                       u1551 21DE                       u2327 1EF4  
                     u1471 196C                       u1480 1992                       u1640 153C  
                     u1560 1AE8                       u2337 1F06                       u1481 198E  
                     u1561 1AE4                       u1490 19B4                       u1650 154C  
                     u1570 1B06                       u2347 1F18                       u1491 19B0  
                     u1651 1548                       u1571 1B02                       u1660 1620  
                     u1580 1B26                       u1901 19EC                       u2357 1F2E  
                     u1661 161C                       u1637 14F2                       u1581 1B22  
                     u2277 1486                       u1910 1A10                       u1590 1B46  
                     u1911 1A0C                       u2367 2294                       u2287 2194  
                     u1647 1532                       u1591 1B42                       u1920 1A3A  
                     u1921 1A36                       u2377 1FB6                       u2297 21AA  
                     u1930 1A7A                       u1850 1C96                       u1931 1A76  
                     u1851 1C92                       u2387 22BA                       u1940 1BD2  
                     u1860 1CA8                       u1941 1BCE                       u1861 1CA4  
                     u1950 1BFC                       u1870 1CD0                       u1951 1BF8  
                     u1871 1CCC                       u1960 1C2A                       u1880 1D06  
                     u1961 1C26                       u1881 1D02                       u1890 2190  
                     u1970 1E14                       u1891 218C                       u1971 1E10  
                     u1980 1E36                       u1981 1E32                       u1990 1E8C  
                     u1991 1E88                       _dbuf 0100                       _atoi 1622  
                     _main 12FA                       _prec 00E6                       _year 00CE  
                     pad@i 001D                       pad@p 001A                       fsr0h 000FEA  
                     fsr1h 000FE2                       indf0 000FEF                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     pad@w 001F                       fsr2l 000FD9                       btemp 0054  
                     _utoa 1100               ?_LCD_setline 0009                       prodh 000FF4  
                     prodl 000FF3                       start 0082           __end_of_ADC_init 22B6  
          __end_of_HighISR 0082               ___param_bank 000000             ??_get_week_day 0008  
                    ??_pad 001C           __end_of_LCD_Init 1F56                      ?_atoi 000C  
                    ?_main 0001                      _ADPCH 000F5F                      STR_10 0E06  
                    STR_11 0E0B                      ?_utoa 0021            __end_of___lodiv 1AD6  
          __end_of___lomod 1C84                      i2l207 18D6                      i2l157 0076  
                    i2l197 17A4               vfpfcnvrt@fmt 0043                      _TMR0H 000FD4  
                    _TMR0L 000FD3            __end_of_get_day 230C                      _flags 0051  
                    _fputc 1C84                      _fputs 214E            __end_of_isdigit 222E  
                    _hours 00E8                      _month 004F                      atoi@n 0013  
                    pad@fp 0016                      atoi@s 000C                      _width 00E4  
                    _putch 230E            __end_of_isspace 210A              ?_LCD_sendbyte 0007  
                    tablat 000FF5                      ttemp5 0055                      ttemp6 0058  
                    ttemp7 005C                      utoa@d 0023                      utoa@i 003F  
                    utoa@n 0037                      utoa@p 0033                      utoa@w 0035  
                    status 000FD8                      wtemp8 0055            __end_of_sprintf 20C4  
         ___lodiv@dividend 0006            __initialization 1FBE               __end_of_atoi 1780  
             __end_of_main 149C               __end_of_utoa 12FA               ??_ADC2String 004D  
        __end_of_LCD_E_TOG 22C4                     ??_atoi 000E                     ??_main 004D  
                   ??_utoa 002B              __activetblptr 000003           ___lodiv@quotient 0016  
        __end_of_LCD_clear 21D2                     ?_fputc 0006                     ?_fputs 000F  
                   _ADRESH 000F64              ADC2String@buf 0085             ??_LCD_sendbyte 0008  
                   ?_putch 0001                     i2l2431 17C0                     i2l2423 1780  
                   i2l2441 17F8                     i2l2433 17C4                     i2l2425 1794  
                   i2l2521 0012                     i2l2451 1824                     i2l2443 1800  
                   i2l2435 17D8                     i2l2427 179C                     i2l2531 006A  
                   i2l2523 0022                     i2l2453 1836                     i2l2461 1878  
                   i2l2445 1804                     i2l2437 17E0                     i2l2429 17B8  
                   i2l2533 0072                     i2l2525 0046                     i2l2471 18D2  
                   i2l2455 1854                     i2l2447 1808                     i2l2439 17E4  
                   i2l2527 004A                     i2l2457 1868                     i2l2449 181C  
                   i2l2529 005E                     i2l2459 1870                     i2l2467 18B6  
                   i2l2469 18CA              vfpfcnvrt@done 0068                  ??_HighISR 0003  
       __end_of_ADC2String 1E06               ??_ADC_getval 0008              ??_Timer0_init 0006  
             vfprintf@cfmt 004B           __end_of_get_year 22DA                     ___wmul 222E  
                ??___lodiv 0016                  ??___lomod 0016                     clear_0 1FFC  
                   clear_1 2008                     isa$std 000001                     pad@buf 0018  
                ??_get_day 0008                     fputc@c 0006                     fputs@c 0013  
                   fputs@i 0014               __pdataCOMRAM 0052                     fputs@s 000F  
                ??_isdigit 0008               __mediumconst 0000                  ??_isspace 0008  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ?_ADC_init 0001                     putch@c 0001           __end_of_vfprintf 2072  
                   utoa@fp 0021                  ??_sprintf 004D         __end_of_ADC_getval 2202  
     __end_of_get_week_day 1BB4                 __accesstop 0060    __end_of__initialization 2014  
                ?_LCD_Init 0001              ___rparam_used 000001            _Interrupts_init 22C4  
           __pcstackCOMRAM 0001               __pidataBANK0 2254              __end_of_fputc 1D4E  
            __end_of_fputs 2192              __end_of_putch 2310        __end_of_Timer0_init 214E  
               ??_ADC_init 0006                    ??_fputc 000A                    ??_fputs 0013  
                  ??_putch 0006                 __pbssBANK0 00D4                 __pbssBANK1 0100  
               ??_LCD_Init 0009             _LCD_sendnibble 1F56             _LCD_sendstring 149C  
                  ?___wmul 0006       __end_of_LCD_sendbyte 229C                  ?_get_year 0006  
         ___lomod@dividend 0006     __end_of_LCD_sendnibble 1FBE    __end_of_Interrupts_init 22D0  
                  _HighISR 0008     __end_of_LCD_sendstring 1622                  _ADREFbits 000F58  
          LCD_sendstring@i 000F                    __Hparam 0000                    __Lparam 0000  
              _Timer0_init 210A          __end_of_get_hours 2302          __end_of_get_month 22EE  
                  ___lodiv 19E6                    ___lomod 1BB4                  ?_vfprintf 006C  
             __psmallconst 0E00                    __pcinit 1FBE                    __ramtop 0E00  
                  __ptext0 12FA                    __ptext1 22D0                    __ptext2 1AD6  
                  __ptext3 22DA                    __ptext4 22E4                    __ptext5 22EE  
                  __ptext6 22F8                    __ptext7 2302                    __ptext8 210A  
                  __ptext9 149C                    _get_day 2302                    _isdigit 2202  
                  _minutes 00EA                    _seconds 00EC                    _isspace 20C4  
                _LCD_E_TOG 22B6            LCD_setline@line 0009                    main@ADC 0093  
                  atoi@neg 0011                    main@Day 00AC                    main@Hou 00AA  
                  main@Min 00A8                    main@Sec 00A6                    main@Mon 00AE  
                  main@Yea 008F                    _sprintf 2072                    main@lst 0096  
               ??_get_year 0008                  _LCD_clear 2192       end_of_initialization 2014  
          ?_LCD_sendnibble 0001           ADC_getval@tmpval 0008                    fputc@fp 0008  
                  fputs@fp 0011            ?_LCD_sendstring 000B                 _month_days 00B0  
        __end_of_vfpfcnvrt 1100                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc1 000FE6                    postinc2 000FDE  
         vfpfcnvrt@convarg 0060                 main@F14260 00D4                 main@F14258 00CA  
               ??_vfprintf 004B               _get_week_day 1AD6                  _PORTAbits 000F89  
                _PORTBbits 000F8A                  _PORTFbits 000F8E                  _PORTGbits 000F8F  
               ?_LCD_E_TOG 0001                  _TRISAbits 000F81                  _TRISBbits 000F82  
                _TRISCbits 000F83                  _TRISEbits 000F85                  _TRISFbits 000F86  
                _TRISGbits 000F87                 ?_LCD_clear 0001                _CM1CON0bits 000ED0  
              _CM1CON1bits 000ED1           ?_Interrupts_init 0001          _increment_seconds 1780  
       ?_increment_seconds 0001              ??_get_minutes 0008              ??_get_seconds 0008  
              ADC2String@x 0087        ??_increment_seconds 0001                vfpfcnvrt@ap 0045  
              vfpfcnvrt@cp 006A                vfpfcnvrt@fp 0041             __end_of___wmul 2254  
     LCD_sendnibble@number 0006              __pidataCOMRAM 230C        start_initialization 1FBE  
          ___lodiv@divisor 000E            ___lodiv@counter 001E                __end_of_pad 1EB0  
__end_of_increment_seconds 18D8               _LCD_sendbyte 2278              ??_LCD_setline 000B  
              vfprintf@fmt 006E                   ??___wmul 000A       LCD_sendstring@strlst 000B  
              __pdataBANK0 00B0        __end_of_get_minutes 22F8        __end_of_get_seconds 22E4  
      main@day_of_the_week 008B                __pbssCOMRAM 004F                ??_LCD_E_TOG 0006  
            __pcstackBANK0 0060                ??_LCD_clear 0009                   ?_HighISR 0001  
             ?_Timer0_init 0001                  __pintcode 0008        __end_of_LCD_setline 19E6  
                 ?___lodiv 0006                   ?___lomod 0006                  _get_hours 22F8  
                _get_month 22E4                   ?_get_day 0006            ___lomod@divisor 000E  
              __smallconst 0E00            ___lomod@counter 0016                   ?_isdigit 0006  
                 ?_isspace 0006           ??_LCD_sendnibble 0006                   _ADC_init 229C  
         ??_LCD_sendstring 000D                   ?_sprintf 0072           LCD_sendbyte@Byte 0008  
                 _LCD_Init 1EB0           LCD_sendbyte@type 0007             ___wmul@product 000A  
                 _LATAbits 000F79                   _LATBbits 000F7A                   _LATCbits 000F7B  
                 _LATEbits 000F7D                   _LATFbits 000F7E                   _LATGbits 000F7F  
                 _LATHbits 000F80                   _PIE0bits 000E29                   _PIE2bits 000E2B  
                 i2u170_40 17F8                   i2u170_41 17F4                   i2u171_40 181C  
                 i2u171_41 1818                   i2u172_40 1836                   i2u172_41 1832  
                 i2u173_40 1854                   i2u181_40 005E                   i2u180_48 0036  
                 i2u173_41 1850                   i2u181_41 005A                   i2u174_40 1868  
                 i2u174_41 1864                   i2u175_40 18B2                   i2u167_40 1794  
                 i2u175_41 18AE                   i2u167_41 1790                   _PIR0bits 000E33  
                 i2u176_40 18CA                   i2u168_40 17B8                   i2u176_41 18C6  
                 i2u168_41 17B4                   i2u169_40 17D8                   i2u169_41 17D4  
                 i2u178_40 0022                   i2u178_41 001E                   i2u179_40 0034  
                 i2u179_41 002C                _get_minutes 22EE                _get_seconds 22DA  
               _ADC2String 1D4E                  _test_mode 00D2                  _vfpfcnvrt 0E30  
               ?_get_hours 0006                 ?_get_month 0006                 _ADCON0bits 000F60  
        ___wmul@multiplier 0006               _isspace$2016 000A                 _CM1NCHbits 000ED2  
               _CM1PCHbits 000ED3                  copy_data0 1FD2                _LCD_setline 18D8  
                 __Hrparam 0000                 _ADC_getval 21D2                 vfprintf@ap 0070  
                 __Lrparam 0000                 vfprintf@fp 006C                 ?_vfpfcnvrt 0041  
               _ANSELAbits 000E92                 sprintf@fmt 0074                 _T0CON0bits 000FD5  
               _T0CON1bits 000FD6                   __ptext10 18D8                   __ptext11 2192  
                 __ptext20 2072                   __ptext12 1EB0                   __ptext21 201E  
                 __ptext13 2278                   __ptext30 1622                   __ptext22 0E30  
                 __ptext14 1F56                   __ptext31 20C4                   __ptext23 1100  
                 __ptext15 22B6                   __ptext32 2202                   __ptext24 1E06  
                 __ptext16 22C4                   __ptext33 222E                   __ptext25 214E  
                 __ptext17 229C                   __ptext26 1C84                   __ptext18 21D2  
                 __ptext35 1780                   __ptext27 230E                   __ptext19 1D4E  
                 __ptext28 1BB4                   __ptext29 19E6                   _get_year 22D0  
                 _week_day 0052                   isa$xinst 000000                   int$flags 0054  
              ?_ADC2String 0085                   _vfprintf 201E                ??_get_hours 0008  
              ??_get_month 0008    ADC2String@leading_zeros 0089                 _INTCONbits 000FF2  
                 isdigit@c 0006                   intlevel2 0000                  sprintf@ap 0078  
             _DAC1CON0bits 000EC6               _DAC1CON1bits 000EC7                   isspace@c 0006  
              ?_ADC_getval 0006                ??_vfpfcnvrt 0047                   sprintf@f 007A  
                 sprintf@s 0072  
